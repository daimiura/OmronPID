.TH "QCPDataSelection" 3 "Wed Mar 15 2023" "OmronPID" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPDataSelection \- Describes a data set by holding multiple \fBQCPDataRange\fP instances\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPDataSelection\fP ()"
.br
.ti -1c
.RI "\fBQCPDataSelection\fP (const \fBQCPDataRange\fP &range)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBQCPDataSelection\fP &other) const"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBQCPDataSelection\fP &other) const"
.br
.ti -1c
.RI "\fBQCPDataSelection\fP & \fBoperator+=\fP (const \fBQCPDataSelection\fP &other)"
.br
.ti -1c
.RI "\fBQCPDataSelection\fP & \fBoperator+=\fP (const \fBQCPDataRange\fP &other)"
.br
.ti -1c
.RI "\fBQCPDataSelection\fP & \fBoperator\-=\fP (const \fBQCPDataSelection\fP &other)"
.br
.ti -1c
.RI "\fBQCPDataSelection\fP & \fBoperator\-=\fP (const \fBQCPDataRange\fP &other)"
.br
.ti -1c
.RI "int \fBdataRangeCount\fP () const"
.br
.ti -1c
.RI "int \fBdataPointCount\fP () const"
.br
.ti -1c
.RI "\fBQCPDataRange\fP \fBdataRange\fP (int index=0) const"
.br
.ti -1c
.RI "QList< \fBQCPDataRange\fP > \fBdataRanges\fP () const"
.br
.ti -1c
.RI "\fBQCPDataRange\fP \fBspan\fP () const"
.br
.ti -1c
.RI "void \fBaddDataRange\fP (const \fBQCPDataRange\fP &\fBdataRange\fP, bool \fBsimplify\fP=true)"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "bool \fBisEmpty\fP () const"
.br
.ti -1c
.RI "void \fBsimplify\fP ()"
.br
.ti -1c
.RI "void \fBenforceType\fP (\fBQCP::SelectionType\fP type)"
.br
.ti -1c
.RI "bool \fBcontains\fP (const \fBQCPDataSelection\fP &other) const"
.br
.ti -1c
.RI "\fBQCPDataSelection\fP \fBintersection\fP (const \fBQCPDataRange\fP &other) const"
.br
.ti -1c
.RI "\fBQCPDataSelection\fP \fBintersection\fP (const \fBQCPDataSelection\fP &other) const"
.br
.ti -1c
.RI "\fBQCPDataSelection\fP \fBinverse\fP (const \fBQCPDataRange\fP &outerRange) const"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "const \fBQCPDataSelection\fP \fBoperator+\fP (const \fBQCPDataSelection\fP &a, const \fBQCPDataSelection\fP &b)"
.br
.ti -1c
.RI "const \fBQCPDataSelection\fP \fBoperator+\fP (const \fBQCPDataRange\fP &a, const \fBQCPDataSelection\fP &b)"
.br
.ti -1c
.RI "const \fBQCPDataSelection\fP \fBoperator+\fP (const \fBQCPDataSelection\fP &a, const \fBQCPDataRange\fP &b)"
.br
.ti -1c
.RI "const \fBQCPDataSelection\fP \fBoperator+\fP (const \fBQCPDataRange\fP &a, const \fBQCPDataRange\fP &b)"
.br
.ti -1c
.RI "const \fBQCPDataSelection\fP \fBoperator\-\fP (const \fBQCPDataSelection\fP &a, const \fBQCPDataSelection\fP &b)"
.br
.ti -1c
.RI "const \fBQCPDataSelection\fP \fBoperator\-\fP (const \fBQCPDataRange\fP &a, const \fBQCPDataSelection\fP &b)"
.br
.ti -1c
.RI "const \fBQCPDataSelection\fP \fBoperator\-\fP (const \fBQCPDataSelection\fP &a, const \fBQCPDataRange\fP &b)"
.br
.ti -1c
.RI "const \fBQCPDataSelection\fP \fBoperator\-\fP (const \fBQCPDataRange\fP &a, const \fBQCPDataRange\fP &b)"
.br
.in -1c
.SS "Related Functions"
(Note that these are not member functions\&.) 
.in +1c
.ti -1c
.RI "QDebug \fBoperator<<\fP (QDebug d, const \fBQCPDataSelection\fP &selection)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Describes a data set by holding multiple \fBQCPDataRange\fP instances\&. 

\fBQCPDataSelection\fP manages multiple instances of \fBQCPDataRange\fP in order to represent any (possibly disjoint) set of data selection\&.
.PP
The data selection can be modified with addition and subtraction operators which take \fBQCPDataSelection\fP and \fBQCPDataRange\fP instances, as well as methods such as \fBaddDataRange\fP and \fBclear\fP\&. Read access is provided by \fBdataRange\fP, \fBdataRanges\fP, \fBdataRangeCount\fP, etc\&.
.PP
The method \fBsimplify\fP is used to join directly adjacent or even overlapping \fBQCPDataRange\fP instances\&. \fBQCPDataSelection\fP automatically simplifies when using the addition/subtraction operators\&. The only case when \fBsimplify\fP is left to the user, is when calling \fBaddDataRange\fP, with the parameter \fIsimplify\fP explicitly set to false\&. This is useful if many data ranges will be added to the selection successively and the overhead for simplifying after each iteration shall be avoided\&. In this case, you should make sure to call \fBsimplify\fP after completing the operation\&.
.PP
Use \fBenforceType\fP to bring the data selection into a state complying with the constraints for selections defined in \fBQCP::SelectionType\fP\&.
.PP
QCustomPlot's \fBdata selection mechanism\fP is based on \fBQCPDataSelection\fP and \fBQCPDataRange\fP\&.
.SH "Iterating over a data selection"
.PP
As an example, the following code snippet calculates the average value of a graph's data \fBselection\fP:
.PP
.PP
.nf
.fi
.PP
 
.PP
Definition at line \fB927\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPDataSelection::QCPDataSelection ()\fC [explicit]\fP"
Creates an empty \fBQCPDataSelection\fP\&. 
.PP
Definition at line \fB2383\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QCPDataSelection::QCPDataSelection (const \fBQCPDataRange\fP & range)\fC [explicit]\fP"
Creates a \fBQCPDataSelection\fP containing the provided \fIrange\fP\&. 
.PP
Definition at line \fB2390\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void QCPDataSelection::addDataRange (const \fBQCPDataRange\fP & dataRange, bool simplify = \fCtrue\fP)"
Adds the given \fIdataRange\fP to this data selection\&. This is equivalent to the += operator but allows disabling immediate simplification by setting \fIsimplify\fP to false\&. This can improve performance if adding a very large amount of data ranges successively\&. In this case, make sure to call \fBsimplify\fP manually, after the operation\&. 
.PP
Definition at line \fB2542\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPDataSelection::clear ()"
Removes all data ranges\&. The data selection then contains no data points\&.
.PP
\fBisEmpty\fP 
.PP
Definition at line \fB2554\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPDataSelection::contains (const \fBQCPDataSelection\fP & other) const"
Returns true if the data selection \fIother\fP is contained entirely in this data selection, i\&.e\&. all data point indices that are in \fIother\fP are also in this data selection\&.
.PP
\fBSee also\fP
.RS 4
\fBQCPDataRange::contains\fP 
.RE
.PP

.PP
Definition at line \fB2651\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "int QCPDataSelection::dataPointCount () const"
Returns the total number of data points contained in all data ranges that make up this data selection\&. 
.PP
Definition at line \fB2496\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPDataRange\fP QCPDataSelection::dataRange (int index = \fC0\fP) const"
Returns the data range with the specified \fIindex\fP\&.
.PP
If the data selection is simplified (the usual state of the selection, see \fBsimplify\fP), the ranges are sorted by ascending data point index\&.
.PP
\fBSee also\fP
.RS 4
\fBdataRangeCount\fP 
.RE
.PP

.PP
Definition at line \fB2512\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "int QCPDataSelection::dataRangeCount () const\fC [inline]\fP"
Returns the number of ranges that make up the data selection\&. The ranges can be accessed by \fBdataRange\fP via their index\&.
.PP
\fBSee also\fP
.RS 4
\fBdataRange\fP, \fBdataPointCount\fP 
.RE
.PP

.PP
Definition at line \fB949\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QList< \fBQCPDataRange\fP > QCPDataSelection::dataRanges () const\fC [inline]\fP"
Returns all data ranges that make up the data selection\&. If the data selection is simplified (the usual state of the selection, see \fBsimplify\fP), the ranges are sorted by ascending data point index\&.
.PP
\fBSee also\fP
.RS 4
\fBdataRange\fP 
.RE
.PP

.PP
Definition at line \fB952\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPDataSelection::enforceType (\fBQCP::SelectionType\fP type)"
Makes sure this data selection conforms to the specified \fItype\fP selection type\&. Before the type is enforced, \fBsimplify\fP is called\&.
.PP
Depending on \fItype\fP, enforcing means adding new data points that were previously not part of the selection, or removing data points from the selection\&. If the current selection already conforms to \fItype\fP, the data selection is not changed\&.
.PP
\fBSee also\fP
.RS 4
\fBQCP::SelectionType\fP 
.RE
.PP

.PP
Definition at line \fB2605\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPDataSelection\fP QCPDataSelection::intersection (const \fBQCPDataRange\fP & other) const"
Returns a data selection containing the points which are both in this data selection and in the data range \fIother\fP\&.
.PP
A common use case is to limit an unknown data selection to the valid range of a data container, using \fBQCPDataContainer::dataRange\fP as \fIother\fP\&. One can then safely iterate over the returned data selection without exceeding the data container's bounds\&. 
.PP
Definition at line \fB2675\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPDataSelection\fP QCPDataSelection::intersection (const \fBQCPDataSelection\fP & other) const"
Returns a data selection containing the points which are both in this data selection and in the data selection \fIother\fP\&. 
.PP
Definition at line \fB2688\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPDataSelection\fP QCPDataSelection::inverse (const \fBQCPDataRange\fP & outerRange) const"
Returns a data selection which is the exact inverse of this data selection, with \fIouterRange\fP defining the base range on which to invert\&. If \fIouterRange\fP is smaller than the \fBspan\fP of this data selection, it is expanded accordingly\&.
.PP
For example, this method can be used to retrieve all unselected segments by setting \fIouterRange\fP to the full data range of the plottable, and calling this method on a data selection holding the selected segments\&. 
.PP
Definition at line \fB2706\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPDataSelection::isEmpty () const\fC [inline]\fP"
Returns true if there are no data ranges, and thus no data points, in this \fBQCPDataSelection\fP instance\&.
.PP
\fBSee also\fP
.RS 4
\fBdataRangeCount\fP 
.RE
.PP

.PP
Definition at line \fB958\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPDataSelection::operator!= (const \fBQCPDataSelection\fP & other) const\fC [inline]\fP"

.PP
Definition at line \fB934\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPDataSelection\fP & QCPDataSelection::operator+= (const \fBQCPDataRange\fP & other)"
Adds the data range \fIother\fP to this data selection, and then simplifies this data selection (see \fBsimplify\fP)\&. 
.PP
Definition at line \fB2429\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPDataSelection\fP & QCPDataSelection::operator+= (const \fBQCPDataSelection\fP & other)"
Adds the data selection of \fIother\fP to this data selection, and then simplifies this data selection (see \fBsimplify\fP)\&. 
.PP
Definition at line \fB2418\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPDataSelection\fP & QCPDataSelection::operator\-= (const \fBQCPDataRange\fP & other)"
Removes all data point indices that are described by \fIother\fP from this data selection\&. 
.PP
Definition at line \fB2449\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPDataSelection\fP & QCPDataSelection::operator\-= (const \fBQCPDataSelection\fP & other)"
Removes all data point indices that are described by \fIother\fP from this data selection\&. 
.PP
Definition at line \fB2438\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPDataSelection::operator== (const \fBQCPDataSelection\fP & other) const"
Returns true if this selection is identical (contains the same data ranges with the same begin and end indices) to \fIother\fP\&.
.PP
Note that both data selections must be in simplified state (the usual state of the selection, see \fBsimplify\fP) for this operator to return correct results\&. 
.PP
Definition at line \fB2402\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPDataSelection::simplify ()"
Sorts all data ranges by range begin index in ascending order, and then joins directly adjacent or overlapping ranges\&. This can reduce the number of individual data ranges in the selection, and prevents possible double-counting when iterating over the data points held by the data ranges\&.
.PP
This method is automatically called when using the addition/subtraction operators\&. The only case when \fBsimplify\fP is left to the user, is when calling \fBaddDataRange\fP, with the parameter \fIsimplify\fP explicitly set to false\&. 
.PP
Definition at line \fB2568\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPDataRange\fP QCPDataSelection::span () const"
Returns a \fBQCPDataRange\fP which spans the entire data selection, including possible intermediate segments which are not part of the original data selection\&. 
.PP
Definition at line \fB2528\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "const \fBQCPDataSelection\fP operator+ (const \fBQCPDataRange\fP & a, const \fBQCPDataRange\fP & b)\fC [friend]\fP"
Return a \fBQCPDataSelection\fP with the data points in \fIa\fP joined with the data points in \fIb\fP\&. The resulting data selection is already simplified (see \fBQCPDataSelection::simplify\fP)\&. 
.PP
Definition at line \fB1012\fP of file \fBqcustomplot\&.h\fP\&.
.SS "const \fBQCPDataSelection\fP operator+ (const \fBQCPDataRange\fP & a, const \fBQCPDataSelection\fP & b)\fC [friend]\fP"
Return a \fBQCPDataSelection\fP with the data points in \fIa\fP joined with the data points in \fIb\fP\&. The resulting data selection is already simplified (see \fBQCPDataSelection::simplify\fP)\&. 
.PP
Definition at line \fB990\fP of file \fBqcustomplot\&.h\fP\&.
.SS "const \fBQCPDataSelection\fP operator+ (const \fBQCPDataSelection\fP & a, const \fBQCPDataRange\fP & b)\fC [friend]\fP"
Return a \fBQCPDataSelection\fP with the data points in \fIa\fP joined with the data points in \fIb\fP\&. The resulting data selection is already simplified (see \fBQCPDataSelection::simplify\fP)\&. 
.PP
Definition at line \fB1001\fP of file \fBqcustomplot\&.h\fP\&.
.SS "const \fBQCPDataSelection\fP operator+ (const \fBQCPDataSelection\fP & a, const \fBQCPDataSelection\fP & b)\fC [friend]\fP"
Return a \fBQCPDataSelection\fP with the data points in \fIa\fP joined with the data points in \fIb\fP\&. The resulting data selection is already simplified (see \fBQCPDataSelection::simplify\fP)\&. 
.PP
Definition at line \fB979\fP of file \fBqcustomplot\&.h\fP\&.
.SS "const \fBQCPDataSelection\fP operator\- (const \fBQCPDataRange\fP & a, const \fBQCPDataRange\fP & b)\fC [friend]\fP"
Return a \fBQCPDataSelection\fP with the data points which are in \fIa\fP but not in \fIb\fP\&. 
.PP
Definition at line \fB1052\fP of file \fBqcustomplot\&.h\fP\&.
.SS "const \fBQCPDataSelection\fP operator\- (const \fBQCPDataRange\fP & a, const \fBQCPDataSelection\fP & b)\fC [friend]\fP"
Return a \fBQCPDataSelection\fP with the data points which are in \fIa\fP but not in \fIb\fP\&. 
.PP
Definition at line \fB1032\fP of file \fBqcustomplot\&.h\fP\&.
.SS "const \fBQCPDataSelection\fP operator\- (const \fBQCPDataSelection\fP & a, const \fBQCPDataRange\fP & b)\fC [friend]\fP"
Return a \fBQCPDataSelection\fP with the data points which are in \fIa\fP but not in \fIb\fP\&. 
.PP
Definition at line \fB1042\fP of file \fBqcustomplot\&.h\fP\&.
.SS "const \fBQCPDataSelection\fP operator\- (const \fBQCPDataSelection\fP & a, const \fBQCPDataSelection\fP & b)\fC [friend]\fP"
Return a \fBQCPDataSelection\fP with the data points which are in \fIa\fP but not in \fIb\fP\&. 
.PP
Definition at line \fB1022\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QDebug operator<< (QDebug d, const \fBQCPDataSelection\fP & selection)\fC [related]\fP"
Prints \fIselection\fP in a human readable format to the qDebug output\&. 
.PP
Definition at line \fB1073\fP of file \fBqcustomplot\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OmronPID from the source code\&.
