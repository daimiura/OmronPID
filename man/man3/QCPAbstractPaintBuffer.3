.TH "QCPAbstractPaintBuffer" 3 "Wed Mar 15 2023" "OmronPID" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPAbstractPaintBuffer \- The abstract base class for paint buffers, which define the rendering backend\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBQCPPaintBufferPixmap\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPAbstractPaintBuffer\fP (const QSize &size, double devicePixelRatio)"
.br
.ti -1c
.RI "QSize \fBsize\fP () const"
.br
.ti -1c
.RI "bool \fBinvalidated\fP () const"
.br
.ti -1c
.RI "double \fBdevicePixelRatio\fP () const"
.br
.ti -1c
.RI "void \fBsetSize\fP (const QSize &size)"
.br
.ti -1c
.RI "void \fBsetInvalidated\fP (bool invalidated=true)"
.br
.ti -1c
.RI "void \fBsetDevicePixelRatio\fP (double ratio)"
.br
.ti -1c
.RI "virtual \fBQCPPainter\fP * \fBstartPainting\fP ()=0"
.br
.ti -1c
.RI "virtual void \fBdonePainting\fP ()"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter) const =0"
.br
.ti -1c
.RI "virtual void \fBclear\fP (const QColor &color)=0"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBreallocateBuffer\fP ()=0"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "QSize \fBmSize\fP"
.br
.ti -1c
.RI "double \fBmDevicePixelRatio\fP"
.br
.ti -1c
.RI "bool \fBmInvalidated\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The abstract base class for paint buffers, which define the rendering backend\&. 

This abstract base class defines the basic interface that a paint buffer needs to provide in order to be usable by \fBQCustomPlot\fP\&.
.PP
A paint buffer manages both a surface to draw onto, and the matching paint device\&. The size of the surface can be changed via \fBsetSize\fP\&. External classes (\fBQCustomPlot\fP and \fBQCPLayer\fP) request a painter via \fBstartPainting\fP and then perform the draw calls\&. Once the painting is complete, \fBdonePainting\fP is called, so the paint buffer implementation can do clean up if necessary\&. Before rendering a frame, each paint buffer is usually filled with a color using \fBclear\fP (usually the color is \fCQt::transparent\fP), to remove the contents of the previous frame\&.
.PP
The simplest paint buffer implementation is \fBQCPPaintBufferPixmap\fP which allows regular software rendering via the raster engine\&. Hardware accelerated rendering via pixel buffers and frame buffer objects is provided by \fBQCPPaintBufferGlPbuffer\fP and \fBQCPPaintBufferGlFbo\fP\&. They are used automatically if \fBQCustomPlot::setOpenGl\fP is enabled\&. 
.PP
Definition at line \fB515\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPAbstractPaintBuffer::QCPAbstractPaintBuffer (const QSize & size, double devicePixelRatio)\fC [explicit]\fP"
Creates a paint buffer and initializes it with the provided \fIsize\fP and \fIdevicePixelRatio\fP\&.
.PP
Subclasses must call their \fBreallocateBuffer\fP implementation in their respective constructors\&. 
.PP
Definition at line \fB570\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QCPAbstractPaintBuffer::~QCPAbstractPaintBuffer ()\fC [virtual]\fP"

.PP
Definition at line \fB577\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void QCPAbstractPaintBuffer::clear (const QColor & color)\fC [pure virtual]\fP"
Fills the entire buffer with the provided \fIcolor\fP\&. To have an empty transparent buffer, use the named color \fCQt::transparent\fP\&.
.PP
This method must not be called if there is currently a painter (acquired with \fBstartPainting\fP) active\&. 
.PP
Implemented in \fBQCPPaintBufferPixmap\fP\&.
.SS "double QCPAbstractPaintBuffer::devicePixelRatio () const\fC [inline]\fP"

.PP
Definition at line \fB524\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPAbstractPaintBuffer::donePainting ()\fC [inline]\fP, \fC [virtual]\fP"
If you have acquired a \fBQCPPainter\fP to paint onto this paint buffer via \fBstartPainting\fP, call this method as soon as you are done with the painting operations and have deleted the painter\&.
.PP
paint buffer subclasses may use this method to perform any type of cleanup that is necessary\&. The default implementation does nothing\&. 
.PP
Definition at line \fB533\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPAbstractPaintBuffer::draw (\fBQCPPainter\fP * painter) const\fC [pure virtual]\fP"
Draws the contents of this buffer with the provided \fIpainter\fP\&. This is the method that is used to finally join all paint buffers and draw them onto the screen\&. 
.PP
Implemented in \fBQCPPaintBufferPixmap\fP\&.
.SS "bool QCPAbstractPaintBuffer::invalidated () const\fC [inline]\fP"

.PP
Definition at line \fB523\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPAbstractPaintBuffer::reallocateBuffer ()\fC [protected]\fP, \fC [pure virtual]\fP"
Reallocates the internal buffer with the currently configured size (\fBsetSize\fP) and device pixel ratio, if applicable (\fBsetDevicePixelRatio\fP)\&. It is called as soon as any of those properties are changed on this paint buffer\&.
.PP
\fBNote\fP
.RS 4
Subclasses of \fBQCPAbstractPaintBuffer\fP must call their reimplementation of this method in their constructor, to perform the first allocation (this can not be done by the base class because calling pure virtual methods in base class constructors is not possible)\&. 
.RE
.PP

.PP
Implemented in \fBQCPPaintBufferPixmap\fP\&.
.SS "void QCPAbstractPaintBuffer::setDevicePixelRatio (double ratio)"
Sets the the device pixel ratio to \fIratio\fP\&. This is useful to render on high-DPI output devices\&. The ratio is automatically set to the device pixel ratio used by the parent \fBQCustomPlot\fP instance\&.
.PP
The buffer is reallocated (by calling \fBreallocateBuffer\fP), so any painters that were obtained by \fBstartPainting\fP are invalidated and must not be used after calling this method\&.
.PP
\fBNote\fP
.RS 4
This method is only available for Qt versions 5\&.4 and higher\&. 
.RE
.PP

.PP
Definition at line \fB627\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAbstractPaintBuffer::setInvalidated (bool invalidated = \fCtrue\fP)"
Sets the invalidated flag to \fIinvalidated\fP\&.
.PP
This mechanism is used internally in conjunction with isolated replotting of \fBQCPLayer\fP instances (in \fBQCPLayer::lmBuffered\fP mode)\&. If \fBQCPLayer::replot\fP is called on a buffered layer, i\&.e\&. an isolated repaint of only that layer (and its dedicated paint buffer) is requested, \fBQCustomPlot\fP will decide depending on the invalidated flags of other paint buffers whether it also replots them, instead of only the layer on which the replot was called\&.
.PP
The invalidated flag is set to true when \fBQCPLayer\fP association has changed, i\&.e\&. if layers were added or removed from this buffer, or if they were reordered\&. It is set to false as soon as all associated \fBQCPLayer\fP instances are drawn onto the buffer\&.
.PP
Under normal circumstances, it is not necessary to manually call this method\&. 
.PP
Definition at line \fB613\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAbstractPaintBuffer::setSize (const QSize & size)"
Sets the paint buffer size\&.
.PP
The buffer is reallocated (by calling \fBreallocateBuffer\fP), so any painters that were obtained by \fBstartPainting\fP are invalidated and must not be used after calling this method\&.
.PP
If \fIsize\fP is already the current buffer size, this method does nothing\&. 
.PP
Definition at line \fB589\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QSize QCPAbstractPaintBuffer::size () const\fC [inline]\fP"

.PP
Definition at line \fB522\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPPainter\fP * QCPAbstractPaintBuffer::startPainting ()\fC [pure virtual]\fP"
Returns a \fBQCPPainter\fP which is ready to draw to this buffer\&. The ownership and thus the responsibility to delete the painter after the painting operations are complete is given to the caller of this method\&.
.PP
Once you are done using the painter, delete the painter and call \fBdonePainting\fP\&.
.PP
While a painter generated with this method is active, you must not call \fBsetSize\fP, \fBsetDevicePixelRatio\fP or \fBclear\fP\&.
.PP
This method may return 0, if a painter couldn't be activated on the buffer\&. This usually indicates a problem with the respective painting backend\&. 
.PP
Implemented in \fBQCPPaintBufferPixmap\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "double QCPAbstractPaintBuffer::mDevicePixelRatio\fC [protected]\fP"

.PP
Definition at line \fB540\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPAbstractPaintBuffer::mInvalidated\fC [protected]\fP"

.PP
Definition at line \fB543\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QSize QCPAbstractPaintBuffer::mSize\fC [protected]\fP"

.PP
Definition at line \fB539\fP of file \fBqcustomplot\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OmronPID from the source code\&.
