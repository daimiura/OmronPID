.TH "QCPAbstractPlottable1D< DataType >" 3 "Wed Mar 15 2023" "OmronPID" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPAbstractPlottable1D< DataType > \- A template base class for plottables with one-dimensional data\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qcustomplot\&.h>\fP
.PP
Inherits \fBQCPAbstractPlottable\fP, and \fBQCPPlottableInterface1D\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPAbstractPlottable1D\fP (\fBQCPAxis\fP *keyAxis, \fBQCPAxis\fP *valueAxis)"
.br
.ti -1c
.RI "virtual int \fBdataCount\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual double \fBdataMainKey\fP (int index) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual double \fBdataSortKey\fP (int index) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual double \fBdataMainValue\fP (int index) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBdataValueRange\fP (int index) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual QPointF \fBdataPixelPosition\fP (int index) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual bool \fBsortKeyIsMainKey\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCPDataSelection\fP \fBselectTestRect\fP (const QRectF &rect, bool onlySelectable) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual int \fBfindBegin\fP (double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual int \fBfindEnd\fP (double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCPPlottableInterface1D\fP * \fBinterface1D\fP () Q_DECL_OVERRIDE"
.br
.in -1c

Public Member Functions inherited from \fBQCPAbstractPlottable\fP
.in +1c
.ti -1c
.RI "\fBQCPAbstractPlottable\fP (\fBQCPAxis\fP *keyAxis, \fBQCPAxis\fP *valueAxis)"
.br
.ti -1c
.RI "QString \fBname\fP () const"
.br
.ti -1c
.RI "bool \fBantialiasedFill\fP () const"
.br
.ti -1c
.RI "bool \fBantialiasedScatters\fP () const"
.br
.ti -1c
.RI "QPen \fBpen\fP () const"
.br
.ti -1c
.RI "QBrush \fBbrush\fP () const"
.br
.ti -1c
.RI "\fBQCPAxis\fP * \fBkeyAxis\fP () const"
.br
.ti -1c
.RI "\fBQCPAxis\fP * \fBvalueAxis\fP () const"
.br
.ti -1c
.RI "\fBQCP::SelectionType\fP \fBselectable\fP () const"
.br
.ti -1c
.RI "bool \fBselected\fP () const"
.br
.ti -1c
.RI "\fBQCPDataSelection\fP \fBselection\fP () const"
.br
.ti -1c
.RI "\fBQCPSelectionDecorator\fP * \fBselectionDecorator\fP () const"
.br
.ti -1c
.RI "void \fBsetName\fP (const QString &name)"
.br
.ti -1c
.RI "void \fBsetAntialiasedFill\fP (bool enabled)"
.br
.ti -1c
.RI "void \fBsetAntialiasedScatters\fP (bool enabled)"
.br
.ti -1c
.RI "void \fBsetPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetBrush\fP (const QBrush &brush)"
.br
.ti -1c
.RI "void \fBsetKeyAxis\fP (\fBQCPAxis\fP *axis)"
.br
.ti -1c
.RI "void \fBsetValueAxis\fP (\fBQCPAxis\fP *axis)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetSelectable\fP (\fBQCP::SelectionType\fP selectable)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetSelection\fP (\fBQCPDataSelection\fP \fBselection\fP)"
.br
.ti -1c
.RI "void \fBsetSelectionDecorator\fP (\fBQCPSelectionDecorator\fP *decorator)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const =0"
.br
.ti -1c
.RI "virtual \fBQCPPlottableInterface1D\fP * \fBinterface1D\fP ()"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBgetKeyRange\fP (bool &foundRange, \fBQCP::SignDomain\fP inSignDomain=\fBQCP::sdBoth\fP) const =0"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBgetValueRange\fP (bool &foundRange, \fBQCP::SignDomain\fP inSignDomain=\fBQCP::sdBoth\fP, const \fBQCPRange\fP &inKeyRange=\fBQCPRange\fP()) const =0"
.br
.ti -1c
.RI "void \fBcoordsToPixels\fP (double key, double value, double &x, double &y) const"
.br
.ti -1c
.RI "const QPointF \fBcoordsToPixels\fP (double key, double value) const"
.br
.ti -1c
.RI "void \fBpixelsToCoords\fP (double x, double y, double &key, double &value) const"
.br
.ti -1c
.RI "void \fBpixelsToCoords\fP (const QPointF &pixelPos, double &key, double &value) const"
.br
.ti -1c
.RI "void \fBrescaleAxes\fP (bool onlyEnlarge=false) const"
.br
.ti -1c
.RI "void \fBrescaleKeyAxis\fP (bool onlyEnlarge=false) const"
.br
.ti -1c
.RI "void \fBrescaleValueAxis\fP (bool onlyEnlarge=false, bool inKeyRange=false) const"
.br
.ti -1c
.RI "bool \fBaddToLegend\fP (\fBQCPLegend\fP *legend)"
.br
.ti -1c
.RI "bool \fBaddToLegend\fP ()"
.br
.ti -1c
.RI "bool \fBremoveFromLegend\fP (\fBQCPLegend\fP *legend) const"
.br
.ti -1c
.RI "bool \fBremoveFromLegend\fP () const"
.br
.in -1c

Public Member Functions inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "\fBQCPLayerable\fP (\fBQCustomPlot\fP *plot, QString targetLayer=QString(), \fBQCPLayerable\fP *\fBparentLayerable\fP=0)"
.br
.ti -1c
.RI "bool \fBvisible\fP () const"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBparentPlot\fP () const"
.br
.ti -1c
.RI "\fBQCPLayerable\fP * \fBparentLayerable\fP () const"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBlayer\fP () const"
.br
.ti -1c
.RI "bool \fBantialiased\fP () const"
.br
.ti -1c
.RI "void \fBsetVisible\fP (bool on)"
.br
.ti -1c
.RI "Q_SLOT bool \fBsetLayer\fP (\fBQCPLayer\fP *layer)"
.br
.ti -1c
.RI "bool \fBsetLayer\fP (const QString &layerName)"
.br
.ti -1c
.RI "void \fBsetAntialiased\fP (bool enabled)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const"
.br
.ti -1c
.RI "bool \fBrealVisibility\fP () const"
.br
.in -1c
.in +1c
.ti -1c
.RI "virtual int \fBdataCount\fP () const =0"
.br
.ti -1c
.RI "virtual double \fBdataMainKey\fP (int index) const =0"
.br
.ti -1c
.RI "virtual double \fBdataSortKey\fP (int index) const =0"
.br
.ti -1c
.RI "virtual double \fBdataMainValue\fP (int index) const =0"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBdataValueRange\fP (int index) const =0"
.br
.ti -1c
.RI "virtual QPointF \fBdataPixelPosition\fP (int index) const =0"
.br
.ti -1c
.RI "virtual bool \fBsortKeyIsMainKey\fP () const =0"
.br
.ti -1c
.RI "virtual \fBQCPDataSelection\fP \fBselectTestRect\fP (const QRectF &rect, bool onlySelectable) const =0"
.br
.ti -1c
.RI "virtual int \fBfindBegin\fP (double sortKey, bool expandedRange=true) const =0"
.br
.ti -1c
.RI "virtual int \fBfindEnd\fP (double sortKey, bool expandedRange=true) const =0"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBgetDataSegments\fP (QList< \fBQCPDataRange\fP > &selectedSegments, QList< \fBQCPDataRange\fP > &unselectedSegments) const"
.br
.ti -1c
.RI "void \fBdrawPolyline\fP (\fBQCPPainter\fP *painter, const QVector< QPointF > &lineData) const"
.br
.in -1c

Protected Member Functions inherited from \fBQCPAbstractPlottable\fP
.in +1c
.ti -1c
.RI "virtual QRect \fBclipRect\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter) Q_DECL_OVERRIDE=0"
.br
.ti -1c
.RI "virtual \fBQCP::Interaction\fP \fBselectionCategory\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBselectEvent\fP (QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdeselectEvent\fP (bool *selectionStateChanged) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdrawLegendIcon\fP (\fBQCPPainter\fP *painter, const QRectF &rect) const =0"
.br
.ti -1c
.RI "void \fBapplyFillAntialiasingHint\fP (\fBQCPPainter\fP *painter) const"
.br
.ti -1c
.RI "void \fBapplyScattersAntialiasingHint\fP (\fBQCPPainter\fP *painter) const"
.br
.in -1c

Protected Member Functions inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "virtual void \fBparentPlotInitialized\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "virtual \fBQCP::Interaction\fP \fBselectionCategory\fP () const"
.br
.ti -1c
.RI "virtual QRect \fBclipRect\fP () const"
.br
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const =0"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter)=0"
.br
.ti -1c
.RI "virtual void \fBselectEvent\fP (QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBdeselectEvent\fP (bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBmousePressEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBmouseMoveEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseReleaseEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseDoubleClickEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBwheelEvent\fP (QWheelEvent *event)"
.br
.ti -1c
.RI "void \fBinitializeParentPlot\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "void \fBsetParentLayerable\fP (\fBQCPLayerable\fP *\fBparentLayerable\fP)"
.br
.ti -1c
.RI "bool \fBmoveToLayer\fP (\fBQCPLayer\fP *layer, bool prepend)"
.br
.ti -1c
.RI "void \fBapplyAntialiasingHint\fP (\fBQCPPainter\fP *painter, bool localAntialiased, \fBQCP::AntialiasedElement\fP overrideElement) const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "QSharedPointer< \fBQCPDataContainer\fP< DataType > > \fBmDataContainer\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPAbstractPlottable\fP
.in +1c
.ti -1c
.RI "QString \fBmName\fP"
.br
.ti -1c
.RI "bool \fBmAntialiasedFill\fP"
.br
.ti -1c
.RI "bool \fBmAntialiasedScatters\fP"
.br
.ti -1c
.RI "QPen \fBmPen\fP"
.br
.ti -1c
.RI "QBrush \fBmBrush\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPAxis\fP > \fBmKeyAxis\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPAxis\fP > \fBmValueAxis\fP"
.br
.ti -1c
.RI "\fBQCP::SelectionType\fP \fBmSelectable\fP"
.br
.ti -1c
.RI "\fBQCPDataSelection\fP \fBmSelection\fP"
.br
.ti -1c
.RI "\fBQCPSelectionDecorator\fP * \fBmSelectionDecorator\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "bool \fBmVisible\fP"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBmParentPlot\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPLayerable\fP > \fBmParentLayerable\fP"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBmLayer\fP"
.br
.ti -1c
.RI "bool \fBmAntialiased\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Signals inherited from \fBQCPAbstractPlottable\fP
.in +1c
.ti -1c
.RI "void \fBselectionChanged\fP (bool \fBselected\fP)"
.br
.ti -1c
.RI "void \fBselectionChanged\fP (const \fBQCPDataSelection\fP &\fBselection\fP)"
.br
.ti -1c
.RI "void \fBselectableChanged\fP (\fBQCP::SelectionType\fP selectable)"
.br
.in -1c

Signals inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "void \fBlayerChanged\fP (\fBQCPLayer\fP *newLayer)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class DataType>
.br
class QCPAbstractPlottable1D< DataType >"A template base class for plottables with one-dimensional data\&. 

This template class derives from \fBQCPAbstractPlottable\fP and from the abstract interface \fBQCPPlottableInterface1D\fP\&. It serves as a base class for all one-dimensional data (i\&.e\&. data with one key dimension), such as \fBQCPGraph\fP and \fBQCPCurve\fP\&.
.PP
The template parameter \fIDataType\fP is the type of the data points of this plottable (e\&.g\&. \fBQCPGraphData\fP or \fBQCPCurveData\fP)\&. The main purpose of this base class is to provide the member \fImDataContainer\fP (a shared pointer to a \fBQCPDataContainer<DataType>\fP) and implement the according virtual methods of the \fBQCPPlottableInterface1D\fP, such that most subclassed plottables don't need to worry about this anymore\&.
.PP
Further, it provides a convenience method for retrieving selected/unselected data segments via \fBgetDataSegments\fP\&. This is useful when subclasses implement their \fBdraw\fP method and need to draw selected segments with a different pen/brush than unselected segments (also see \fBQCPSelectionDecorator\fP)\&.
.PP
This class implements basic functionality of \fBQCPAbstractPlottable::selectTest\fP and \fBQCPPlottableInterface1D::selectTestRect\fP, assuming point-like data points, based on the 1D data interface\&. In spite of that, most plottable subclasses will want to reimplement those methods again, to provide a more accurate hit test based on their specific data visualization geometry\&. 
.PP
Definition at line \fB3868\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class DataType > \fBQCPAbstractPlottable1D\fP< DataType >\fB::QCPAbstractPlottable1D\fP (\fBQCPAxis\fP * keyAxis, \fBQCPAxis\fP * valueAxis)"
Forwards \fIkeyAxis\fP and \fIvalueAxis\fP to the \fBQCPAbstractPlottable\fP constructor and allocates the \fImDataContainer\fP\&. 
.PP
Definition at line \fB4096\fP of file \fBqcustomplot\&.h\fP\&.
.SS "template<class DataType > \fBQCPAbstractPlottable1D\fP< DataType >::~\fBQCPAbstractPlottable1D\fP\fC [virtual]\fP"

.PP
Definition at line \fB4103\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "template<class DataType > int \fBQCPAbstractPlottable1D\fP< DataType >::dataCount\fC [virtual]\fP"

.PP
Returns the number of data points of the plottable\&.   
.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB4111\fP of file \fBqcustomplot\&.h\fP\&.
.SS "template<class DataType > double \fBQCPAbstractPlottable1D\fP< DataType >::dataMainKey (int index) const\fC [virtual]\fP"

.PP
Returns the main key of the data point at the given \fIindex\fP\&.
.PP
What the main key is, is defined by the plottable's data type\&. See the \fBQCPDataContainer DataType\fP documentation for details about this naming convention\&.   
.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB4120\fP of file \fBqcustomplot\&.h\fP\&.
.SS "template<class DataType > double \fBQCPAbstractPlottable1D\fP< DataType >::dataMainValue (int index) const\fC [virtual]\fP"

.PP
Returns the main value of the data point at the given \fIindex\fP\&.
.PP
What the main value is, is defined by the plottable's data type\&. See the \fBQCPDataContainer DataType\fP documentation for details about this naming convention\&.   
.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB4152\fP of file \fBqcustomplot\&.h\fP\&.
.SS "template<class DataType > QPointF \fBQCPAbstractPlottable1D\fP< DataType >::dataPixelPosition (int index) const\fC [virtual]\fP"

.PP
Returns the pixel position on the widget surface at which the data point at the given \fIindex\fP appears\&.
.PP
Usually this corresponds to the point of \fBdataMainKey/\fP dataMainValue, in pixel coordinates\&. However, depending on the plottable, this might be a different apparent position than just a coord-to-pixel transform of those values\&. For example, \fBQCPBars\fP apparent data values can be shifted depending on their stacking, bar grouping or configured base value\&.   
.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Reimplemented in \fBQCPBars\fP\&.
.PP
Definition at line \fB4184\fP of file \fBqcustomplot\&.h\fP\&.
.SS "template<class DataType > double \fBQCPAbstractPlottable1D\fP< DataType >::dataSortKey (int index) const\fC [virtual]\fP"

.PP
Returns the sort key of the data point at the given \fIindex\fP\&.
.PP
What the sort key is, is defined by the plottable's data type\&. See the \fBQCPDataContainer DataType\fP documentation for details about this naming convention\&.   
.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB4136\fP of file \fBqcustomplot\&.h\fP\&.
.SS "template<class DataType > \fBQCPRange\fP \fBQCPAbstractPlottable1D\fP< DataType >::dataValueRange (int index) const\fC [virtual]\fP"

.PP
Returns the value range of the data point at the given \fIindex\fP\&.
.PP
What the value range is, is defined by the plottable's data type\&. See the \fBQCPDataContainer DataType\fP documentation for details about this naming convention\&.   
.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB4168\fP of file \fBqcustomplot\&.h\fP\&.
.SS "template<class DataType > void \fBQCPAbstractPlottable1D\fP< DataType >::drawPolyline (\fBQCPPainter\fP * painter, const QVector< QPointF > & lineData) const\fC [protected]\fP"
A helper method which draws a line with the passed \fIpainter\fP, according to the pixel data in \fIlineData\fP\&. NaN points create gaps in the line, as expected from \fBQCustomPlot\fP's plottables (this is the main difference to QPainter's regular drawPolyline, which handles NaNs by lagging or crashing)\&.
.PP
Further it uses a faster line drawing technique based on \fBQCPPainter::drawLine\fP rather than \fCQPainter::drawPolyline\fP if the configured \fBQCustomPlot::setPlottingHints()\fP and \fIpainter\fP style allows\&. 
.PP
Definition at line \fB4377\fP of file \fBqcustomplot\&.h\fP\&.
.SS "template<class DataType > int \fBQCPAbstractPlottable1D\fP< DataType >::findBegin (double sortKey, bool expandedRange = \fCtrue\fP) const\fC [virtual]\fP"

.PP
Returns the index of the data point with a (sort-)key that is equal to, just below, or just above \fIsortKey\fP\&. If \fIexpandedRange\fP is true, the data point just below \fIsortKey\fP will be considered, otherwise the one just above\&.
.PP
This can be used in conjunction with \fBfindEnd\fP to iterate over data points within a given key range, including or excluding the bounding data points that are just beyond the specified range\&.
.PP
If \fIexpandedRange\fP is true but there are no data points below \fIsortKey\fP, 0 is returned\&.
.PP
If the container is empty, returns 0 (in that case, \fBfindEnd\fP will also return 0, so a loop using these methods will not iterate over the index 0)\&.
.PP
\fBSee also\fP
.RS 4
\fBfindEnd\fP, \fBQCPDataContainer::findBegin\fP   
.RE
.PP

.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB4263\fP of file \fBqcustomplot\&.h\fP\&.
.SS "template<class DataType > int \fBQCPAbstractPlottable1D\fP< DataType >::findEnd (double sortKey, bool expandedRange = \fCtrue\fP) const\fC [virtual]\fP"

.PP
Returns the index one after the data point with a (sort-)key that is equal to, just above, or just below \fIsortKey\fP\&. If \fIexpandedRange\fP is true, the data point just above \fIsortKey\fP will be considered, otherwise the one just below\&.
.PP
This can be used in conjunction with \fBfindBegin\fP to iterate over data points within a given key range, including the bounding data points that are just below and above the specified range\&.
.PP
If \fIexpandedRange\fP is true but there are no data points above \fIsortKey\fP, the index just above the highest data point is returned\&.
.PP
If the container is empty, returns 0\&.
.PP
\fBSee also\fP
.RS 4
\fBfindBegin\fP, \fBQCPDataContainer::findEnd\fP   
.RE
.PP

.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB4272\fP of file \fBqcustomplot\&.h\fP\&.
.SS "template<class DataType > void \fBQCPAbstractPlottable1D\fP< DataType >::getDataSegments (QList< \fBQCPDataRange\fP > & selectedSegments, QList< \fBQCPDataRange\fP > & unselectedSegments) const\fC [protected]\fP"
Splits all data into selected and unselected segments and outputs them via \fIselectedSegments\fP and \fIunselectedSegments\fP, respectively\&.
.PP
This is useful when subclasses implement their \fBdraw\fP method and need to draw selected segments with a different pen/brush than unselected segments (also see \fBQCPSelectionDecorator\fP)\&.
.PP
\fBSee also\fP
.RS 4
\fBsetSelection\fP 
.RE
.PP

.PP
Definition at line \fB4347\fP of file \fBqcustomplot\&.h\fP\&.
.SS "template<class DataType > \fBQCPPlottableInterface1D\fP * \fBQCPAbstractPlottable1D\fP< DataType >::interface1D ()\fC [inline]\fP, \fC [virtual]\fP"
Returns a \fBQCPPlottableInterface1D\fP pointer to this plottable, providing access to its 1D interface\&.
.PP
\\seebaseclassmethod 
.PP
Reimplemented from \fBQCPAbstractPlottable\fP\&.
.PP
Definition at line \fB3890\fP of file \fBqcustomplot\&.h\fP\&.
.SS "template<class DataType > double \fBQCPAbstractPlottable1D\fP< DataType >::selectTest (const QPointF & pos, bool onlySelectable, QVariant * details = \fC0\fP) const\fC [virtual]\fP"
Implements a point-selection algorithm assuming the data (accessed via the 1D data interface) is point-like\&. Most subclasses will want to reimplement this method again, to provide a more accurate hit test based on the true data visualization geometry\&.
.PP
\\seebaseclassmethod 
.PP
Implements \fBQCPAbstractPlottable\fP\&.
.PP
Reimplemented in \fBQCPGraph\fP, \fBQCPCurve\fP, \fBQCPBars\fP, \fBQCPStatisticalBox\fP, and \fBQCPFinancial\fP\&.
.PP
Definition at line \fB4285\fP of file \fBqcustomplot\&.h\fP\&.
.SS "template<class DataType > \fBQCPDataSelection\fP \fBQCPAbstractPlottable1D\fP< DataType >::selectTestRect (const QRectF & rect, bool onlySelectable) const\fC [virtual]\fP"
Implements a rect-selection algorithm assuming the data (accessed via the 1D data interface) is point-like\&. Most subclasses will want to reimplement this method again, to provide a more accurate hit test based on the true data visualization geometry\&.
.PP
\\seebaseclassmethod 
.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Reimplemented in \fBQCPBars\fP, \fBQCPStatisticalBox\fP, and \fBQCPFinancial\fP\&.
.PP
Definition at line \fB4214\fP of file \fBqcustomplot\&.h\fP\&.
.SS "template<class DataType > bool \fBQCPAbstractPlottable1D\fP< DataType >::sortKeyIsMainKey\fC [virtual]\fP"

.PP
Returns whether the sort key (\fBdataSortKey\fP) is identical to the main key (\fBdataMainKey\fP)\&.
.PP
What the sort and main keys are, is defined by the plottable's data type\&. See the \fBQCPDataContainer DataType\fP documentation for details about this naming convention\&.   
.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB4201\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "template<class DataType > QSharedPointer<\fBQCPDataContainer\fP<DataType> > \fBQCPAbstractPlottable1D\fP< DataType >::mDataContainer\fC [protected]\fP"

.PP
Definition at line \fB3894\fP of file \fBqcustomplot\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OmronPID from the source code\&.
