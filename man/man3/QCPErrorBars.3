.TH "QCPErrorBars" 3 "Wed Mar 15 2023" "OmronPID" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPErrorBars \- A plottable that adds a set of error bars to other plottables\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBQCPAbstractPlottable\fP, and \fBQCPPlottableInterface1D\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBErrorType\fP { \fBetKeyError\fP, \fBetValueError\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPErrorBars\fP (\fBQCPAxis\fP *keyAxis, \fBQCPAxis\fP *valueAxis)"
.br
.ti -1c
.RI "QSharedPointer< QCPErrorBarsDataContainer > \fBdata\fP () const"
.br
.ti -1c
.RI "\fBQCPAbstractPlottable\fP * \fBdataPlottable\fP () const"
.br
.ti -1c
.RI "\fBErrorType\fP \fBerrorType\fP () const"
.br
.ti -1c
.RI "double \fBwhiskerWidth\fP () const"
.br
.ti -1c
.RI "double \fBsymbolGap\fP () const"
.br
.ti -1c
.RI "void \fBsetData\fP (QSharedPointer< QCPErrorBarsDataContainer > \fBdata\fP)"
.br
.ti -1c
.RI "void \fBsetData\fP (const QVector< double > &error)"
.br
.ti -1c
.RI "void \fBsetData\fP (const QVector< double > &errorMinus, const QVector< double > &errorPlus)"
.br
.ti -1c
.RI "void \fBsetDataPlottable\fP (\fBQCPAbstractPlottable\fP *plottable)"
.br
.ti -1c
.RI "void \fBsetErrorType\fP (\fBErrorType\fP type)"
.br
.ti -1c
.RI "void \fBsetWhiskerWidth\fP (double pixels)"
.br
.ti -1c
.RI "void \fBsetSymbolGap\fP (double pixels)"
.br
.ti -1c
.RI "void \fBaddData\fP (const QVector< double > &error)"
.br
.ti -1c
.RI "void \fBaddData\fP (const QVector< double > &errorMinus, const QVector< double > &errorPlus)"
.br
.ti -1c
.RI "void \fBaddData\fP (double error)"
.br
.ti -1c
.RI "void \fBaddData\fP (double errorMinus, double errorPlus)"
.br
.ti -1c
.RI "virtual int \fBdataCount\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual double \fBdataMainKey\fP (int index) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual double \fBdataSortKey\fP (int index) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual double \fBdataMainValue\fP (int index) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBdataValueRange\fP (int index) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual QPointF \fBdataPixelPosition\fP (int index) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual bool \fBsortKeyIsMainKey\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCPDataSelection\fP \fBselectTestRect\fP (const QRectF &rect, bool onlySelectable) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual int \fBfindBegin\fP (double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual int \fBfindEnd\fP (double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCPPlottableInterface1D\fP * \fBinterface1D\fP () Q_DECL_OVERRIDE"
.br
.in -1c

Public Member Functions inherited from \fBQCPAbstractPlottable\fP
.in +1c
.ti -1c
.RI "\fBQCPAbstractPlottable\fP (\fBQCPAxis\fP *keyAxis, \fBQCPAxis\fP *valueAxis)"
.br
.ti -1c
.RI "QString \fBname\fP () const"
.br
.ti -1c
.RI "bool \fBantialiasedFill\fP () const"
.br
.ti -1c
.RI "bool \fBantialiasedScatters\fP () const"
.br
.ti -1c
.RI "QPen \fBpen\fP () const"
.br
.ti -1c
.RI "QBrush \fBbrush\fP () const"
.br
.ti -1c
.RI "\fBQCPAxis\fP * \fBkeyAxis\fP () const"
.br
.ti -1c
.RI "\fBQCPAxis\fP * \fBvalueAxis\fP () const"
.br
.ti -1c
.RI "\fBQCP::SelectionType\fP \fBselectable\fP () const"
.br
.ti -1c
.RI "bool \fBselected\fP () const"
.br
.ti -1c
.RI "\fBQCPDataSelection\fP \fBselection\fP () const"
.br
.ti -1c
.RI "\fBQCPSelectionDecorator\fP * \fBselectionDecorator\fP () const"
.br
.ti -1c
.RI "void \fBsetName\fP (const QString &name)"
.br
.ti -1c
.RI "void \fBsetAntialiasedFill\fP (bool enabled)"
.br
.ti -1c
.RI "void \fBsetAntialiasedScatters\fP (bool enabled)"
.br
.ti -1c
.RI "void \fBsetPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetBrush\fP (const QBrush &brush)"
.br
.ti -1c
.RI "void \fBsetKeyAxis\fP (\fBQCPAxis\fP *axis)"
.br
.ti -1c
.RI "void \fBsetValueAxis\fP (\fBQCPAxis\fP *axis)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetSelectable\fP (\fBQCP::SelectionType\fP selectable)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetSelection\fP (\fBQCPDataSelection\fP \fBselection\fP)"
.br
.ti -1c
.RI "void \fBsetSelectionDecorator\fP (\fBQCPSelectionDecorator\fP *decorator)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const =0"
.br
.ti -1c
.RI "virtual \fBQCPPlottableInterface1D\fP * \fBinterface1D\fP ()"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBgetKeyRange\fP (bool &foundRange, \fBQCP::SignDomain\fP inSignDomain=\fBQCP::sdBoth\fP) const =0"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBgetValueRange\fP (bool &foundRange, \fBQCP::SignDomain\fP inSignDomain=\fBQCP::sdBoth\fP, const \fBQCPRange\fP &inKeyRange=\fBQCPRange\fP()) const =0"
.br
.ti -1c
.RI "void \fBcoordsToPixels\fP (double key, double value, double &x, double &y) const"
.br
.ti -1c
.RI "const QPointF \fBcoordsToPixels\fP (double key, double value) const"
.br
.ti -1c
.RI "void \fBpixelsToCoords\fP (double x, double y, double &key, double &value) const"
.br
.ti -1c
.RI "void \fBpixelsToCoords\fP (const QPointF &pixelPos, double &key, double &value) const"
.br
.ti -1c
.RI "void \fBrescaleAxes\fP (bool onlyEnlarge=false) const"
.br
.ti -1c
.RI "void \fBrescaleKeyAxis\fP (bool onlyEnlarge=false) const"
.br
.ti -1c
.RI "void \fBrescaleValueAxis\fP (bool onlyEnlarge=false, bool inKeyRange=false) const"
.br
.ti -1c
.RI "bool \fBaddToLegend\fP (\fBQCPLegend\fP *legend)"
.br
.ti -1c
.RI "bool \fBaddToLegend\fP ()"
.br
.ti -1c
.RI "bool \fBremoveFromLegend\fP (\fBQCPLegend\fP *legend) const"
.br
.ti -1c
.RI "bool \fBremoveFromLegend\fP () const"
.br
.in -1c

Public Member Functions inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "\fBQCPLayerable\fP (\fBQCustomPlot\fP *plot, QString targetLayer=QString(), \fBQCPLayerable\fP *\fBparentLayerable\fP=0)"
.br
.ti -1c
.RI "bool \fBvisible\fP () const"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBparentPlot\fP () const"
.br
.ti -1c
.RI "\fBQCPLayerable\fP * \fBparentLayerable\fP () const"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBlayer\fP () const"
.br
.ti -1c
.RI "bool \fBantialiased\fP () const"
.br
.ti -1c
.RI "void \fBsetVisible\fP (bool on)"
.br
.ti -1c
.RI "Q_SLOT bool \fBsetLayer\fP (\fBQCPLayer\fP *layer)"
.br
.ti -1c
.RI "bool \fBsetLayer\fP (const QString &layerName)"
.br
.ti -1c
.RI "void \fBsetAntialiased\fP (bool enabled)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const"
.br
.ti -1c
.RI "bool \fBrealVisibility\fP () const"
.br
.in -1c
.in +1c
.ti -1c
.RI "virtual int \fBdataCount\fP () const =0"
.br
.ti -1c
.RI "virtual double \fBdataMainKey\fP (int index) const =0"
.br
.ti -1c
.RI "virtual double \fBdataSortKey\fP (int index) const =0"
.br
.ti -1c
.RI "virtual double \fBdataMainValue\fP (int index) const =0"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBdataValueRange\fP (int index) const =0"
.br
.ti -1c
.RI "virtual QPointF \fBdataPixelPosition\fP (int index) const =0"
.br
.ti -1c
.RI "virtual bool \fBsortKeyIsMainKey\fP () const =0"
.br
.ti -1c
.RI "virtual \fBQCPDataSelection\fP \fBselectTestRect\fP (const QRectF &rect, bool onlySelectable) const =0"
.br
.ti -1c
.RI "virtual int \fBfindBegin\fP (double sortKey, bool expandedRange=true) const =0"
.br
.ti -1c
.RI "virtual int \fBfindEnd\fP (double sortKey, bool expandedRange=true) const =0"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdrawLegendIcon\fP (\fBQCPPainter\fP *painter, const QRectF &rect) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBgetKeyRange\fP (bool &foundRange, \fBQCP::SignDomain\fP inSignDomain=\fBQCP::sdBoth\fP) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBgetValueRange\fP (bool &foundRange, \fBQCP::SignDomain\fP inSignDomain=\fBQCP::sdBoth\fP, const \fBQCPRange\fP &inKeyRange=\fBQCPRange\fP()) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "void \fBgetErrorBarLines\fP (QCPErrorBarsDataContainer::const_iterator it, QVector< QLineF > &backbones, QVector< QLineF > &whiskers) const"
.br
.ti -1c
.RI "void \fBgetVisibleDataBounds\fP (QCPErrorBarsDataContainer::const_iterator &begin, QCPErrorBarsDataContainer::const_iterator &end, const \fBQCPDataRange\fP &rangeRestriction) const"
.br
.ti -1c
.RI "double \fBpointDistance\fP (const QPointF &pixelPoint, QCPErrorBarsDataContainer::const_iterator &closestData) const"
.br
.ti -1c
.RI "void \fBgetDataSegments\fP (QList< \fBQCPDataRange\fP > &selectedSegments, QList< \fBQCPDataRange\fP > &unselectedSegments) const"
.br
.ti -1c
.RI "bool \fBerrorBarVisible\fP (int index) const"
.br
.ti -1c
.RI "bool \fBrectIntersectsLine\fP (const QRectF &pixelRect, const QLineF &line) const"
.br
.in -1c

Protected Member Functions inherited from \fBQCPAbstractPlottable\fP
.in +1c
.ti -1c
.RI "virtual QRect \fBclipRect\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter) Q_DECL_OVERRIDE=0"
.br
.ti -1c
.RI "virtual \fBQCP::Interaction\fP \fBselectionCategory\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBselectEvent\fP (QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdeselectEvent\fP (bool *selectionStateChanged) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdrawLegendIcon\fP (\fBQCPPainter\fP *painter, const QRectF &rect) const =0"
.br
.ti -1c
.RI "void \fBapplyFillAntialiasingHint\fP (\fBQCPPainter\fP *painter) const"
.br
.ti -1c
.RI "void \fBapplyScattersAntialiasingHint\fP (\fBQCPPainter\fP *painter) const"
.br
.in -1c

Protected Member Functions inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "virtual void \fBparentPlotInitialized\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "virtual \fBQCP::Interaction\fP \fBselectionCategory\fP () const"
.br
.ti -1c
.RI "virtual QRect \fBclipRect\fP () const"
.br
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const =0"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter)=0"
.br
.ti -1c
.RI "virtual void \fBselectEvent\fP (QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBdeselectEvent\fP (bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBmousePressEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBmouseMoveEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseReleaseEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseDoubleClickEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBwheelEvent\fP (QWheelEvent *event)"
.br
.ti -1c
.RI "void \fBinitializeParentPlot\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "void \fBsetParentLayerable\fP (\fBQCPLayerable\fP *\fBparentLayerable\fP)"
.br
.ti -1c
.RI "bool \fBmoveToLayer\fP (\fBQCPLayer\fP *layer, bool prepend)"
.br
.ti -1c
.RI "void \fBapplyAntialiasingHint\fP (\fBQCPPainter\fP *painter, bool localAntialiased, \fBQCP::AntialiasedElement\fP overrideElement) const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "QSharedPointer< QCPErrorBarsDataContainer > \fBmDataContainer\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPAbstractPlottable\fP > \fBmDataPlottable\fP"
.br
.ti -1c
.RI "\fBErrorType\fP \fBmErrorType\fP"
.br
.ti -1c
.RI "double \fBmWhiskerWidth\fP"
.br
.ti -1c
.RI "double \fBmSymbolGap\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPAbstractPlottable\fP
.in +1c
.ti -1c
.RI "QString \fBmName\fP"
.br
.ti -1c
.RI "bool \fBmAntialiasedFill\fP"
.br
.ti -1c
.RI "bool \fBmAntialiasedScatters\fP"
.br
.ti -1c
.RI "QPen \fBmPen\fP"
.br
.ti -1c
.RI "QBrush \fBmBrush\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPAxis\fP > \fBmKeyAxis\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPAxis\fP > \fBmValueAxis\fP"
.br
.ti -1c
.RI "\fBQCP::SelectionType\fP \fBmSelectable\fP"
.br
.ti -1c
.RI "\fBQCPDataSelection\fP \fBmSelection\fP"
.br
.ti -1c
.RI "\fBQCPSelectionDecorator\fP * \fBmSelectionDecorator\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "bool \fBmVisible\fP"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBmParentPlot\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPLayerable\fP > \fBmParentLayerable\fP"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBmLayer\fP"
.br
.ti -1c
.RI "bool \fBmAntialiased\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBQCustomPlot\fP"
.br
.ti -1c
.RI "class \fBQCPLegend\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Signals inherited from \fBQCPAbstractPlottable\fP
.in +1c
.ti -1c
.RI "void \fBselectionChanged\fP (bool \fBselected\fP)"
.br
.ti -1c
.RI "void \fBselectionChanged\fP (const \fBQCPDataSelection\fP &\fBselection\fP)"
.br
.ti -1c
.RI "void \fBselectableChanged\fP (\fBQCP::SelectionType\fP selectable)"
.br
.in -1c

Signals inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "void \fBlayerChanged\fP (\fBQCPLayer\fP *newLayer)"
.br
.in -1c
.SH "Detailed Description"
.PP 
A plottable that adds a set of error bars to other plottables\&. 


.PP
The \fBQCPErrorBars\fP plottable can be attached to other one-dimensional plottables (e\&.g\&. \fBQCPGraph\fP, \fBQCPCurve\fP, \fBQCPBars\fP, etc\&.) and equips them with error bars\&.
.PP
Use \fBsetDataPlottable\fP to define for which plottable the \fBQCPErrorBars\fP shall display the error bars\&. The orientation of the error bars can be controlled with \fBsetErrorType\fP\&.
.PP
By using \fBsetData\fP, you can supply the actual error data, either as symmetric error or plus/minus asymmetric errors\&. \fBQCPErrorBars\fP only stores the error data\&. The absolute key/value position of each error bar will be adopted from the configured data plottable\&. The error data of the \fBQCPErrorBars\fP are associated one-to-one via their index to the data points of the data plottable\&. You can directly access and manipulate the error bar data via \fBdata\fP\&.
.PP
Set either of the plus/minus errors to NaN (\fCqQNaN()\fP or \fCstd::numeric_limits<double>::quiet_NaN()\fP) to not show the respective error bar on the data point at that index\&.
.SH "Changing the appearance"
.PP
The appearance of the error bars is defined by the pen (\fBsetPen\fP), and the width of the whiskers (\fBsetWhiskerWidth\fP)\&. Further, the error bar backbones may leave a gap around the data point center to prevent that error bars are drawn too close to or even through scatter points\&. This gap size can be controlled via \fBsetSymbolGap\fP\&. 
.PP
Definition at line \fB5984\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQCPErrorBars::ErrorType\fP"
Defines in which orientation the error bars shall appear\&. If your data needs both error dimensions, create two \fBQCPErrorBars\fP with different \fBErrorType\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBsetErrorType\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIetKeyError \fP\fP
The errors are for the key dimension (bars appear parallel to the key axis) 
.TP
\fB\fIetValueError \fP\fP
The errors are for the value dimension (bars appear parallel to the value axis) 
.PP
Definition at line \fB6002\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPErrorBars::QCPErrorBars (\fBQCPAxis\fP * keyAxis, \fBQCPAxis\fP * valueAxis)\fC [explicit]\fP"
Constructs an error bars plottable which uses \fIkeyAxis\fP as its key axis ('x') and \fIvalueAxis\fP as its value axis ('y')\&. \fIkeyAxis\fP and \fIvalueAxis\fP must reside in the same \fBQCustomPlot\fP instance and not have the same orientation\&. If either of these restrictions is violated, a corresponding message is printed to the debug output (qDebug), the construction is not aborted, though\&.
.PP
It is also important that the \fIkeyAxis\fP and \fIvalueAxis\fP are the same for the error bars plottable and the data plottable that the error bars shall be drawn on (\fBsetDataPlottable\fP)\&.
.PP
The created \fBQCPErrorBars\fP is automatically registered with the \fBQCustomPlot\fP instance inferred from \fIkeyAxis\fP\&. This \fBQCustomPlot\fP instance takes ownership of the \fBQCPErrorBars\fP, so do not delete it manually but use \fBQCustomPlot::removePlottable()\fP instead\&. 
.PP
Definition at line \fB27119\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QCPErrorBars::~QCPErrorBars ()\fC [virtual]\fP"

.PP
Definition at line \fB27130\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void QCPErrorBars::addData (const QVector< double > & error)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Adds symmetrical error values as specified in \fIerror\fP\&. The errors will be associated one-to-one by the data point index to the associated data plottable (\fBsetDataPlottable\fP)\&.
.PP
You can directly access and manipulate the error bar data via \fBdata\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBsetData\fP 
.RE
.PP

.PP
Definition at line \fB27257\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPErrorBars::addData (const QVector< double > & errorMinus, const QVector< double > & errorPlus)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Adds asymmetrical errors as specified in \fIerrorMinus\fP and \fIerrorPlus\fP\&. The errors will be associated one-to-one by the data point index to the associated data plottable (\fBsetDataPlottable\fP)\&.
.PP
You can directly access and manipulate the error bar data via \fBdata\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBsetData\fP 
.RE
.PP

.PP
Definition at line \fB27272\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPErrorBars::addData (double error)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Adds a single symmetrical error bar as specified in \fIerror\fP\&. The errors will be associated one-to-one by the data point index to the associated data plottable (\fBsetDataPlottable\fP)\&.
.PP
You can directly access and manipulate the error bar data via \fBdata\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBsetData\fP 
.RE
.PP

.PP
Definition at line \fB27291\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPErrorBars::addData (double errorMinus, double errorPlus)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Adds a single asymmetrical error bar as specified in \fIerrorMinus\fP and \fIerrorPlus\fP\&. The errors will be associated one-to-one by the data point index to the associated data plottable (\fBsetDataPlottable\fP)\&.
.PP
You can directly access and manipulate the error bar data via \fBdata\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBsetData\fP 
.RE
.PP

.PP
Definition at line \fB27306\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QSharedPointer< QCPErrorBarsDataContainer > QCPErrorBars::data () const\fC [inline]\fP"
Returns a shared pointer to the internal data storage of type \fBQCPErrorBarsDataContainer\fP\&. You may use it to directly manipulate the error values, which may be more convenient and faster than using the regular \fBsetData\fP methods\&. 
.PP
Definition at line \fB6010\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPErrorBars::dataCount () const\fC [virtual]\fP"
Returns the number of data points of the plottable\&. 
.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB27312\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "double QCPErrorBars::dataMainKey (int index) const\fC [virtual]\fP"
Returns the main key of the data point at the given \fIindex\fP\&.
.PP
What the main key is, is defined by the plottable's data type\&. See the \fBQCPDataContainer DataType\fP documentation for details about this naming convention\&. 
.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB27318\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "double QCPErrorBars::dataMainValue (int index) const\fC [virtual]\fP"
Returns the main value of the data point at the given \fIindex\fP\&.
.PP
What the main value is, is defined by the plottable's data type\&. See the \fBQCPDataContainer DataType\fP documentation for details about this naming convention\&. 
.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB27338\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QPointF QCPErrorBars::dataPixelPosition (int index) const\fC [virtual]\fP"
Returns the pixel position on the widget surface at which the data point at the given \fIindex\fP appears\&.
.PP
Usually this corresponds to the point of \fBdataMainKey/\fP dataMainValue, in pixel coordinates\&. However, depending on the plottable, this might be a different apparent position than just a coord-to-pixel transform of those values\&. For example, \fBQCPBars\fP apparent data values can be shifted depending on their stacking, bar grouping or configured base value\&. 
.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB27365\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPAbstractPlottable\fP * QCPErrorBars::dataPlottable () const\fC [inline]\fP"

.PP
Definition at line \fB6011\fP of file \fBqcustomplot\&.h\fP\&.
.SS "double QCPErrorBars::dataSortKey (int index) const\fC [virtual]\fP"
Returns the sort key of the data point at the given \fIindex\fP\&.
.PP
What the sort key is, is defined by the plottable's data type\&. See the \fBQCPDataContainer DataType\fP documentation for details about this naming convention\&. 
.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB27328\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPRange\fP QCPErrorBars::dataValueRange (int index) const\fC [virtual]\fP"
Returns the value range of the data point at the given \fIindex\fP\&.
.PP
What the value range is, is defined by the plottable's data type\&. See the \fBQCPDataContainer DataType\fP documentation for details about this naming convention\&. 
.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB27348\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPErrorBars::draw (\fBQCPPainter\fP * painter)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Implements \fBQCPAbstractPlottable\fP\&.
.PP
Definition at line \fB27479\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPErrorBars::drawLegendIcon (\fBQCPPainter\fP * painter, const QRectF & rect) const\fC [protected]\fP, \fC [virtual]\fP"

.PP
Implements \fBQCPAbstractPlottable\fP\&.
.PP
Definition at line \fB27541\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPErrorBars::errorBarVisible (int index) const\fC [protected]\fP"

.PP
Definition at line \fB27926\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBErrorType\fP QCPErrorBars::errorType () const\fC [inline]\fP"

.PP
Definition at line \fB6012\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPErrorBars::findBegin (double sortKey, bool expandedRange = \fCtrue\fP) const\fC [virtual]\fP"
Returns the index of the data point with a (sort-)key that is equal to, just below, or just above \fIsortKey\fP\&. If \fIexpandedRange\fP is true, the data point just below \fIsortKey\fP will be considered, otherwise the one just above\&.
.PP
This can be used in conjunction with \fBfindEnd\fP to iterate over data points within a given key range, including or excluding the bounding data points that are just beyond the specified range\&.
.PP
If \fIexpandedRange\fP is true but there are no data points below \fIsortKey\fP, 0 is returned\&.
.PP
If the container is empty, returns 0 (in that case, \fBfindEnd\fP will also return 0, so a loop using these methods will not iterate over the index 0)\&.
.PP
\fBSee also\fP
.RS 4
\fBfindEnd\fP, \fBQCPDataContainer::findBegin\fP 
.RE
.PP

.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB27423\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "int QCPErrorBars::findEnd (double sortKey, bool expandedRange = \fCtrue\fP) const\fC [virtual]\fP"
Returns the index one after the data point with a (sort-)key that is equal to, just above, or just below \fIsortKey\fP\&. If \fIexpandedRange\fP is true, the data point just above \fIsortKey\fP will be considered, otherwise the one just below\&.
.PP
This can be used in conjunction with \fBfindBegin\fP to iterate over data points within a given key range, including the bounding data points that are just below and above the specified range\&.
.PP
If \fIexpandedRange\fP is true but there are no data points above \fIsortKey\fP, the index just above the highest data point is returned\&.
.PP
If the container is empty, returns 0\&.
.PP
\fBSee also\fP
.RS 4
\fBfindBegin\fP, \fBQCPDataContainer::findEnd\fP 
.RE
.PP

.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB27439\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPErrorBars::getDataSegments (QList< \fBQCPDataRange\fP > & selectedSegments, QList< \fBQCPDataRange\fP > & unselectedSegments) const\fC [protected]\fP"

.PP
Definition at line \fB27898\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPErrorBars::getErrorBarLines (QCPErrorBarsDataContainer::const_iterator it, QVector< QLineF > & backbones, QVector< QLineF > & whiskers) const\fC [protected]\fP"

.PP
Definition at line \fB27730\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPRange\fP QCPErrorBars::getKeyRange (bool & foundRange, \fBQCP::SignDomain\fP inSignDomain = \fC\fBQCP::sdBoth\fP\fP) const\fC [protected]\fP, \fC [virtual]\fP"
Returns the coordinate range that all data in this plottable span in the key axis dimension\&. For logarithmic plots, one can set \fIinSignDomain\fP to either \fBQCP::sdNegative\fP or \fBQCP::sdPositive\fP in order to restrict the returned range to that sign domain\&. E\&.g\&. when only negative range is wanted, set \fIinSignDomain\fP to \fBQCP::sdNegative\fP and all positive points will be ignored for range calculation\&. For no restriction, just set \fIinSignDomain\fP to \fBQCP::sdBoth\fP (default)\&. \fIfoundRange\fP is an output parameter that indicates whether a range could be found or not\&. If this is false, you shouldn't use the returned range (e\&.g\&. no points in data)\&.
.PP
Note that \fIfoundRange\fP is not the same as \fBQCPRange::validRange\fP, since the range returned by this function may have size zero (e\&.g\&. when there is only one data point)\&. In this case \fIfoundRange\fP would return true, but the returned range is not a valid range in terms of \fBQCPRange::validRange\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBrescaleAxes\fP, \fBgetValueRange\fP 
.RE
.PP

.PP
Implements \fBQCPAbstractPlottable\fP\&.
.PP
Definition at line \fB27559\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPRange\fP QCPErrorBars::getValueRange (bool & foundRange, \fBQCP::SignDomain\fP inSignDomain = \fC\fBQCP::sdBoth\fP\fP, const \fBQCPRange\fP & inKeyRange = \fC\fBQCPRange\fP()\fP) const\fC [protected]\fP, \fC [virtual]\fP"
Returns the coordinate range that the data points in the specified key range (\fIinKeyRange\fP) span in the value axis dimension\&. For logarithmic plots, one can set \fIinSignDomain\fP to either \fBQCP::sdNegative\fP or \fBQCP::sdPositive\fP in order to restrict the returned range to that sign domain\&. E\&.g\&. when only negative range is wanted, set \fIinSignDomain\fP to \fBQCP::sdNegative\fP and all positive points will be ignored for range calculation\&. For no restriction, just set \fIinSignDomain\fP to \fBQCP::sdBoth\fP (default)\&. \fIfoundRange\fP is an output parameter that indicates whether a range could be found or not\&. If this is false, you shouldn't use the returned range (e\&.g\&. no points in data)\&.
.PP
If \fIinKeyRange\fP has both lower and upper bound set to zero (is equal to \fC\fBQCPRange()\fP\fP), all data points are considered, without any restriction on the keys\&.
.PP
Note that \fIfoundRange\fP is not the same as \fBQCPRange::validRange\fP, since the range returned by this function may have size zero (e\&.g\&. when there is only one data point)\&. In this case \fIfoundRange\fP would return true, but the returned range is not a valid range in terms of \fBQCPRange::validRange\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBrescaleAxes\fP, \fBgetKeyRange\fP 
.RE
.PP

.PP
Implements \fBQCPAbstractPlottable\fP\&.
.PP
Definition at line \fB27633\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPErrorBars::getVisibleDataBounds (QCPErrorBarsDataContainer::const_iterator & begin, QCPErrorBarsDataContainer::const_iterator & end, const \fBQCPDataRange\fP & rangeRestriction) const\fC [protected]\fP"

.PP
Definition at line \fB27799\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "virtual \fBQCPPlottableInterface1D\fP * QCPErrorBars::interface1D ()\fC [inline]\fP, \fC [virtual]\fP"
If this plottable is a one-dimensional plottable, i\&.e\&. it implements the \fBQCPPlottableInterface1D\fP, returns the \fIthis\fP pointer with that type\&. Otherwise (e\&.g\&. in the case of a \fBQCPColorMap\fP) returns zero\&.
.PP
You can use this method to gain read access to data coordinates while holding a pointer to the abstract base class only\&. 
.PP
Reimplemented from \fBQCPAbstractPlottable\fP\&.
.PP
Definition at line \fB6045\fP of file \fBqcustomplot\&.h\fP\&.
.SS "double QCPErrorBars::pointDistance (const QPointF & pixelPoint, QCPErrorBarsDataContainer::const_iterator & closestData) const\fC [protected]\fP"

.PP
Definition at line \fB27858\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPErrorBars::rectIntersectsLine (const QRectF & pixelRect, const QLineF & line) const\fC [protected]\fP"

.PP
Definition at line \fB27956\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "double QCPErrorBars::selectTest (const QPointF & pos, bool onlySelectable, QVariant * details = \fC0\fP) const\fC [virtual]\fP"
This function is used to decide whether a click hits a layerable object or not\&.
.PP
\fIpos\fP is a point in pixel coordinates on the \fBQCustomPlot\fP surface\&. This function returns the shortest pixel distance of this point to the object\&. If the object is either invisible or the distance couldn't be determined, -1\&.0 is returned\&. Further, if \fIonlySelectable\fP is true and the object is not selectable, -1\&.0 is returned, too\&.
.PP
If the object is represented not by single lines but by an area like a \fBQCPItemText\fP or the bars of a \fBQCPBars\fP plottable, a click inside the area should also be considered a hit\&. In these cases this function thus returns a constant value greater zero but still below the parent plot's selection tolerance\&. (typically the selectionTolerance multiplied by 0\&.99)\&.
.PP
Providing a constant value for area objects allows selecting line objects even when they are obscured by such area objects, by clicking close to the lines (i\&.e\&. closer than 0\&.99*selectionTolerance)\&.
.PP
The actual setting of the selection state is not done by this function\&. This is handled by the parent \fBQCustomPlot\fP when the mouseReleaseEvent occurs, and the finally selected object is notified via the \fBselectEvent/\fP deselectEvent methods\&.
.PP
\fIdetails\fP is an optional output parameter\&. Every layerable subclass may place any information in \fIdetails\fP\&. This information will be passed to \fBselectEvent\fP when the parent \fBQCustomPlot\fP decides on the basis of this selectTest call, that the object was successfully selected\&. The subsequent call to \fBselectEvent\fP will carry the \fIdetails\fP\&. This is useful for multi-part objects (like \fBQCPAxis\fP)\&. This way, a possibly complex calculation to decide which part was clicked is only done once in \fBselectTest\fP\&. The result (i\&.e\&. the actually clicked part) can then be placed in \fIdetails\fP\&. So in the subsequent \fBselectEvent\fP, the decision which part was selected doesn't have to be done a second time for a single selection operation\&.
.PP
You may pass 0 as \fIdetails\fP to indicate that you are not interested in those selection details\&.
.PP
\fBSee also\fP
.RS 4
selectEvent, deselectEvent, \fBmousePressEvent\fP, \fBwheelEvent\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.PP
Implements \fBQCPAbstractPlottable\fP\&.
.PP
Definition at line \fB27455\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPDataSelection\fP QCPErrorBars::selectTestRect (const QRectF & rect, bool onlySelectable) const\fC [virtual]\fP"

.PP
Returns a data selection containing all the data points of this plottable which are contained (or hit by) \fIrect\fP\&. This is used mainly in the selection rect interaction for data selection (\fBdata selection mechanism\fP)\&.
.PP
If \fIonlySelectable\fP is true, an empty \fBQCPDataSelection\fP is returned if this plottable is not selectable (i\&.e\&. if \fBQCPAbstractPlottable::setSelectable\fP is \fBQCP::stNone\fP)\&.
.PP
\fBNote\fP
.RS 4
\fIrect\fP must be a normalized rect (positive or zero width and height)\&. This is especially important when using the rect of \fBQCPSelectionRect::accepted\fP, which is not necessarily normalized\&. Use \fCQRect::normalized()\fP when passing a rect which might not be normalized\&.   
.RE
.PP

.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB27390\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPErrorBars::setData (const QVector< double > & error)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Sets symmetrical error values as specified in \fIerror\fP\&. The errors will be associated one-to-one by the data point index to the associated data plottable (\fBsetDataPlottable\fP)\&.
.PP
You can directly access and manipulate the error bar data via \fBdata\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBaddData\fP 
.RE
.PP

.PP
Definition at line \fB27166\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPErrorBars::setData (const QVector< double > & errorMinus, const QVector< double > & errorPlus)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Sets asymmetrical errors as specified in \fIerrorMinus\fP and \fIerrorPlus\fP\&. The errors will be associated one-to-one by the data point index to the associated data plottable (\fBsetDataPlottable\fP)\&.
.PP
You can directly access and manipulate the error bar data via \fBdata\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBaddData\fP 
.RE
.PP

.PP
Definition at line \fB27182\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPErrorBars::setData (QSharedPointer< QCPErrorBarsDataContainer > data)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Replaces the current data container with the provided \fIdata\fP container\&.
.PP
Since a QSharedPointer is used, multiple \fBQCPErrorBars\fP instances may share the same data container safely\&. Modifying the data in the container will then affect all \fBQCPErrorBars\fP instances that share the container\&. Sharing can be achieved by simply exchanging the data containers wrapped in shared pointers: 
.PP
.nf

.fi
.PP
.PP
If you do not wish to share containers, but create a copy from an existing container, assign the data containers directly: 
.PP
.nf

.fi
.PP
 (This uses different notation compared with other plottables, because the \fBQCPErrorBars\fP uses a \fCQVector<QCPErrorBarsData>\fP as its data container, instead of a \fBQCPDataContainer\fP\&.)
.PP
\fBSee also\fP
.RS 4
\fBaddData\fP 
.RE
.PP

.PP
Definition at line \fB27152\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPErrorBars::setDataPlottable (\fBQCPAbstractPlottable\fP * plottable)"
Sets the data plottable to which the error bars will be applied\&. The error values specified e\&.g\&. via \fBsetData\fP will be associated one-to-one by the data point index to the data points of \fIplottable\fP\&. This means that the error bars will adopt the key/value coordinates of the data point with the same index\&.
.PP
The passed \fIplottable\fP must be a one-dimensional plottable, i\&.e\&. it must implement the \fBQCPPlottableInterface1D\fP\&. Further, it must not be a \fBQCPErrorBars\fP instance itself\&. If either of these restrictions is violated, a corresponding qDebug output is generated, and the data plottable of this \fBQCPErrorBars\fP instance is set to zero\&.
.PP
For proper display, care must also be taken that the key and value axes of the \fIplottable\fP match those configured for this \fBQCPErrorBars\fP instance\&. 
.PP
Definition at line \fB27202\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPErrorBars::setErrorType (\fBErrorType\fP type)"
Sets in which orientation the error bars shall appear on the data points\&. If your data needs both error dimensions, create two \fBQCPErrorBars\fP with different \fItype\fP\&. 
.PP
Definition at line \fB27224\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPErrorBars::setSymbolGap (double pixels)"
Sets the gap diameter around the data points that will be left out when drawing the error bar backbones\&. This gap prevents that error bars are drawn too close to or even through scatter points\&. 
.PP
Definition at line \fB27243\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPErrorBars::setWhiskerWidth (double pixels)"
Sets the width of the whiskers (the short bars at the end of the actual error bar backbones) to \fIpixels\fP\&. 
.PP
Definition at line \fB27233\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPErrorBars::sortKeyIsMainKey () const\fC [virtual]\fP"
Returns whether the sort key (\fBdataSortKey\fP) is identical to the main key (\fBdataMainKey\fP)\&.
.PP
What the sort and main keys are, is defined by the plottable's data type\&. See the \fBQCPDataContainer DataType\fP documentation for details about this naming convention\&. 
.PP
Implements \fBQCPPlottableInterface1D\fP\&.
.PP
Definition at line \fB27375\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "double QCPErrorBars::symbolGap () const\fC [inline]\fP"

.PP
Definition at line \fB6014\fP of file \fBqcustomplot\&.h\fP\&.
.SS "double QCPErrorBars::whiskerWidth () const\fC [inline]\fP"

.PP
Definition at line \fB6013\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBQCPLegend\fP\fC [friend]\fP"

.PP
Definition at line \fB6071\fP of file \fBqcustomplot\&.h\fP\&.
.SS "friend class \fBQCustomPlot\fP\fC [friend]\fP"

.PP
Definition at line \fB6070\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "QSharedPointer<QCPErrorBarsDataContainer> QCPErrorBars::mDataContainer\fC [protected]\fP"

.PP
Definition at line \fB6049\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPointer<\fBQCPAbstractPlottable\fP> QCPErrorBars::mDataPlottable\fC [protected]\fP"

.PP
Definition at line \fB6050\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBErrorType\fP QCPErrorBars::mErrorType\fC [protected]\fP"

.PP
Definition at line \fB6051\fP of file \fBqcustomplot\&.h\fP\&.
.SS "double QCPErrorBars::mSymbolGap\fC [protected]\fP"

.PP
Definition at line \fB6053\fP of file \fBqcustomplot\&.h\fP\&.
.SS "double QCPErrorBars::mWhiskerWidth\fC [protected]\fP"

.PP
Definition at line \fB6052\fP of file \fBqcustomplot\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OmronPID from the source code\&.
