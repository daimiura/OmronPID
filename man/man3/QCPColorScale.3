.TH "QCPColorScale" 3 "Wed Mar 15 2023" "OmronPID" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPColorScale \- A color scale for use with color coding data such as \fBQCPColorMap\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBQCPLayoutElement\fP\&.
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBdataRangeChanged\fP (const \fBQCPRange\fP &newRange)"
.br
.ti -1c
.RI "void \fBdataScaleTypeChanged\fP (\fBQCPAxis::ScaleType\fP scaleType)"
.br
.ti -1c
.RI "void \fBgradientChanged\fP (const \fBQCPColorGradient\fP &newGradient)"
.br
.in -1c

Signals inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "void \fBlayerChanged\fP (\fBQCPLayer\fP *newLayer)"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPColorScale\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "\fBQCPAxis\fP * \fBaxis\fP () const"
.br
.ti -1c
.RI "\fBQCPAxis::AxisType\fP \fBtype\fP () const"
.br
.ti -1c
.RI "\fBQCPRange\fP \fBdataRange\fP () const"
.br
.ti -1c
.RI "\fBQCPAxis::ScaleType\fP \fBdataScaleType\fP () const"
.br
.ti -1c
.RI "\fBQCPColorGradient\fP \fBgradient\fP () const"
.br
.ti -1c
.RI "QString \fBlabel\fP () const"
.br
.ti -1c
.RI "int \fBbarWidth\fP () const"
.br
.ti -1c
.RI "bool \fBrangeDrag\fP () const"
.br
.ti -1c
.RI "bool \fBrangeZoom\fP () const"
.br
.ti -1c
.RI "void \fBsetType\fP (\fBQCPAxis::AxisType\fP type)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetDataRange\fP (const \fBQCPRange\fP &dataRange)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetDataScaleType\fP (\fBQCPAxis::ScaleType\fP scaleType)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetGradient\fP (const \fBQCPColorGradient\fP &gradient)"
.br
.ti -1c
.RI "void \fBsetLabel\fP (const QString &str)"
.br
.ti -1c
.RI "void \fBsetBarWidth\fP (int width)"
.br
.ti -1c
.RI "void \fBsetRangeDrag\fP (bool enabled)"
.br
.ti -1c
.RI "void \fBsetRangeZoom\fP (bool enabled)"
.br
.ti -1c
.RI "QList< \fBQCPColorMap\fP * > \fBcolorMaps\fP () const"
.br
.ti -1c
.RI "void \fBrescaleDataRange\fP (bool onlyVisibleMaps)"
.br
.ti -1c
.RI "virtual void \fBupdate\fP (\fBUpdatePhase\fP phase) Q_DECL_OVERRIDE"
.br
.in -1c

Public Member Functions inherited from \fBQCPLayoutElement\fP
.in +1c
.ti -1c
.RI "\fBQCPLayoutElement\fP (\fBQCustomPlot\fP *parentPlot=0)"
.br
.ti -1c
.RI "\fBQCPLayout\fP * \fBlayout\fP () const"
.br
.ti -1c
.RI "QRect \fBrect\fP () const"
.br
.ti -1c
.RI "QRect \fBouterRect\fP () const"
.br
.ti -1c
.RI "QMargins \fBmargins\fP () const"
.br
.ti -1c
.RI "QMargins \fBminimumMargins\fP () const"
.br
.ti -1c
.RI "QCP::MarginSides \fBautoMargins\fP () const"
.br
.ti -1c
.RI "QSize \fBminimumSize\fP () const"
.br
.ti -1c
.RI "QSize \fBmaximumSize\fP () const"
.br
.ti -1c
.RI "\fBSizeConstraintRect\fP \fBsizeConstraintRect\fP () const"
.br
.ti -1c
.RI "\fBQCPMarginGroup\fP * \fBmarginGroup\fP (\fBQCP::MarginSide\fP side) const"
.br
.ti -1c
.RI "QHash< \fBQCP::MarginSide\fP, \fBQCPMarginGroup\fP * > \fBmarginGroups\fP () const"
.br
.ti -1c
.RI "void \fBsetOuterRect\fP (const QRect &\fBrect\fP)"
.br
.ti -1c
.RI "void \fBsetMargins\fP (const QMargins &margins)"
.br
.ti -1c
.RI "void \fBsetMinimumMargins\fP (const QMargins &margins)"
.br
.ti -1c
.RI "void \fBsetAutoMargins\fP (QCP::MarginSides sides)"
.br
.ti -1c
.RI "void \fBsetMinimumSize\fP (const QSize &size)"
.br
.ti -1c
.RI "void \fBsetMinimumSize\fP (int width, int height)"
.br
.ti -1c
.RI "void \fBsetMaximumSize\fP (const QSize &size)"
.br
.ti -1c
.RI "void \fBsetMaximumSize\fP (int width, int height)"
.br
.ti -1c
.RI "void \fBsetSizeConstraintRect\fP (\fBSizeConstraintRect\fP constraintRect)"
.br
.ti -1c
.RI "void \fBsetMarginGroup\fP (QCP::MarginSides sides, \fBQCPMarginGroup\fP *group)"
.br
.ti -1c
.RI "virtual void \fBupdate\fP (\fBUpdatePhase\fP phase)"
.br
.ti -1c
.RI "virtual QSize \fBminimumOuterSizeHint\fP () const"
.br
.ti -1c
.RI "virtual QSize \fBmaximumOuterSizeHint\fP () const"
.br
.ti -1c
.RI "virtual QList< \fBQCPLayoutElement\fP * > \fBelements\fP (bool recursive) const"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE"
.br
.in -1c

Public Member Functions inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "\fBQCPLayerable\fP (\fBQCustomPlot\fP *plot, QString targetLayer=QString(), \fBQCPLayerable\fP *\fBparentLayerable\fP=0)"
.br
.ti -1c
.RI "bool \fBvisible\fP () const"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBparentPlot\fP () const"
.br
.ti -1c
.RI "\fBQCPLayerable\fP * \fBparentLayerable\fP () const"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBlayer\fP () const"
.br
.ti -1c
.RI "bool \fBantialiased\fP () const"
.br
.ti -1c
.RI "void \fBsetVisible\fP (bool on)"
.br
.ti -1c
.RI "Q_SLOT bool \fBsetLayer\fP (\fBQCPLayer\fP *layer)"
.br
.ti -1c
.RI "bool \fBsetLayer\fP (const QString &layerName)"
.br
.ti -1c
.RI "void \fBsetAntialiased\fP (bool enabled)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const"
.br
.ti -1c
.RI "bool \fBrealVisibility\fP () const"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBmousePressEvent\fP (QMouseEvent *event, const QVariant &details) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBmouseMoveEvent\fP (QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBmouseReleaseEvent\fP (QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBwheelEvent\fP (QWheelEvent *event) Q_DECL_OVERRIDE"
.br
.in -1c

Protected Member Functions inherited from \fBQCPLayoutElement\fP
.in +1c
.ti -1c
.RI "virtual int \fBcalculateAutoMargin\fP (\fBQCP::MarginSide\fP side)"
.br
.ti -1c
.RI "virtual void \fBlayoutChanged\fP ()"
.br
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBparentPlotInitialized\fP (\fBQCustomPlot\fP *parentPlot) Q_DECL_OVERRIDE"
.br
.in -1c

Protected Member Functions inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "virtual void \fBparentPlotInitialized\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "virtual \fBQCP::Interaction\fP \fBselectionCategory\fP () const"
.br
.ti -1c
.RI "virtual QRect \fBclipRect\fP () const"
.br
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const =0"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter)=0"
.br
.ti -1c
.RI "virtual void \fBselectEvent\fP (QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBdeselectEvent\fP (bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBmousePressEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBmouseMoveEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseReleaseEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseDoubleClickEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBwheelEvent\fP (QWheelEvent *event)"
.br
.ti -1c
.RI "void \fBinitializeParentPlot\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "void \fBsetParentLayerable\fP (\fBQCPLayerable\fP *\fBparentLayerable\fP)"
.br
.ti -1c
.RI "bool \fBmoveToLayer\fP (\fBQCPLayer\fP *layer, bool prepend)"
.br
.ti -1c
.RI "void \fBapplyAntialiasingHint\fP (\fBQCPPainter\fP *painter, bool localAntialiased, \fBQCP::AntialiasedElement\fP overrideElement) const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBQCPAxis::AxisType\fP \fBmType\fP"
.br
.ti -1c
.RI "\fBQCPRange\fP \fBmDataRange\fP"
.br
.ti -1c
.RI "\fBQCPAxis::ScaleType\fP \fBmDataScaleType\fP"
.br
.ti -1c
.RI "\fBQCPColorGradient\fP \fBmGradient\fP"
.br
.ti -1c
.RI "int \fBmBarWidth\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPColorScaleAxisRectPrivate\fP > \fBmAxisRect\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPAxis\fP > \fBmColorAxis\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPLayoutElement\fP
.in +1c
.ti -1c
.RI "\fBQCPLayout\fP * \fBmParentLayout\fP"
.br
.ti -1c
.RI "QSize \fBmMinimumSize\fP"
.br
.ti -1c
.RI "QSize \fBmMaximumSize\fP"
.br
.ti -1c
.RI "\fBSizeConstraintRect\fP \fBmSizeConstraintRect\fP"
.br
.ti -1c
.RI "QRect \fBmRect\fP"
.br
.ti -1c
.RI "QRect \fBmOuterRect\fP"
.br
.ti -1c
.RI "QMargins \fBmMargins\fP"
.br
.ti -1c
.RI "QMargins \fBmMinimumMargins\fP"
.br
.ti -1c
.RI "QCP::MarginSides \fBmAutoMargins\fP"
.br
.ti -1c
.RI "QHash< \fBQCP::MarginSide\fP, \fBQCPMarginGroup\fP * > \fBmMarginGroups\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "bool \fBmVisible\fP"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBmParentPlot\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPLayerable\fP > \fBmParentLayerable\fP"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBmLayer\fP"
.br
.ti -1c
.RI "bool \fBmAntialiased\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBQCPColorScaleAxisRectPrivate\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Public Types inherited from \fBQCPLayoutElement\fP
.in +1c
.ti -1c
.RI "enum \fBUpdatePhase\fP { \fBupPreparation\fP, \fBupMargins\fP, \fBupLayout\fP }"
.br
.ti -1c
.RI "enum \fBSizeConstraintRect\fP { \fBscrInnerRect\fP, \fBscrOuterRect\fP }"
.br
.in -1c
.SH "Detailed Description"
.PP 
A color scale for use with color coding data such as \fBQCPColorMap\fP\&. 

This layout element can be placed on the plot to correlate a color gradient with data values\&. It is usually used in combination with one or multiple \fBQCPColorMaps\fP\&.
.PP
.PP
The color scale can be either horizontal or vertical, as shown in the image above\&. The orientation and the side where the numbers appear is controlled with \fBsetType\fP\&.
.PP
Use \fBQCPColorMap::setColorScale\fP to connect a color map with a color scale\&. Once they are connected, they share their gradient, data range and data scale type (\fBsetGradient\fP, \fBsetDataRange\fP, \fBsetDataScaleType\fP)\&. Multiple color maps may be associated with a single color scale, to make them all synchronize these properties\&.
.PP
To have finer control over the number display and axis behaviour, you can directly access the \fBaxis\fP\&. See the documentation of \fBQCPAxis\fP for details about configuring axes\&. For example, if you want to change the number of automatically generated ticks, call 
.PP
.nf

.fi
.PP
.PP
Placing a color scale next to the main axis rect works like with any other layout element: 
.PP
.nf

.fi
.PP
 In this case we have placed it to the right of the default axis rect, so it wasn't necessary to call \fBsetType\fP, since \fBQCPAxis::atRight\fP is already the default\&. The text next to the color scale can be set with \fBsetLabel\fP\&.
.PP
For optimum appearance (like in the image above), it may be desirable to line up the axis rect and the borders of the color scale\&. Use a \fBQCPMarginGroup\fP to achieve this: 
.PP
.nf

.fi
.PP
.PP
Color scales are initialized with a non-zero minimum top and bottom margin (\fBsetMinimumMargins\fP), because vertical color scales are most common and the minimum top/bottom margin makes sure it keeps some distance to the top/bottom widget border\&. So if you change to a horizontal color scale by setting \fBsetType\fP to \fBQCPAxis::atBottom\fP or \fBQCPAxis::atTop\fP, you might want to also change the minimum margins accordingly, e\&.g\&. \fCsetMinimumMargins(QMargins(6, 0, 6, 0))\fP\&. 
.PP
Definition at line \fB5038\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPColorScale::QCPColorScale (\fBQCustomPlot\fP * parentPlot)\fC [explicit]\fP"
Constructs a new \fBQCPColorScale\fP\&. 
.PP
Definition at line \fB19332\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QCPColorScale::~QCPColorScale ()\fC [virtual]\fP"

.PP
Definition at line \fB19344\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void QCPColorScale::applyDefaultAntialiasingHint (\fBQCPPainter\fP * painter) const\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.PP
Definition at line \fB19683\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPAxis\fP * QCPColorScale::axis () const\fC [inline]\fP"
Returns the internal \fBQCPAxis\fP instance of this color scale\&. You can access it to alter the appearance and behaviour of the axis\&. \fBQCPColorScale\fP duplicates some properties in its interface for convenience\&. Those are \fBsetDataRange\fP (\fBQCPAxis::setRange\fP), \fBsetDataScaleType\fP (\fBQCPAxis::setScaleType\fP), and the method \fBsetLabel\fP (\fBQCPAxis::setLabel\fP)\&. As they each are connected, it does not matter whether you use the method on the \fBQCPColorScale\fP or on its \fBQCPAxis\fP\&.
.PP
If the type of the color scale is changed with \fBsetType\fP, the axis returned by this method will change, too, to either the left, right, bottom or top axis, depending on which type was set\&. 
.PP
Definition at line \fB5056\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPColorScale::barWidth () const\fC [inline]\fP"

.PP
Definition at line \fB5062\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QList< \fBQCPColorMap\fP * > QCPColorScale::colorMaps () const"
Returns a list of all the color maps associated with this color scale\&. 
.PP
Definition at line \fB19569\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPRange\fP QCPColorScale::dataRange () const\fC [inline]\fP"

.PP
Definition at line \fB5058\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPColorScale::dataRangeChanged (const \fBQCPRange\fP & newRange)\fC [signal]\fP"
This signal is emitted when the data range changes\&.
.PP
\fBSee also\fP
.RS 4
\fBsetDataRange\fP 
.RE
.PP

.SS "\fBQCPAxis::ScaleType\fP QCPColorScale::dataScaleType () const\fC [inline]\fP"

.PP
Definition at line \fB5059\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPColorScale::dataScaleTypeChanged (\fBQCPAxis::ScaleType\fP scaleType)\fC [signal]\fP"
This signal is emitted when the data scale type changes\&.
.PP
\fBSee also\fP
.RS 4
\fBsetDataScaleType\fP 
.RE
.PP

.SS "\fBQCPColorGradient\fP QCPColorScale::gradient () const\fC [inline]\fP"

.PP
Definition at line \fB5060\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPColorScale::gradientChanged (const \fBQCPColorGradient\fP & newGradient)\fC [signal]\fP"
This signal is emitted when the gradient changes\&.
.PP
\fBSee also\fP
.RS 4
\fBsetGradient\fP 
.RE
.PP

.SS "QString QCPColorScale::label () const"

.PP
Definition at line \fB19350\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorScale::mouseMoveEvent (QMouseEvent * event, const QPointF & startPos)\fC [protected]\fP, \fC [virtual]\fP"
This event gets called when the user moves the mouse while holding a mouse button, after this layerable has become the mouse grabber by accepting the preceding \fBmousePressEvent\fP\&.
.PP
The current pixel position of the cursor on the \fBQCustomPlot\fP widget is accessible via \fCevent->pos()\fP\&. The parameter \fIstartPos\fP indicates the position where the initial \fBmousePressEvent\fP occured, that started the mouse interaction\&.
.PP
The default implementation does nothing\&.
.PP
\fBSee also\fP
.RS 4
\fBmousePressEvent\fP, \fBmouseReleaseEvent\fP, \fBmouseDoubleClickEvent\fP, \fBwheelEvent\fP 
.RE
.PP

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB19700\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorScale::mousePressEvent (QMouseEvent * event, const QVariant & details)\fC [protected]\fP, \fC [virtual]\fP"
This event gets called when the user presses a mouse button while the cursor is over the layerable\&. Whether a cursor is over the layerable is decided by a preceding call to \fBselectTest\fP\&.
.PP
The current pixel position of the cursor on the \fBQCustomPlot\fP widget is accessible via \fCevent->pos()\fP\&. The parameter \fIdetails\fP contains layerable-specific details about the hit, which were generated in the previous call to \fBselectTest\fP\&. For example, One-dimensional plottables like \fBQCPGraph\fP or \fBQCPBars\fP convey the clicked data point in the \fIdetails\fP parameter, as \fBQCPDataSelection\fP packed as QVariant\&. Multi-part objects convey the specific \fCSelectablePart\fP that was hit (e\&.g\&. \fBQCPAxis::SelectablePart\fP in the case of axes)\&.
.PP
\fBQCustomPlot\fP uses an event propagation system that works the same as Qt's system\&. If your layerable doesn't reimplement the \fBmousePressEvent\fP or explicitly calls \fCevent->ignore()\fP in its reimplementation, the event will be propagated to the next layerable in the stacking order\&.
.PP
Once a layerable has accepted the \fBmousePressEvent\fP, it is considered the mouse grabber and will receive all following calls to \fBmouseMoveEvent\fP or \fBmouseReleaseEvent\fP for this mouse interaction (a 'mouse interaction' in this context ends with the release)\&.
.PP
The default implementation does nothing except explicitly ignoring the event with \fCevent->ignore()\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBmouseMoveEvent\fP, \fBmouseReleaseEvent\fP, \fBmouseDoubleClickEvent\fP, \fBwheelEvent\fP 
.RE
.PP

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB19689\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorScale::mouseReleaseEvent (QMouseEvent * event, const QPointF & startPos)\fC [protected]\fP, \fC [virtual]\fP"
This event gets called when the user releases the mouse button, after this layerable has become the mouse grabber by accepting the preceding \fBmousePressEvent\fP\&.
.PP
The current pixel position of the cursor on the \fBQCustomPlot\fP widget is accessible via \fCevent->pos()\fP\&. The parameter \fIstartPos\fP indicates the position where the initial \fBmousePressEvent\fP occured, that started the mouse interaction\&.
.PP
The default implementation does nothing\&.
.PP
\fBSee also\fP
.RS 4
\fBmousePressEvent\fP, \fBmouseMoveEvent\fP, \fBmouseDoubleClickEvent\fP, \fBwheelEvent\fP 
.RE
.PP

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB19711\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPColorScale::rangeDrag () const"

.PP
Definition at line \fB19362\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPColorScale::rangeZoom () const"

.PP
Definition at line \fB19376\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorScale::rescaleDataRange (bool onlyVisibleMaps)"
Changes the data range such that all color maps associated with this color scale are fully mapped to the gradient in the data dimension\&.
.PP
\fBSee also\fP
.RS 4
\fBsetDataRange\fP 
.RE
.PP

.PP
Definition at line \fB19587\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorScale::setBarWidth (int width)"
Sets the width (or height, for horizontal color scales) the bar where the gradient is displayed will have\&. 
.PP
Definition at line \fB19521\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorScale::setDataRange (const \fBQCPRange\fP & dataRange)"
Sets the range spanned by the color gradient and that is shown by the axis in the color scale\&.
.PP
It is equivalent to calling \fBQCPColorMap::setDataRange\fP on any of the connected color maps\&. It is also equivalent to directly accessing the \fBaxis\fP and setting its range with \fBQCPAxis::setRange\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBsetDataScaleType\fP, \fBsetGradient\fP, \fBrescaleDataRange\fP 
.RE
.PP

.PP
Definition at line \fB19450\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorScale::setDataScaleType (\fBQCPAxis::ScaleType\fP scaleType)"
Sets the scale type of the color scale, i\&.e\&. whether values are linearly associated with colors or logarithmically\&.
.PP
It is equivalent to calling \fBQCPColorMap::setDataScaleType\fP on any of the connected color maps\&. It is also equivalent to directly accessing the \fBaxis\fP and setting its scale type with \fBQCPAxis::setScaleType\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBsetDataRange\fP, \fBsetGradient\fP 
.RE
.PP

.PP
Definition at line \fB19471\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorScale::setGradient (const \fBQCPColorGradient\fP & gradient)"
Sets the color gradient that will be used to represent data values\&.
.PP
It is equivalent to calling \fBQCPColorMap::setGradient\fP on any of the connected color maps\&.
.PP
\fBSee also\fP
.RS 4
\fBsetDataRange\fP, \fBsetDataScaleType\fP 
.RE
.PP

.PP
Definition at line \fB19491\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorScale::setLabel (const QString & str)"
Sets the axis label of the color scale\&. This is equivalent to calling \fBQCPAxis::setLabel\fP on the internal \fBaxis\fP\&. 
.PP
Definition at line \fB19506\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorScale::setRangeDrag (bool enabled)"
Sets whether the user can drag the data range (\fBsetDataRange\fP)\&.
.PP
Note that \fBQCP::iRangeDrag\fP must be in the \fBQCustomPlot\fP's interactions (\fBQCustomPlot::setInteractions\fP) to allow range dragging\&. 
.PP
Definition at line \fB19532\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorScale::setRangeZoom (bool enabled)"
Sets whether the user can zoom the data range (\fBsetDataRange\fP) by scrolling the mouse wheel\&.
.PP
Note that \fBQCP::iRangeZoom\fP must be in the \fBQCustomPlot\fP's interactions (\fBQCustomPlot::setInteractions\fP) to allow range dragging\&. 
.PP
Definition at line \fB19552\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorScale::setType (\fBQCPAxis::AxisType\fP type)"
Sets at which side of the color scale the axis is placed, and thus also its orientation\&.
.PP
Note that after setting \fItype\fP to a different value, the axis returned by \fBaxis()\fP will be a different one\&. The new axis will adopt the following properties from the previous axis: The range, scale type, label and ticker (the latter will be shared and not copied)\&. 
.PP
Definition at line \fB19396\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPAxis::AxisType\fP QCPColorScale::type () const\fC [inline]\fP"

.PP
Definition at line \fB5057\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPColorScale::update (\fBUpdatePhase\fP phase)\fC [virtual]\fP"
Updates the layout element and sub-elements\&. This function is automatically called before every replot by the parent layout element\&. It is called multiple times, once for every \fBUpdatePhase\fP\&. The phases are run through in the order of the enum values\&. For details about what happens at the different phases, see the documentation of \fBUpdatePhase\fP\&.
.PP
Layout elements that have child elements should call the \fBupdate\fP method of their child elements, and pass the current \fIphase\fP unchanged\&.
.PP
The default implementation executes the automatic margin mechanism in the \fBupMargins\fP phase\&. Subclasses should make sure to call the base class implementation\&. 
.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.PP
Definition at line \fB19647\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorScale::wheelEvent (QWheelEvent * event)\fC [protected]\fP, \fC [virtual]\fP"
This event gets called when the user turns the mouse scroll wheel while the cursor is over the layerable\&. Whether a cursor is over the layerable is decided by a preceding call to \fBselectTest\fP\&.
.PP
The current pixel position of the cursor on the \fBQCustomPlot\fP widget is accessible via \fCevent->pos()\fP\&.
.PP
The \fCevent->delta()\fP indicates how far the mouse wheel was turned, which is usually +/- 120 for single rotation steps\&. However, if the mouse wheel is turned rapidly, multiple steps may accumulate to one event, making \fCevent->delta()\fP larger\&. On the other hand, if the wheel has very smooth steps or none at all, the delta may be smaller\&.
.PP
The default implementation does nothing\&.
.PP
\fBSee also\fP
.RS 4
\fBmousePressEvent\fP, \fBmouseMoveEvent\fP, \fBmouseReleaseEvent\fP, \fBmouseDoubleClickEvent\fP 
.RE
.PP

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB19722\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBQCPColorScaleAxisRectPrivate\fP\fC [friend]\fP"

.PP
Definition at line \fB5111\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "QPointer<\fBQCPColorScaleAxisRectPrivate\fP> QCPColorScale::mAxisRect\fC [protected]\fP"

.PP
Definition at line \fB5097\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPColorScale::mBarWidth\fC [protected]\fP"

.PP
Definition at line \fB5094\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPointer<\fBQCPAxis\fP> QCPColorScale::mColorAxis\fC [protected]\fP"

.PP
Definition at line \fB5098\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPRange\fP QCPColorScale::mDataRange\fC [protected]\fP"

.PP
Definition at line \fB5091\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPAxis::ScaleType\fP QCPColorScale::mDataScaleType\fC [protected]\fP"

.PP
Definition at line \fB5092\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPColorGradient\fP QCPColorScale::mGradient\fC [protected]\fP"

.PP
Definition at line \fB5093\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPAxis::AxisType\fP QCPColorScale::mType\fC [protected]\fP"

.PP
Definition at line \fB5090\fP of file \fBqcustomplot\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OmronPID from the source code\&.
