.TH "QCPStatisticalBox" 3 "Wed Mar 15 2023" "OmronPID" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPStatisticalBox \- A plottable representing a single statistical box in a plot\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPStatisticalBox\fP (\fBQCPAxis\fP *keyAxis, \fBQCPAxis\fP *valueAxis)"
.br
.ti -1c
.RI "QSharedPointer< \fBQCPStatisticalBoxDataContainer\fP > \fBdata\fP () const"
.br
.ti -1c
.RI "double \fBwidth\fP () const"
.br
.ti -1c
.RI "double \fBwhiskerWidth\fP () const"
.br
.ti -1c
.RI "QPen \fBwhiskerPen\fP () const"
.br
.ti -1c
.RI "QPen \fBwhiskerBarPen\fP () const"
.br
.ti -1c
.RI "bool \fBwhiskerAntialiased\fP () const"
.br
.ti -1c
.RI "QPen \fBmedianPen\fP () const"
.br
.ti -1c
.RI "\fBQCPScatterStyle\fP \fBoutlierStyle\fP () const"
.br
.ti -1c
.RI "void \fBsetData\fP (QSharedPointer< \fBQCPStatisticalBoxDataContainer\fP > \fBdata\fP)"
.br
.ti -1c
.RI "void \fBsetData\fP (const QVector< double > &keys, const QVector< double > &minimum, const QVector< double > &lowerQuartile, const QVector< double > &median, const QVector< double > &upperQuartile, const QVector< double > &maximum, bool alreadySorted=false)"
.br
.ti -1c
.RI "void \fBsetWidth\fP (double width)"
.br
.ti -1c
.RI "void \fBsetWhiskerWidth\fP (double width)"
.br
.ti -1c
.RI "void \fBsetWhiskerPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetWhiskerBarPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetWhiskerAntialiased\fP (bool enabled)"
.br
.ti -1c
.RI "void \fBsetMedianPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetOutlierStyle\fP (const \fBQCPScatterStyle\fP &style)"
.br
.ti -1c
.RI "void \fBaddData\fP (const QVector< double > &keys, const QVector< double > &minimum, const QVector< double > &lowerQuartile, const QVector< double > &median, const QVector< double > &upperQuartile, const QVector< double > &maximum, bool alreadySorted=false)"
.br
.ti -1c
.RI "void \fBaddData\fP (double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum, const QVector< double > &outliers=QVector< double >())"
.br
.ti -1c
.RI "virtual \fBQCPDataSelection\fP \fBselectTestRect\fP (const QRectF &rect, bool onlySelectable) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBgetKeyRange\fP (bool &foundRange, \fBQCP::SignDomain\fP inSignDomain=\fBQCP::sdBoth\fP) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBgetValueRange\fP (bool &foundRange, \fBQCP::SignDomain\fP inSignDomain=\fBQCP::sdBoth\fP, const \fBQCPRange\fP &inKeyRange=\fBQCPRange\fP()) const Q_DECL_OVERRIDE"
.br
.in -1c

Public Member Functions inherited from \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP
.in +1c
.ti -1c
.RI "\fBQCPAbstractPlottable1D\fP (\fBQCPAxis\fP *keyAxis, \fBQCPAxis\fP *valueAxis)"
.br
.ti -1c
.RI "virtual int \fBdataCount\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual double \fBdataMainKey\fP (int index) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual double \fBdataSortKey\fP (int index) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual double \fBdataMainValue\fP (int index) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBdataValueRange\fP (int index) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual QPointF \fBdataPixelPosition\fP (int index) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual bool \fBsortKeyIsMainKey\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCPDataSelection\fP \fBselectTestRect\fP (const QRectF &rect, bool onlySelectable) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual int \fBfindBegin\fP (double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual int \fBfindEnd\fP (double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCPPlottableInterface1D\fP * \fBinterface1D\fP () Q_DECL_OVERRIDE"
.br
.in -1c

Public Member Functions inherited from \fBQCPAbstractPlottable\fP
.in +1c
.ti -1c
.RI "\fBQCPAbstractPlottable\fP (\fBQCPAxis\fP *keyAxis, \fBQCPAxis\fP *valueAxis)"
.br
.ti -1c
.RI "QString \fBname\fP () const"
.br
.ti -1c
.RI "bool \fBantialiasedFill\fP () const"
.br
.ti -1c
.RI "bool \fBantialiasedScatters\fP () const"
.br
.ti -1c
.RI "QPen \fBpen\fP () const"
.br
.ti -1c
.RI "QBrush \fBbrush\fP () const"
.br
.ti -1c
.RI "\fBQCPAxis\fP * \fBkeyAxis\fP () const"
.br
.ti -1c
.RI "\fBQCPAxis\fP * \fBvalueAxis\fP () const"
.br
.ti -1c
.RI "\fBQCP::SelectionType\fP \fBselectable\fP () const"
.br
.ti -1c
.RI "bool \fBselected\fP () const"
.br
.ti -1c
.RI "\fBQCPDataSelection\fP \fBselection\fP () const"
.br
.ti -1c
.RI "\fBQCPSelectionDecorator\fP * \fBselectionDecorator\fP () const"
.br
.ti -1c
.RI "void \fBsetName\fP (const QString &name)"
.br
.ti -1c
.RI "void \fBsetAntialiasedFill\fP (bool enabled)"
.br
.ti -1c
.RI "void \fBsetAntialiasedScatters\fP (bool enabled)"
.br
.ti -1c
.RI "void \fBsetPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetBrush\fP (const QBrush &brush)"
.br
.ti -1c
.RI "void \fBsetKeyAxis\fP (\fBQCPAxis\fP *axis)"
.br
.ti -1c
.RI "void \fBsetValueAxis\fP (\fBQCPAxis\fP *axis)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetSelectable\fP (\fBQCP::SelectionType\fP selectable)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetSelection\fP (\fBQCPDataSelection\fP \fBselection\fP)"
.br
.ti -1c
.RI "void \fBsetSelectionDecorator\fP (\fBQCPSelectionDecorator\fP *decorator)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const =0"
.br
.ti -1c
.RI "virtual \fBQCPPlottableInterface1D\fP * \fBinterface1D\fP ()"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBgetKeyRange\fP (bool &foundRange, \fBQCP::SignDomain\fP inSignDomain=\fBQCP::sdBoth\fP) const =0"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBgetValueRange\fP (bool &foundRange, \fBQCP::SignDomain\fP inSignDomain=\fBQCP::sdBoth\fP, const \fBQCPRange\fP &inKeyRange=\fBQCPRange\fP()) const =0"
.br
.ti -1c
.RI "void \fBcoordsToPixels\fP (double key, double value, double &x, double &y) const"
.br
.ti -1c
.RI "const QPointF \fBcoordsToPixels\fP (double key, double value) const"
.br
.ti -1c
.RI "void \fBpixelsToCoords\fP (double x, double y, double &key, double &value) const"
.br
.ti -1c
.RI "void \fBpixelsToCoords\fP (const QPointF &pixelPos, double &key, double &value) const"
.br
.ti -1c
.RI "void \fBrescaleAxes\fP (bool onlyEnlarge=false) const"
.br
.ti -1c
.RI "void \fBrescaleKeyAxis\fP (bool onlyEnlarge=false) const"
.br
.ti -1c
.RI "void \fBrescaleValueAxis\fP (bool onlyEnlarge=false, bool inKeyRange=false) const"
.br
.ti -1c
.RI "bool \fBaddToLegend\fP (\fBQCPLegend\fP *legend)"
.br
.ti -1c
.RI "bool \fBaddToLegend\fP ()"
.br
.ti -1c
.RI "bool \fBremoveFromLegend\fP (\fBQCPLegend\fP *legend) const"
.br
.ti -1c
.RI "bool \fBremoveFromLegend\fP () const"
.br
.in -1c

Public Member Functions inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "\fBQCPLayerable\fP (\fBQCustomPlot\fP *plot, QString targetLayer=QString(), \fBQCPLayerable\fP *\fBparentLayerable\fP=0)"
.br
.ti -1c
.RI "bool \fBvisible\fP () const"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBparentPlot\fP () const"
.br
.ti -1c
.RI "\fBQCPLayerable\fP * \fBparentLayerable\fP () const"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBlayer\fP () const"
.br
.ti -1c
.RI "bool \fBantialiased\fP () const"
.br
.ti -1c
.RI "void \fBsetVisible\fP (bool on)"
.br
.ti -1c
.RI "Q_SLOT bool \fBsetLayer\fP (\fBQCPLayer\fP *layer)"
.br
.ti -1c
.RI "bool \fBsetLayer\fP (const QString &layerName)"
.br
.ti -1c
.RI "void \fBsetAntialiased\fP (bool enabled)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const"
.br
.ti -1c
.RI "bool \fBrealVisibility\fP () const"
.br
.in -1c
.in +1c
.ti -1c
.RI "virtual int \fBdataCount\fP () const =0"
.br
.ti -1c
.RI "virtual double \fBdataMainKey\fP (int index) const =0"
.br
.ti -1c
.RI "virtual double \fBdataSortKey\fP (int index) const =0"
.br
.ti -1c
.RI "virtual double \fBdataMainValue\fP (int index) const =0"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBdataValueRange\fP (int index) const =0"
.br
.ti -1c
.RI "virtual QPointF \fBdataPixelPosition\fP (int index) const =0"
.br
.ti -1c
.RI "virtual bool \fBsortKeyIsMainKey\fP () const =0"
.br
.ti -1c
.RI "virtual \fBQCPDataSelection\fP \fBselectTestRect\fP (const QRectF &rect, bool onlySelectable) const =0"
.br
.ti -1c
.RI "virtual int \fBfindBegin\fP (double sortKey, bool expandedRange=true) const =0"
.br
.ti -1c
.RI "virtual int \fBfindEnd\fP (double sortKey, bool expandedRange=true) const =0"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdrawLegendIcon\fP (\fBQCPPainter\fP *painter, const QRectF &rect) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdrawStatisticalBox\fP (\fBQCPPainter\fP *painter, QCPStatisticalBoxDataContainer::const_iterator it, const \fBQCPScatterStyle\fP &outlierStyle) const"
.br
.ti -1c
.RI "void \fBgetVisibleDataBounds\fP (QCPStatisticalBoxDataContainer::const_iterator &begin, QCPStatisticalBoxDataContainer::const_iterator &end) const"
.br
.ti -1c
.RI "QRectF \fBgetQuartileBox\fP (QCPStatisticalBoxDataContainer::const_iterator it) const"
.br
.ti -1c
.RI "QVector< QLineF > \fBgetWhiskerBackboneLines\fP (QCPStatisticalBoxDataContainer::const_iterator it) const"
.br
.ti -1c
.RI "QVector< QLineF > \fBgetWhiskerBarLines\fP (QCPStatisticalBoxDataContainer::const_iterator it) const"
.br
.in -1c

Protected Member Functions inherited from \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP
.in +1c
.ti -1c
.RI "void \fBgetDataSegments\fP (QList< \fBQCPDataRange\fP > &selectedSegments, QList< \fBQCPDataRange\fP > &unselectedSegments) const"
.br
.ti -1c
.RI "void \fBdrawPolyline\fP (\fBQCPPainter\fP *painter, const QVector< QPointF > &lineData) const"
.br
.in -1c

Protected Member Functions inherited from \fBQCPAbstractPlottable\fP
.in +1c
.ti -1c
.RI "virtual QRect \fBclipRect\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter) Q_DECL_OVERRIDE=0"
.br
.ti -1c
.RI "virtual \fBQCP::Interaction\fP \fBselectionCategory\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBselectEvent\fP (QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdeselectEvent\fP (bool *selectionStateChanged) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdrawLegendIcon\fP (\fBQCPPainter\fP *painter, const QRectF &rect) const =0"
.br
.ti -1c
.RI "void \fBapplyFillAntialiasingHint\fP (\fBQCPPainter\fP *painter) const"
.br
.ti -1c
.RI "void \fBapplyScattersAntialiasingHint\fP (\fBQCPPainter\fP *painter) const"
.br
.in -1c

Protected Member Functions inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "virtual void \fBparentPlotInitialized\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "virtual \fBQCP::Interaction\fP \fBselectionCategory\fP () const"
.br
.ti -1c
.RI "virtual QRect \fBclipRect\fP () const"
.br
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const =0"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter)=0"
.br
.ti -1c
.RI "virtual void \fBselectEvent\fP (QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBdeselectEvent\fP (bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBmousePressEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBmouseMoveEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseReleaseEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseDoubleClickEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBwheelEvent\fP (QWheelEvent *event)"
.br
.ti -1c
.RI "void \fBinitializeParentPlot\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "void \fBsetParentLayerable\fP (\fBQCPLayerable\fP *\fBparentLayerable\fP)"
.br
.ti -1c
.RI "bool \fBmoveToLayer\fP (\fBQCPLayer\fP *layer, bool prepend)"
.br
.ti -1c
.RI "void \fBapplyAntialiasingHint\fP (\fBQCPPainter\fP *painter, bool localAntialiased, \fBQCP::AntialiasedElement\fP overrideElement) const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "double \fBmWidth\fP"
.br
.ti -1c
.RI "double \fBmWhiskerWidth\fP"
.br
.ti -1c
.RI "QPen \fBmWhiskerPen\fP"
.br
.ti -1c
.RI "QPen \fBmWhiskerBarPen\fP"
.br
.ti -1c
.RI "bool \fBmWhiskerAntialiased\fP"
.br
.ti -1c
.RI "QPen \fBmMedianPen\fP"
.br
.ti -1c
.RI "\fBQCPScatterStyle\fP \fBmOutlierStyle\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP
.in +1c
.ti -1c
.RI "QSharedPointer< \fBQCPDataContainer\fP< \fBQCPStatisticalBoxData\fP > > \fBmDataContainer\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPAbstractPlottable\fP
.in +1c
.ti -1c
.RI "QString \fBmName\fP"
.br
.ti -1c
.RI "bool \fBmAntialiasedFill\fP"
.br
.ti -1c
.RI "bool \fBmAntialiasedScatters\fP"
.br
.ti -1c
.RI "QPen \fBmPen\fP"
.br
.ti -1c
.RI "QBrush \fBmBrush\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPAxis\fP > \fBmKeyAxis\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPAxis\fP > \fBmValueAxis\fP"
.br
.ti -1c
.RI "\fBQCP::SelectionType\fP \fBmSelectable\fP"
.br
.ti -1c
.RI "\fBQCPDataSelection\fP \fBmSelection\fP"
.br
.ti -1c
.RI "\fBQCPSelectionDecorator\fP * \fBmSelectionDecorator\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "bool \fBmVisible\fP"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBmParentPlot\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPLayerable\fP > \fBmParentLayerable\fP"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBmLayer\fP"
.br
.ti -1c
.RI "bool \fBmAntialiased\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBQCustomPlot\fP"
.br
.ti -1c
.RI "class \fBQCPLegend\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Signals inherited from \fBQCPAbstractPlottable\fP
.in +1c
.ti -1c
.RI "void \fBselectionChanged\fP (bool \fBselected\fP)"
.br
.ti -1c
.RI "void \fBselectionChanged\fP (const \fBQCPDataSelection\fP &\fBselection\fP)"
.br
.ti -1c
.RI "void \fBselectableChanged\fP (\fBQCP::SelectionType\fP selectable)"
.br
.in -1c

Signals inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "void \fBlayerChanged\fP (\fBQCPLayer\fP *newLayer)"
.br
.in -1c
.SH "Detailed Description"
.PP 
A plottable representing a single statistical box in a plot\&. 


.PP
To plot data, assign it with the \fBsetData\fP or \fBaddData\fP functions\&. Alternatively, you can also access and modify the data via the \fBdata\fP method, which returns a pointer to the internal \fBQCPStatisticalBoxDataContainer\fP\&.
.PP
Additionally each data point can itself have a list of outliers, drawn as scatter points at the key coordinate of the respective statistical box data point\&. They can either be set by using the respective \fBaddData\fP method or accessing the individual data points through \fBdata\fP, and setting the \fCQVector<double> outliers\fP of the data points directly\&.
.SH "Changing the appearance"
.PP
The appearance of each data point box, ranging from the lower to the upper quartile, is controlled via \fBsetPen\fP and \fBsetBrush\fP\&. You may change the width of the boxes with \fBsetWidth\fP in plot coordinates\&.
.PP
Each data point's visual representation also consists of two whiskers\&. Whiskers are the lines which reach from the upper quartile to the maximum, and from the lower quartile to the minimum\&. The appearance of the whiskers can be modified with: \fBsetWhiskerPen\fP, \fBsetWhiskerBarPen\fP, \fBsetWhiskerWidth\fP\&. The whisker width is the width of the bar perpendicular to the whisker at the top (for maximum) and bottom (for minimum)\&. If the whisker pen is changed, make sure to set the \fCcapStyle\fP to \fCQt::FlatCap\fP\&. Otherwise the backbone line might exceed the whisker bars by a few pixels due to the pen cap being not perfectly flat\&.
.PP
The median indicator line inside the box has its own pen, \fBsetMedianPen\fP\&.
.PP
The outlier data points are drawn as normal scatter points\&. Their look can be controlled with \fBsetOutlierStyle\fP
.SH "Usage"
.PP
Like all data representing objects in \fBQCustomPlot\fP, the \fBQCPStatisticalBox\fP is a plottable (\fBQCPAbstractPlottable\fP)\&. So the plottable-interface of \fBQCustomPlot\fP applies (\fBQCustomPlot::plottable\fP, \fBQCustomPlot::removePlottable\fP, etc\&.)
.PP
Usually, you first create an instance: 
.PP
.nf

.fi
.PP
 which registers it with the \fBQCustomPlot\fP instance of the passed axes\&. Note that this \fBQCustomPlot\fP instance takes ownership of the plottable, so do not delete it manually but use \fBQCustomPlot::removePlottable()\fP instead\&. The newly created plottable can be modified, e\&.g\&.: 
.PP
.nf

.fi
.PP
 
.PP
Definition at line \fB5602\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPStatisticalBox::QCPStatisticalBox (\fBQCPAxis\fP * keyAxis, \fBQCPAxis\fP * valueAxis)\fC [explicit]\fP"
Constructs a statistical box which uses \fIkeyAxis\fP as its key axis ('x') and \fIvalueAxis\fP as its value axis ('y')\&. \fIkeyAxis\fP and \fIvalueAxis\fP must reside in the same \fBQCustomPlot\fP instance and not have the same orientation\&. If either of these restrictions is violated, a corresponding message is printed to the debug output (qDebug), the construction is not aborted, though\&.
.PP
The created \fBQCPStatisticalBox\fP is automatically registered with the \fBQCustomPlot\fP instance inferred from \fIkeyAxis\fP\&. This \fBQCustomPlot\fP instance takes ownership of the \fBQCPStatisticalBox\fP, so do not delete it manually but use \fBQCustomPlot::removePlottable()\fP instead\&. 
.PP
Definition at line \fB24465\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void QCPStatisticalBox::addData (const QVector< double > & keys, const QVector< double > & minimum, const QVector< double > & lowerQuartile, const QVector< double > & median, const QVector< double > & upperQuartile, const QVector< double > & maximum, bool alreadySorted = \fCfalse\fP)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Adds the provided points in \fIkeys\fP, \fIminimum\fP, \fIlowerQuartile\fP, \fImedian\fP, \fIupperQuartile\fP and \fImaximum\fP to the current data\&. The provided vectors should have equal length\&. Else, the number of added points will be the size of the smallest vector\&.
.PP
If you can guarantee that the passed data points are sorted by \fIkeys\fP in ascending order, you can set \fIalreadySorted\fP to true, to improve performance by saving a sorting run\&.
.PP
Alternatively, you can also access and modify the data directly via the \fBdata\fP method, which returns a pointer to the internal data container\&. 
.PP
Definition at line \fB24611\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPStatisticalBox::addData (double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum, const QVector< double > & outliers = \fCQVector<double>()\fP)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Adds the provided data point as \fIkey\fP, \fIminimum\fP, \fIlowerQuartile\fP, \fImedian\fP, \fIupperQuartile\fP and \fImaximum\fP to the current data\&.
.PP
Alternatively, you can also access and modify the data directly via the \fBdata\fP method, which returns a pointer to the internal data container\&. 
.PP
Definition at line \fB24644\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QSharedPointer< \fBQCPStatisticalBoxDataContainer\fP > QCPStatisticalBox::data () const\fC [inline]\fP"
Returns a shared pointer to the internal data storage of type \fBQCPStatisticalBoxDataContainer\fP\&. You may use it to directly manipulate the data, which may be more convenient and faster than using the regular \fBsetData\fP or \fBaddData\fP methods\&. 
.PP
Definition at line \fB5618\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPStatisticalBox::draw (\fBQCPPainter\fP * painter)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Implements \fBQCPAbstractPlottable\fP\&.
.PP
Definition at line \fB24744\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPStatisticalBox::drawLegendIcon (\fBQCPPainter\fP * painter, const QRectF & rect) const\fC [protected]\fP, \fC [virtual]\fP"

.PP
Implements \fBQCPAbstractPlottable\fP\&.
.PP
Definition at line \fB24802\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPStatisticalBox::drawStatisticalBox (\fBQCPPainter\fP * painter, QCPStatisticalBoxDataContainer::const_iterator it, const \fBQCPScatterStyle\fP & outlierStyle) const\fC [protected]\fP, \fC [virtual]\fP"
Draws the graphical representation of a single statistical box with the data given by the iterator \fIit\fP with the provided \fIpainter\fP\&.
.PP
If the statistical box has a set of outlier data points, they are drawn with \fIoutlierStyle\fP\&.
.PP
\fBSee also\fP
.RS 4
getQuartileBox, getWhiskerBackboneLines, getWhiskerBarLines 
.RE
.PP

.PP
Definition at line \fB24821\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPRange\fP QCPStatisticalBox::getKeyRange (bool & foundRange, \fBQCP::SignDomain\fP inSignDomain = \fC\fBQCP::sdBoth\fP\fP) const\fC [virtual]\fP"
Returns the coordinate range that all data in this plottable span in the key axis dimension\&. For logarithmic plots, one can set \fIinSignDomain\fP to either \fBQCP::sdNegative\fP or \fBQCP::sdPositive\fP in order to restrict the returned range to that sign domain\&. E\&.g\&. when only negative range is wanted, set \fIinSignDomain\fP to \fBQCP::sdNegative\fP and all positive points will be ignored for range calculation\&. For no restriction, just set \fIinSignDomain\fP to \fBQCP::sdBoth\fP (default)\&. \fIfoundRange\fP is an output parameter that indicates whether a range could be found or not\&. If this is false, you shouldn't use the returned range (e\&.g\&. no points in data)\&.
.PP
Note that \fIfoundRange\fP is not the same as \fBQCPRange::validRange\fP, since the range returned by this function may have size zero (e\&.g\&. when there is only one data point)\&. In this case \fIfoundRange\fP would return true, but the returned range is not a valid range in terms of \fBQCPRange::validRange\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBrescaleAxes\fP, \fBgetValueRange\fP 
.RE
.PP

.PP
Implements \fBQCPAbstractPlottable\fP\&.
.PP
Definition at line \fB24723\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QRectF QCPStatisticalBox::getQuartileBox (QCPStatisticalBoxDataContainer::const_iterator it) const\fC [protected]\fP"

.PP
Definition at line \fB24880\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPRange\fP QCPStatisticalBox::getValueRange (bool & foundRange, \fBQCP::SignDomain\fP inSignDomain = \fC\fBQCP::sdBoth\fP\fP, const \fBQCPRange\fP & inKeyRange = \fC\fBQCPRange\fP()\fP) const\fC [virtual]\fP"
Returns the coordinate range that the data points in the specified key range (\fIinKeyRange\fP) span in the value axis dimension\&. For logarithmic plots, one can set \fIinSignDomain\fP to either \fBQCP::sdNegative\fP or \fBQCP::sdPositive\fP in order to restrict the returned range to that sign domain\&. E\&.g\&. when only negative range is wanted, set \fIinSignDomain\fP to \fBQCP::sdNegative\fP and all positive points will be ignored for range calculation\&. For no restriction, just set \fIinSignDomain\fP to \fBQCP::sdBoth\fP (default)\&. \fIfoundRange\fP is an output parameter that indicates whether a range could be found or not\&. If this is false, you shouldn't use the returned range (e\&.g\&. no points in data)\&.
.PP
If \fIinKeyRange\fP has both lower and upper bound set to zero (is equal to \fC\fBQCPRange()\fP\fP), all data points are considered, without any restriction on the keys\&.
.PP
Note that \fIfoundRange\fP is not the same as \fBQCPRange::validRange\fP, since the range returned by this function may have size zero (e\&.g\&. when there is only one data point)\&. In this case \fIfoundRange\fP would return true, but the returned range is not a valid range in terms of \fBQCPRange::validRange\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBrescaleAxes\fP, \fBgetKeyRange\fP 
.RE
.PP

.PP
Implements \fBQCPAbstractPlottable\fP\&.
.PP
Definition at line \fB24738\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPStatisticalBox::getVisibleDataBounds (QCPStatisticalBoxDataContainer::const_iterator & begin, QCPStatisticalBoxDataContainer::const_iterator & end) const\fC [protected]\fP"

.PP
Definition at line \fB24860\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QVector< QLineF > QCPStatisticalBox::getWhiskerBackboneLines (QCPStatisticalBoxDataContainer::const_iterator it) const\fC [protected]\fP"

.PP
Definition at line \fB24896\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QVector< QLineF > QCPStatisticalBox::getWhiskerBarLines (QCPStatisticalBoxDataContainer::const_iterator it) const\fC [protected]\fP"

.PP
Definition at line \fB24911\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QPen QCPStatisticalBox::medianPen () const\fC [inline]\fP"

.PP
Definition at line \fB5624\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPScatterStyle\fP QCPStatisticalBox::outlierStyle () const\fC [inline]\fP"

.PP
Definition at line \fB5625\fP of file \fBqcustomplot\&.h\fP\&.
.SS "double QCPStatisticalBox::selectTest (const QPointF & pos, bool onlySelectable, QVariant * details = \fC0\fP) const\fC [virtual]\fP"
Implements a point-selection algorithm assuming the data (accessed via the 1D data interface) is point-like\&. Most subclasses will want to reimplement this method again, to provide a more accurate hit test based on the true data visualization geometry\&.
.PP
\\seebaseclassmethod 
.PP
Reimplemented from \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP\&.
.PP
Definition at line \fB24673\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPDataSelection\fP QCPStatisticalBox::selectTestRect (const QRectF & rect, bool onlySelectable) const\fC [virtual]\fP"

.PP
Returns a data selection containing all the data points of this plottable which are contained (or hit by) \fIrect\fP\&. This is used mainly in the selection rect interaction for data selection (\fBdata selection mechanism\fP)\&.
.PP
If \fIonlySelectable\fP is true, an empty \fBQCPDataSelection\fP is returned if this plottable is not selectable (i\&.e\&. if \fBQCPAbstractPlottable::setSelectable\fP is \fBQCP::stNone\fP)\&.
.PP
\fBNote\fP
.RS 4
\fIrect\fP must be a normalized rect (positive or zero width and height)\&. This is especially important when using the rect of \fBQCPSelectionRect::accepted\fP, which is not necessarily normalized\&. Use \fCQRect::normalized()\fP when passing a rect which might not be normalized\&.   
.RE
.PP

.PP
Reimplemented from \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP\&.
.PP
Definition at line \fB24652\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPStatisticalBox::setData (const QVector< double > & keys, const QVector< double > & minimum, const QVector< double > & lowerQuartile, const QVector< double > & median, const QVector< double > & upperQuartile, const QVector< double > & maximum, bool alreadySorted = \fCfalse\fP)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Replaces the current data with the provided points in \fIkeys\fP, \fIminimum\fP, \fIlowerQuartile\fP, \fImedian\fP, \fIupperQuartile\fP and \fImaximum\fP\&. The provided vectors should have equal length\&. Else, the number of added points will be the size of the smallest vector\&.
.PP
If you can guarantee that the passed data points are sorted by \fIkeys\fP in ascending order, you can set \fIalreadySorted\fP to true, to improve performance by saving a sorting run\&.
.PP
\fBSee also\fP
.RS 4
\fBaddData\fP 
.RE
.PP

.PP
Definition at line \fB24510\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPStatisticalBox::setData (QSharedPointer< \fBQCPStatisticalBoxDataContainer\fP > data)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Replaces the current data container with the provided \fIdata\fP container\&.
.PP
Since a QSharedPointer is used, multiple QCPStatisticalBoxes may share the same data container safely\&. Modifying the data in the container will then affect all statistical boxes that share the container\&. Sharing can be achieved by simply exchanging the data containers wrapped in shared pointers: 
.PP
.nf

.fi
.PP
.PP
If you do not wish to share containers, but create a copy from an existing container, rather use the \fBQCPDataContainer<DataType>::set\fP method on the statistical box data container directly: 
.PP
.nf

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBaddData\fP 
.RE
.PP

.PP
Definition at line \fB24495\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPStatisticalBox::setMedianPen (const QPen & pen)"
Sets the pen used for drawing the median indicator line inside the statistical boxes\&. 
.PP
Definition at line \fB24583\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPStatisticalBox::setOutlierStyle (const \fBQCPScatterStyle\fP & style)"
Sets the appearance of the outlier data points\&.
.PP
Outliers can be specified with the method \fBaddData(double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum, const QVector<double> &outliers)\fP 
.PP
Definition at line \fB24594\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPStatisticalBox::setWhiskerAntialiased (bool enabled)"
Sets whether the statistical boxes whiskers are drawn with antialiasing or not\&.
.PP
Note that antialiasing settings may be overridden by \fBQCustomPlot::setAntialiasedElements\fP and \fBQCustomPlot::setNotAntialiasedElements\fP\&. 
.PP
Definition at line \fB24575\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPStatisticalBox::setWhiskerBarPen (const QPen & pen)"
Sets the pen used for drawing the whisker bars\&. Those are the lines parallel to the key axis at each end of the whisker backbone\&.
.PP
Whiskers are the lines which reach from the upper quartile to the maximum, and from the lower quartile to the minimum\&.
.PP
\fBSee also\fP
.RS 4
\fBsetWhiskerPen\fP 
.RE
.PP

.PP
Definition at line \fB24564\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPStatisticalBox::setWhiskerPen (const QPen & pen)"
Sets the pen used for drawing the whisker backbone\&.
.PP
Whiskers are the lines which reach from the upper quartile to the maximum, and from the lower quartile to the minimum\&.
.PP
Make sure to set the \fCcapStyle\fP of the passed \fIpen\fP to \fCQt::FlatCap\fP\&. Otherwise the backbone line might exceed the whisker bars by a few pixels due to the pen cap being not perfectly flat\&.
.PP
\fBSee also\fP
.RS 4
\fBsetWhiskerBarPen\fP 
.RE
.PP

.PP
Definition at line \fB24550\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPStatisticalBox::setWhiskerWidth (double width)"
Sets the width of the whiskers in key coordinates\&.
.PP
Whiskers are the lines which reach from the upper quartile to the maximum, and from the lower quartile to the minimum\&.
.PP
\fBSee also\fP
.RS 4
\fBsetWidth\fP 
.RE
.PP

.PP
Definition at line \fB24534\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPStatisticalBox::setWidth (double width)"
Sets the width of the boxes in key coordinates\&.
.PP
\fBSee also\fP
.RS 4
\fBsetWhiskerWidth\fP 
.RE
.PP

.PP
Definition at line \fB24521\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPStatisticalBox::whiskerAntialiased () const\fC [inline]\fP"

.PP
Definition at line \fB5623\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPStatisticalBox::whiskerBarPen () const\fC [inline]\fP"

.PP
Definition at line \fB5622\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPStatisticalBox::whiskerPen () const\fC [inline]\fP"

.PP
Definition at line \fB5621\fP of file \fBqcustomplot\&.h\fP\&.
.SS "double QCPStatisticalBox::whiskerWidth () const\fC [inline]\fP"

.PP
Definition at line \fB5620\fP of file \fBqcustomplot\&.h\fP\&.
.SS "double QCPStatisticalBox::width () const\fC [inline]\fP"

.PP
Definition at line \fB5619\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBQCPLegend\fP\fC [friend]\fP"

.PP
Definition at line \fB5671\fP of file \fBqcustomplot\&.h\fP\&.
.SS "friend class \fBQCustomPlot\fP\fC [friend]\fP"

.PP
Definition at line \fB5670\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "QPen QCPStatisticalBox::mMedianPen\fC [protected]\fP"

.PP
Definition at line \fB5654\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPScatterStyle\fP QCPStatisticalBox::mOutlierStyle\fC [protected]\fP"

.PP
Definition at line \fB5655\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPStatisticalBox::mWhiskerAntialiased\fC [protected]\fP"

.PP
Definition at line \fB5653\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPStatisticalBox::mWhiskerBarPen\fC [protected]\fP"

.PP
Definition at line \fB5652\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPStatisticalBox::mWhiskerPen\fC [protected]\fP"

.PP
Definition at line \fB5652\fP of file \fBqcustomplot\&.h\fP\&.
.SS "double QCPStatisticalBox::mWhiskerWidth\fC [protected]\fP"

.PP
Definition at line \fB5651\fP of file \fBqcustomplot\&.h\fP\&.
.SS "double QCPStatisticalBox::mWidth\fC [protected]\fP"

.PP
Definition at line \fB5650\fP of file \fBqcustomplot\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OmronPID from the source code\&.
