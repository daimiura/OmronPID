.TH "QCPColorGradient" 3 "Wed Mar 15 2023" "OmronPID" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPColorGradient \- Defines a color gradient for use with e\&.g\&. \fBQCPColorMap\fP\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBColorInterpolation\fP { \fBciRGB\fP, \fBciHSV\fP }"
.br
.ti -1c
.RI "enum \fBGradientPreset\fP { \fBgpGrayscale\fP, \fBgpHot\fP, \fBgpCold\fP, \fBgpNight\fP, \fBgpCandy\fP, \fBgpGeography\fP, \fBgpIon\fP, \fBgpThermal\fP, \fBgpPolar\fP, \fBgpSpectrum\fP, \fBgpJet\fP, \fBgpHues\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPColorGradient\fP ()"
.br
.ti -1c
.RI "\fBQCPColorGradient\fP (\fBGradientPreset\fP preset)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBQCPColorGradient\fP &other) const"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBQCPColorGradient\fP &other) const"
.br
.ti -1c
.RI "int \fBlevelCount\fP () const"
.br
.ti -1c
.RI "QMap< double, QColor > \fBcolorStops\fP () const"
.br
.ti -1c
.RI "\fBColorInterpolation\fP \fBcolorInterpolation\fP () const"
.br
.ti -1c
.RI "bool \fBperiodic\fP () const"
.br
.ti -1c
.RI "void \fBsetLevelCount\fP (int n)"
.br
.ti -1c
.RI "void \fBsetColorStops\fP (const QMap< double, QColor > &colorStops)"
.br
.ti -1c
.RI "void \fBsetColorStopAt\fP (double position, const QColor &color)"
.br
.ti -1c
.RI "void \fBsetColorInterpolation\fP (\fBColorInterpolation\fP interpolation)"
.br
.ti -1c
.RI "void \fBsetPeriodic\fP (bool enabled)"
.br
.ti -1c
.RI "void \fBcolorize\fP (const double *data, const \fBQCPRange\fP &range, QRgb *scanLine, int n, int dataIndexFactor=1, bool logarithmic=false)"
.br
.ti -1c
.RI "void \fBcolorize\fP (const double *data, const unsigned char *alpha, const \fBQCPRange\fP &range, QRgb *scanLine, int n, int dataIndexFactor=1, bool logarithmic=false)"
.br
.ti -1c
.RI "QRgb \fBcolor\fP (double position, const \fBQCPRange\fP &range, bool logarithmic=false)"
.br
.ti -1c
.RI "void \fBloadPreset\fP (\fBGradientPreset\fP preset)"
.br
.ti -1c
.RI "void \fBclearColorStops\fP ()"
.br
.ti -1c
.RI "\fBQCPColorGradient\fP \fBinverted\fP () const"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "bool \fBstopsUseAlpha\fP () const"
.br
.ti -1c
.RI "void \fBupdateColorBuffer\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "int \fBmLevelCount\fP"
.br
.ti -1c
.RI "QMap< double, QColor > \fBmColorStops\fP"
.br
.ti -1c
.RI "\fBColorInterpolation\fP \fBmColorInterpolation\fP"
.br
.ti -1c
.RI "bool \fBmPeriodic\fP"
.br
.ti -1c
.RI "QVector< QRgb > \fBmColorBuffer\fP"
.br
.ti -1c
.RI "bool \fBmColorBufferInvalidated\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Defines a color gradient for use with e\&.g\&. \fBQCPColorMap\fP\&. 

This class describes a color gradient which can be used to encode data with color\&. For example, \fBQCPColorMap\fP and \fBQCPColorScale\fP have \fBsetGradient\fP methods which take an instance of this class\&. Colors are set with \fBsetColorStopAt(double position, const QColor &color)\fP with a \fIposition\fP from 0 to 1\&. In between these defined color positions, the color will be interpolated linearly either in RGB or HSV space, see \fBsetColorInterpolation\fP\&.
.PP
Alternatively, load one of the preset color gradients shown in the image below, with \fBloadPreset\fP, or by directly specifying the preset in the constructor\&.
.PP
Apart from red, green and blue components, the gradient also interpolates the alpha values of the configured color stops\&. This allows to display some portions of the data range as transparent in the plot\&.
.PP
.PP
The \fBQCPColorGradient(GradientPreset preset)\fP constructor allows directly converting a \fBGradientPreset\fP to a \fBQCPColorGradient\fP\&. This means that you can directly pass \fBGradientPreset\fP to all the \fIsetGradient\fP methods, e\&.g\&.: 
.PP
.nf

.fi
.PP
.PP
The total number of levels used in the gradient can be set with \fBsetLevelCount\fP\&. Whether the color gradient shall be applied periodically (wrapping around) to data values that lie outside the data range specified on the plottable instance can be controlled with \fBsetPeriodic\fP\&. 
.PP
Definition at line \fB4430\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQCPColorGradient::ColorInterpolation\fP"
Defines the color spaces in which color interpolation between gradient stops can be performed\&.
.PP
\fBSee also\fP
.RS 4
\fBsetColorInterpolation\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIciRGB \fP\fP
Color channels red, green and blue are linearly interpolated\&. 
.TP
\fB\fIciHSV \fP\fP
Color channels hue, saturation and value are linearly interpolated (The hue is interpolated over the shortest angle distance) 
.PP
Definition at line \fB4439\fP of file \fBqcustomplot\&.h\fP\&.
.SS "enum \fBQCPColorGradient::GradientPreset\fP"
Defines the available presets that can be loaded with \fBloadPreset\fP\&. See the documentation there for an image of the presets\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIgpGrayscale \fP\fP
Continuous lightness from black to white (suited for non-biased data representation) 
.TP
\fB\fIgpHot \fP\fP
Continuous lightness from black over firey colors to white (suited for non-biased data representation) 
.TP
\fB\fIgpCold \fP\fP
Continuous lightness from black over icey colors to white (suited for non-biased data representation) 
.TP
\fB\fIgpNight \fP\fP
Continuous lightness from black over weak blueish colors to white (suited for non-biased data representation) 
.TP
\fB\fIgpCandy \fP\fP
Blue over pink to white\&. 
.TP
\fB\fIgpGeography \fP\fP
Colors suitable to represent different elevations on geographical maps\&. 
.TP
\fB\fIgpIon \fP\fP
Half hue spectrum from black over purple to blue and finally green (creates banding illusion but allows more precise magnitude estimates) 
.TP
\fB\fIgpThermal \fP\fP
Colors suitable for thermal imaging, ranging from dark blue over purple to orange, yellow and white\&. 
.TP
\fB\fIgpPolar \fP\fP
Colors suitable to emphasize polarity around the center, with blue for negative, black in the middle and red for positive values\&. 
.TP
\fB\fIgpSpectrum \fP\fP
An approximation of the visible light spectrum (creates banding illusion but allows more precise magnitude estimates) 
.TP
\fB\fIgpJet \fP\fP
Hue variation similar to a spectrum, often used in numerical visualization (creates banding illusion but allows more precise magnitude estimates) 
.TP
\fB\fIgpHues \fP\fP
Full hue cycle, with highest and lowest color red (suitable for periodic data, such as angles and phases, see \fBsetPeriodic\fP) 
.PP
Definition at line \fB4448\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPColorGradient::QCPColorGradient ()"
Constructs a new, empty \fBQCPColorGradient\fP with no predefined color stops\&. You can add own color stops with \fBsetColorStopAt\fP\&.
.PP
The color level count is initialized to 350\&. 
.PP
Definition at line \fB15763\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QCPColorGradient::QCPColorGradient (\fBGradientPreset\fP preset)"
Constructs a new \fBQCPColorGradient\fP initialized with the colors and color interpolation according to \fIpreset\fP\&.
.PP
The color level count is initialized to 350\&. 
.PP
Definition at line \fB15778\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void QCPColorGradient::clearColorStops ()"
Clears all color stops\&.
.PP
\fBSee also\fP
.RS 4
\fBsetColorStops\fP, \fBsetColorStopAt\fP 
.RE
.PP

.PP
Definition at line \fB16230\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QRgb QCPColorGradient::color (double position, const \fBQCPRange\fP & range, bool logarithmic = \fCfalse\fP)"

.PP
Definition at line \fB16089\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBColorInterpolation\fP QCPColorGradient::colorInterpolation () const\fC [inline]\fP"

.PP
Definition at line \fB4471\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPColorGradient::colorize (const double * data, const \fBQCPRange\fP & range, QRgb * scanLine, int n, int dataIndexFactor = \fC1\fP, bool logarithmic = \fCfalse\fP)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
This method is used to quickly convert a \fIdata\fP array to colors\&. The colors will be output in the array \fIscanLine\fP\&. Both \fIdata\fP and \fIscanLine\fP must have the length \fIn\fP when passed to this function\&. The data range that shall be used for mapping the data value to the gradient is passed in \fIrange\fP\&. \fIlogarithmic\fP indicates whether the data values shall be mapped to colors logarithmically\&.
.PP
if \fIdata\fP actually contains 2D-data linearized via \fC[row*columnCount + column]\fP, you can set \fIdataIndexFactor\fP to \fCcolumnCount\fP to convert a column instead of a row of the data array, in \fIscanLine\fP\&. \fIscanLine\fP will remain a regular (1D) array\&. This works because \fIdata\fP is addressed \fCdata[i*dataIndexFactor]\fP\&.
.PP
Use the overloaded method to additionally provide alpha map data\&.
.PP
The QRgb values that are placed in \fIscanLine\fP have their r, g and b components premultiplied with alpha (see QImage::Format_ARGB32_Premultiplied)\&. 
.PP
Definition at line \fB15900\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorGradient::colorize (const double * data, const unsigned char * alpha, const \fBQCPRange\fP & range, QRgb * scanLine, int n, int dataIndexFactor = \fC1\fP, bool logarithmic = \fCfalse\fP)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Additionally to the other overload of \fBcolorize\fP, this method takes the array \fIalpha\fP, which has the same size and structure as \fIdata\fP and encodes the alpha information per data point\&.
.PP
The QRgb values that are placed in \fIscanLine\fP have their r, g and b components premultiplied with alpha (see QImage::Format_ARGB32_Premultiplied)\&. 
.PP
Definition at line \fB15974\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QMap< double, QColor > QCPColorGradient::colorStops () const\fC [inline]\fP"

.PP
Definition at line \fB4470\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPColorGradient\fP QCPColorGradient::inverted () const"
Returns an inverted gradient\&. The inverted gradient has all properties as this \fBQCPColorGradient\fP, but the order of the color stops is inverted\&.
.PP
\fBSee also\fP
.RS 4
\fBsetColorStops\fP, \fBsetColorStopAt\fP 
.RE
.PP

.PP
Definition at line \fB16242\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "int QCPColorGradient::levelCount () const\fC [inline]\fP"

.PP
Definition at line \fB4469\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPColorGradient::loadPreset (\fBGradientPreset\fP preset)"
Clears the current color stops and loads the specified \fIpreset\fP\&. A preset consists of predefined color stops and the corresponding color interpolation method\&.
.PP
The available presets are:  
.PP
Definition at line \fB16121\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPColorGradient::operator!= (const \fBQCPColorGradient\fP & other) const\fC [inline]\fP"

.PP
Definition at line \fB4466\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPColorGradient::operator== (const \fBQCPColorGradient\fP & other) const"

.PP
Definition at line \fB15789\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPColorGradient::periodic () const\fC [inline]\fP"

.PP
Definition at line \fB4472\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPColorGradient::setColorInterpolation (\fBQCPColorGradient::ColorInterpolation\fP interpolation)"
Sets whether the colors in between the configured color stops (see \fBsetColorStopAt\fP) shall be interpolated linearly in RGB or in HSV color space\&.
.PP
For example, a sweep in RGB space from red to green will have a muddy brown intermediate color, whereas in HSV space the intermediate color is yellow\&. 
.PP
Definition at line \fB15853\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorGradient::setColorStopAt (double position, const QColor & color)"
Sets the \fIcolor\fP the gradient will have at the specified \fIposition\fP (from 0 to 1)\&. In between these color stops, the color is interpolated according to \fBsetColorInterpolation\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBsetColorStops\fP, \fBclearColorStops\fP 
.RE
.PP

.PP
Definition at line \fB15840\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorGradient::setColorStops (const QMap< double, QColor > & colorStops)"
Sets at which positions from 0 to 1 which color shall occur\&. The positions are the keys, the colors are the values of the passed QMap \fIcolorStops\fP\&. In between these color stops, the color is interpolated according to \fBsetColorInterpolation\fP\&.
.PP
A more convenient way to create a custom gradient may be to clear all color stops with \fBclearColorStops\fP (or creating a new, empty \fBQCPColorGradient\fP) and then adding them one by one with \fBsetColorStopAt\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBclearColorStops\fP 
.RE
.PP

.PP
Definition at line \fB15828\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorGradient::setLevelCount (int n)"
Sets the number of discretization levels of the color gradient to \fIn\fP\&. The default is 350 which is typically enough to create a smooth appearance\&. The minimum number of levels is 2\&.
.PP
 
.PP
Definition at line \fB15803\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorGradient::setPeriodic (bool enabled)"
Sets whether data points that are outside the configured data range (e\&.g\&. \fBQCPColorMap::setDataRange\fP) are colored by periodically repeating the color gradient or whether they all have the same color, corresponding to the respective gradient boundary color\&.
.PP
.PP
As shown in the image above, gradients that have the same start and end color are especially suitable for a periodic gradient mapping, since they produce smooth color transitions throughout the color map\&. A preset that has this property is \fBgpHues\fP\&.
.PP
In practice, using periodic color gradients makes sense when the data corresponds to a periodic dimension, such as an angle or a phase\&. If this is not the case, the color encoding might become ambiguous, because multiple different data values are shown as the same color\&. 
.PP
Definition at line \fB15877\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPColorGradient::stopsUseAlpha () const\fC [protected]\fP"

.PP
Definition at line \fB16256\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorGradient::updateColorBuffer ()\fC [protected]\fP"

.PP
Definition at line \fB16271\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "QVector<QRgb> QCPColorGradient::mColorBuffer\fC [protected]\fP"

.PP
Definition at line \fB4497\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPColorGradient::mColorBufferInvalidated\fC [protected]\fP"

.PP
Definition at line \fB4498\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBColorInterpolation\fP QCPColorGradient::mColorInterpolation\fC [protected]\fP"

.PP
Definition at line \fB4493\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QMap<double, QColor> QCPColorGradient::mColorStops\fC [protected]\fP"

.PP
Definition at line \fB4492\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPColorGradient::mLevelCount\fC [protected]\fP"

.PP
Definition at line \fB4491\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPColorGradient::mPeriodic\fC [protected]\fP"

.PP
Definition at line \fB4494\fP of file \fBqcustomplot\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OmronPID from the source code\&.
