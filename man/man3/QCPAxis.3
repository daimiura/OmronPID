.TH "QCPAxis" 3 "Wed Mar 15 2023" "OmronPID" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPAxis \- Manages a single axis inside a \fBQCustomPlot\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBQCPLayerable\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBAxisType\fP { \fBatLeft\fP = 0x01, \fBatRight\fP = 0x02, \fBatTop\fP = 0x04, \fBatBottom\fP = 0x08 }"
.br
.ti -1c
.RI "enum \fBLabelSide\fP { \fBlsInside\fP, \fBlsOutside\fP }"
.br
.ti -1c
.RI "enum \fBScaleType\fP { \fBstLinear\fP, \fBstLogarithmic\fP }"
.br
.ti -1c
.RI "enum \fBSelectablePart\fP { \fBspNone\fP = 0, \fBspAxis\fP = 0x001, \fBspTickLabels\fP = 0x002, \fBspAxisLabel\fP = 0x004 }"
.br
.in -1c
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBrangeChanged\fP (const \fBQCPRange\fP &newRange)"
.br
.ti -1c
.RI "void \fBrangeChanged\fP (const \fBQCPRange\fP &newRange, const \fBQCPRange\fP &oldRange)"
.br
.ti -1c
.RI "void \fBscaleTypeChanged\fP (\fBQCPAxis::ScaleType\fP scaleType)"
.br
.ti -1c
.RI "void \fBselectionChanged\fP (const QCPAxis::SelectableParts &parts)"
.br
.ti -1c
.RI "void \fBselectableChanged\fP (const QCPAxis::SelectableParts &parts)"
.br
.in -1c

Signals inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "void \fBlayerChanged\fP (\fBQCPLayer\fP *newLayer)"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPAxis\fP (\fBQCPAxisRect\fP *parent, \fBAxisType\fP type)"
.br
.ti -1c
.RI "\fBAxisType\fP \fBaxisType\fP () const"
.br
.ti -1c
.RI "\fBQCPAxisRect\fP * \fBaxisRect\fP () const"
.br
.ti -1c
.RI "\fBScaleType\fP \fBscaleType\fP () const"
.br
.ti -1c
.RI "const \fBQCPRange\fP \fBrange\fP () const"
.br
.ti -1c
.RI "bool \fBrangeReversed\fP () const"
.br
.ti -1c
.RI "QSharedPointer< \fBQCPAxisTicker\fP > \fBticker\fP () const"
.br
.ti -1c
.RI "bool \fBticks\fP () const"
.br
.ti -1c
.RI "bool \fBtickLabels\fP () const"
.br
.ti -1c
.RI "int \fBtickLabelPadding\fP () const"
.br
.ti -1c
.RI "QFont \fBtickLabelFont\fP () const"
.br
.ti -1c
.RI "QColor \fBtickLabelColor\fP () const"
.br
.ti -1c
.RI "double \fBtickLabelRotation\fP () const"
.br
.ti -1c
.RI "\fBLabelSide\fP \fBtickLabelSide\fP () const"
.br
.ti -1c
.RI "QString \fBnumberFormat\fP () const"
.br
.ti -1c
.RI "int \fBnumberPrecision\fP () const"
.br
.ti -1c
.RI "QVector< double > \fBtickVector\fP () const"
.br
.ti -1c
.RI "QVector< QString > \fBtickVectorLabels\fP () const"
.br
.ti -1c
.RI "int \fBtickLengthIn\fP () const"
.br
.ti -1c
.RI "int \fBtickLengthOut\fP () const"
.br
.ti -1c
.RI "bool \fBsubTicks\fP () const"
.br
.ti -1c
.RI "int \fBsubTickLengthIn\fP () const"
.br
.ti -1c
.RI "int \fBsubTickLengthOut\fP () const"
.br
.ti -1c
.RI "QPen \fBbasePen\fP () const"
.br
.ti -1c
.RI "QPen \fBtickPen\fP () const"
.br
.ti -1c
.RI "QPen \fBsubTickPen\fP () const"
.br
.ti -1c
.RI "QFont \fBlabelFont\fP () const"
.br
.ti -1c
.RI "QColor \fBlabelColor\fP () const"
.br
.ti -1c
.RI "QString \fBlabel\fP () const"
.br
.ti -1c
.RI "int \fBlabelPadding\fP () const"
.br
.ti -1c
.RI "int \fBpadding\fP () const"
.br
.ti -1c
.RI "int \fBoffset\fP () const"
.br
.ti -1c
.RI "SelectableParts \fBselectedParts\fP () const"
.br
.ti -1c
.RI "SelectableParts \fBselectableParts\fP () const"
.br
.ti -1c
.RI "QFont \fBselectedTickLabelFont\fP () const"
.br
.ti -1c
.RI "QFont \fBselectedLabelFont\fP () const"
.br
.ti -1c
.RI "QColor \fBselectedTickLabelColor\fP () const"
.br
.ti -1c
.RI "QColor \fBselectedLabelColor\fP () const"
.br
.ti -1c
.RI "QPen \fBselectedBasePen\fP () const"
.br
.ti -1c
.RI "QPen \fBselectedTickPen\fP () const"
.br
.ti -1c
.RI "QPen \fBselectedSubTickPen\fP () const"
.br
.ti -1c
.RI "\fBQCPLineEnding\fP \fBlowerEnding\fP () const"
.br
.ti -1c
.RI "\fBQCPLineEnding\fP \fBupperEnding\fP () const"
.br
.ti -1c
.RI "\fBQCPGrid\fP * \fBgrid\fP () const"
.br
.ti -1c
.RI "Q_SLOT void \fBsetScaleType\fP (\fBQCPAxis::ScaleType\fP type)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetRange\fP (const \fBQCPRange\fP &range)"
.br
.ti -1c
.RI "void \fBsetRange\fP (double lower, double upper)"
.br
.ti -1c
.RI "void \fBsetRange\fP (double position, double size, Qt::AlignmentFlag alignment)"
.br
.ti -1c
.RI "void \fBsetRangeLower\fP (double lower)"
.br
.ti -1c
.RI "void \fBsetRangeUpper\fP (double upper)"
.br
.ti -1c
.RI "void \fBsetRangeReversed\fP (bool reversed)"
.br
.ti -1c
.RI "void \fBsetTicker\fP (QSharedPointer< \fBQCPAxisTicker\fP > \fBticker\fP)"
.br
.ti -1c
.RI "void \fBsetTicks\fP (bool show)"
.br
.ti -1c
.RI "void \fBsetTickLabels\fP (bool show)"
.br
.ti -1c
.RI "void \fBsetTickLabelPadding\fP (int padding)"
.br
.ti -1c
.RI "void \fBsetTickLabelFont\fP (const QFont &font)"
.br
.ti -1c
.RI "void \fBsetTickLabelColor\fP (const QColor &color)"
.br
.ti -1c
.RI "void \fBsetTickLabelRotation\fP (double degrees)"
.br
.ti -1c
.RI "void \fBsetTickLabelSide\fP (\fBLabelSide\fP side)"
.br
.ti -1c
.RI "void \fBsetNumberFormat\fP (const QString &formatCode)"
.br
.ti -1c
.RI "void \fBsetNumberPrecision\fP (int precision)"
.br
.ti -1c
.RI "void \fBsetTickLength\fP (int inside, int outside=0)"
.br
.ti -1c
.RI "void \fBsetTickLengthIn\fP (int inside)"
.br
.ti -1c
.RI "void \fBsetTickLengthOut\fP (int outside)"
.br
.ti -1c
.RI "void \fBsetSubTicks\fP (bool show)"
.br
.ti -1c
.RI "void \fBsetSubTickLength\fP (int inside, int outside=0)"
.br
.ti -1c
.RI "void \fBsetSubTickLengthIn\fP (int inside)"
.br
.ti -1c
.RI "void \fBsetSubTickLengthOut\fP (int outside)"
.br
.ti -1c
.RI "void \fBsetBasePen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetTickPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetSubTickPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetLabelFont\fP (const QFont &font)"
.br
.ti -1c
.RI "void \fBsetLabelColor\fP (const QColor &color)"
.br
.ti -1c
.RI "void \fBsetLabel\fP (const QString &str)"
.br
.ti -1c
.RI "void \fBsetLabelPadding\fP (int padding)"
.br
.ti -1c
.RI "void \fBsetPadding\fP (int padding)"
.br
.ti -1c
.RI "void \fBsetOffset\fP (int offset)"
.br
.ti -1c
.RI "void \fBsetSelectedTickLabelFont\fP (const QFont &font)"
.br
.ti -1c
.RI "void \fBsetSelectedLabelFont\fP (const QFont &font)"
.br
.ti -1c
.RI "void \fBsetSelectedTickLabelColor\fP (const QColor &color)"
.br
.ti -1c
.RI "void \fBsetSelectedLabelColor\fP (const QColor &color)"
.br
.ti -1c
.RI "void \fBsetSelectedBasePen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetSelectedTickPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetSelectedSubTickPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetSelectableParts\fP (const QCPAxis::SelectableParts &selectableParts)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetSelectedParts\fP (const QCPAxis::SelectableParts &selectedParts)"
.br
.ti -1c
.RI "void \fBsetLowerEnding\fP (const \fBQCPLineEnding\fP &ending)"
.br
.ti -1c
.RI "void \fBsetUpperEnding\fP (const \fBQCPLineEnding\fP &ending)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "Qt::Orientation \fBorientation\fP () const"
.br
.ti -1c
.RI "int \fBpixelOrientation\fP () const"
.br
.ti -1c
.RI "void \fBmoveRange\fP (double diff)"
.br
.ti -1c
.RI "void \fBscaleRange\fP (double factor)"
.br
.ti -1c
.RI "void \fBscaleRange\fP (double factor, double center)"
.br
.ti -1c
.RI "void \fBsetScaleRatio\fP (const \fBQCPAxis\fP *otherAxis, double ratio=1\&.0)"
.br
.ti -1c
.RI "void \fBrescale\fP (bool onlyVisiblePlottables=false)"
.br
.ti -1c
.RI "double \fBpixelToCoord\fP (double value) const"
.br
.ti -1c
.RI "double \fBcoordToPixel\fP (double value) const"
.br
.ti -1c
.RI "\fBSelectablePart\fP \fBgetPartAt\fP (const QPointF &pos) const"
.br
.ti -1c
.RI "QList< \fBQCPAbstractPlottable\fP * > \fBplottables\fP () const"
.br
.ti -1c
.RI "QList< \fBQCPGraph\fP * > \fBgraphs\fP () const"
.br
.ti -1c
.RI "QList< \fBQCPAbstractItem\fP * > \fBitems\fP () const"
.br
.in -1c

Public Member Functions inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "\fBQCPLayerable\fP (\fBQCustomPlot\fP *plot, QString targetLayer=QString(), \fBQCPLayerable\fP *\fBparentLayerable\fP=0)"
.br
.ti -1c
.RI "bool \fBvisible\fP () const"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBparentPlot\fP () const"
.br
.ti -1c
.RI "\fBQCPLayerable\fP * \fBparentLayerable\fP () const"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBlayer\fP () const"
.br
.ti -1c
.RI "bool \fBantialiased\fP () const"
.br
.ti -1c
.RI "void \fBsetVisible\fP (bool on)"
.br
.ti -1c
.RI "Q_SLOT bool \fBsetLayer\fP (\fBQCPLayer\fP *layer)"
.br
.ti -1c
.RI "bool \fBsetLayer\fP (const QString &layerName)"
.br
.ti -1c
.RI "void \fBsetAntialiased\fP (bool enabled)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const"
.br
.ti -1c
.RI "bool \fBrealVisibility\fP () const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBAxisType\fP \fBmarginSideToAxisType\fP (\fBQCP::MarginSide\fP side)"
.br
.ti -1c
.RI "static Qt::Orientation \fBorientation\fP (\fBAxisType\fP type)"
.br
.ti -1c
.RI "static \fBAxisType\fP \fBopposite\fP (\fBAxisType\fP type)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual int \fBcalculateMargin\fP ()"
.br
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCP::Interaction\fP \fBselectionCategory\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBselectEvent\fP (QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdeselectEvent\fP (bool *selectionStateChanged) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBmousePressEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBmouseMoveEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseReleaseEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBwheelEvent\fP (QWheelEvent *event)"
.br
.ti -1c
.RI "void \fBsetupTickVectors\fP ()"
.br
.ti -1c
.RI "QPen \fBgetBasePen\fP () const"
.br
.ti -1c
.RI "QPen \fBgetTickPen\fP () const"
.br
.ti -1c
.RI "QPen \fBgetSubTickPen\fP () const"
.br
.ti -1c
.RI "QFont \fBgetTickLabelFont\fP () const"
.br
.ti -1c
.RI "QFont \fBgetLabelFont\fP () const"
.br
.ti -1c
.RI "QColor \fBgetTickLabelColor\fP () const"
.br
.ti -1c
.RI "QColor \fBgetLabelColor\fP () const"
.br
.in -1c

Protected Member Functions inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "virtual void \fBparentPlotInitialized\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "virtual \fBQCP::Interaction\fP \fBselectionCategory\fP () const"
.br
.ti -1c
.RI "virtual QRect \fBclipRect\fP () const"
.br
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const =0"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter)=0"
.br
.ti -1c
.RI "virtual void \fBselectEvent\fP (QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBdeselectEvent\fP (bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBmousePressEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBmouseMoveEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseReleaseEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseDoubleClickEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBwheelEvent\fP (QWheelEvent *event)"
.br
.ti -1c
.RI "void \fBinitializeParentPlot\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "void \fBsetParentLayerable\fP (\fBQCPLayerable\fP *\fBparentLayerable\fP)"
.br
.ti -1c
.RI "bool \fBmoveToLayer\fP (\fBQCPLayer\fP *layer, bool prepend)"
.br
.ti -1c
.RI "void \fBapplyAntialiasingHint\fP (\fBQCPPainter\fP *painter, bool localAntialiased, \fBQCP::AntialiasedElement\fP overrideElement) const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBAxisType\fP \fBmAxisType\fP"
.br
.ti -1c
.RI "\fBQCPAxisRect\fP * \fBmAxisRect\fP"
.br
.ti -1c
.RI "int \fBmPadding\fP"
.br
.ti -1c
.RI "Qt::Orientation \fBmOrientation\fP"
.br
.ti -1c
.RI "SelectableParts \fBmSelectableParts\fP"
.br
.ti -1c
.RI "SelectableParts \fBmSelectedParts\fP"
.br
.ti -1c
.RI "QPen \fBmBasePen\fP"
.br
.ti -1c
.RI "QPen \fBmSelectedBasePen\fP"
.br
.ti -1c
.RI "QString \fBmLabel\fP"
.br
.ti -1c
.RI "QFont \fBmLabelFont\fP"
.br
.ti -1c
.RI "QFont \fBmSelectedLabelFont\fP"
.br
.ti -1c
.RI "QColor \fBmLabelColor\fP"
.br
.ti -1c
.RI "QColor \fBmSelectedLabelColor\fP"
.br
.ti -1c
.RI "bool \fBmTickLabels\fP"
.br
.ti -1c
.RI "QFont \fBmTickLabelFont\fP"
.br
.ti -1c
.RI "QFont \fBmSelectedTickLabelFont\fP"
.br
.ti -1c
.RI "QColor \fBmTickLabelColor\fP"
.br
.ti -1c
.RI "QColor \fBmSelectedTickLabelColor\fP"
.br
.ti -1c
.RI "int \fBmNumberPrecision\fP"
.br
.ti -1c
.RI "QLatin1Char \fBmNumberFormatChar\fP"
.br
.ti -1c
.RI "bool \fBmNumberBeautifulPowers\fP"
.br
.ti -1c
.RI "bool \fBmTicks\fP"
.br
.ti -1c
.RI "bool \fBmSubTicks\fP"
.br
.ti -1c
.RI "QPen \fBmTickPen\fP"
.br
.ti -1c
.RI "QPen \fBmSelectedTickPen\fP"
.br
.ti -1c
.RI "QPen \fBmSubTickPen\fP"
.br
.ti -1c
.RI "QPen \fBmSelectedSubTickPen\fP"
.br
.ti -1c
.RI "\fBQCPRange\fP \fBmRange\fP"
.br
.ti -1c
.RI "bool \fBmRangeReversed\fP"
.br
.ti -1c
.RI "\fBScaleType\fP \fBmScaleType\fP"
.br
.ti -1c
.RI "\fBQCPGrid\fP * \fBmGrid\fP"
.br
.ti -1c
.RI "\fBQCPAxisPainterPrivate\fP * \fBmAxisPainter\fP"
.br
.ti -1c
.RI "QSharedPointer< \fBQCPAxisTicker\fP > \fBmTicker\fP"
.br
.ti -1c
.RI "QVector< double > \fBmTickVector\fP"
.br
.ti -1c
.RI "QVector< QString > \fBmTickVectorLabels\fP"
.br
.ti -1c
.RI "QVector< double > \fBmSubTickVector\fP"
.br
.ti -1c
.RI "bool \fBmCachedMarginValid\fP"
.br
.ti -1c
.RI "int \fBmCachedMargin\fP"
.br
.ti -1c
.RI "bool \fBmDragging\fP"
.br
.ti -1c
.RI "\fBQCPRange\fP \fBmDragStartRange\fP"
.br
.ti -1c
.RI "QCP::AntialiasedElements \fBmAADragBackup\fP"
.br
.ti -1c
.RI "QCP::AntialiasedElements \fBmNotAADragBackup\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "bool \fBmVisible\fP"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBmParentPlot\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPLayerable\fP > \fBmParentLayerable\fP"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBmLayer\fP"
.br
.ti -1c
.RI "bool \fBmAntialiased\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBQCustomPlot\fP"
.br
.ti -1c
.RI "class \fBQCPGrid\fP"
.br
.ti -1c
.RI "class \fBQCPAxisRect\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Manages a single axis inside a \fBQCustomPlot\fP\&. 

Usually doesn't need to be instantiated externally\&. Access QCustomPlot's default four axes via \fBQCustomPlot::xAxis\fP (bottom), \fBQCustomPlot::yAxis\fP (left), \fBQCustomPlot::xAxis2\fP (top) and \fBQCustomPlot::yAxis2\fP (right)\&.
.PP
Axes are always part of an axis rect, see \fBQCPAxisRect\fP\&.  Naming convention of axis parts 
.br
  Overview of the spacings and paddings that define the geometry of an axis\&. The dashed gray line on the left represents the \fBQCustomPlot\fP widget border\&.
.PP
Each axis holds an instance of \fBQCPAxisTicker\fP which is used to generate the tick coordinates and tick labels\&. You can access the currently installed \fBticker\fP or set a new one (possibly one of the specialized subclasses, or your own subclass) via \fBsetTicker\fP\&. For details, see the documentation of \fBQCPAxisTicker\fP\&. 
.PP
Definition at line \fB1911\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQCPAxis::AxisType\fP"
Defines at which side of the axis rect the axis will appear\&. This also affects how the tick marks are drawn, on which side the labels are placed etc\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIatLeft \fP\fP
\fC0x01\fP Axis is vertical and on the left side of the axis rect 
.TP
\fB\fIatRight \fP\fP
\fC0x02\fP Axis is vertical and on the right side of the axis rect 
.TP
\fB\fIatTop \fP\fP
\fC0x04\fP Axis is horizontal and on the top side of the axis rect 
.TP
\fB\fIatBottom \fP\fP
\fC0x08\fP Axis is horizontal and on the bottom side of the axis rect 
.PP
Definition at line \fB1964\fP of file \fBqcustomplot\&.h\fP\&.
.SS "enum \fBQCPAxis::LabelSide\fP"
Defines on which side of the axis the tick labels (numbers) shall appear\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTickLabelSide\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIlsInside \fP\fP
Tick labels will be displayed inside the axis rect and clipped to the inner axis rect\&. 
.TP
\fB\fIlsOutside \fP\fP
Tick labels will be displayed outside the axis rect\&. 
.PP
Definition at line \fB1977\fP of file \fBqcustomplot\&.h\fP\&.
.SS "enum \fBQCPAxis::ScaleType\fP"
Defines the scale of an axis\&. 
.PP
\fBSee also\fP
.RS 4
\fBsetScaleType\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIstLinear \fP\fP
Linear scaling\&. 
.TP
\fB\fIstLogarithmic \fP\fP
Logarithmic scaling with correspondingly transformed axis coordinates (possibly also \fBsetTicker\fP to a \fBQCPAxisTickerLog\fP instance)\&. 
.PP
Definition at line \fB1985\fP of file \fBqcustomplot\&.h\fP\&.
.SS "enum \fBQCPAxis::SelectablePart\fP"
Defines the selectable parts of an axis\&. 
.PP
\fBSee also\fP
.RS 4
\fBsetSelectableParts\fP, \fBsetSelectedParts\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIspNone \fP\fP
None of the selectable parts\&. 
.TP
\fB\fIspAxis \fP\fP
The axis backbone and tick marks\&. 
.TP
\fB\fIspTickLabels \fP\fP
Tick labels (numbers) of this axis (as a whole, not individually) 
.TP
\fB\fIspAxisLabel \fP\fP
The axis label\&. 
.PP
Definition at line \fB1993\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPAxis::QCPAxis (\fBQCPAxisRect\fP * parent, \fBAxisType\fP type)\fC [explicit]\fP"
Constructs an Axis instance of Type \fItype\fP for the axis rect \fIparent\fP\&.
.PP
Usually it isn't necessary to instantiate axes directly, because you can let \fBQCustomPlot\fP create them for you with \fBQCPAxisRect::addAxis\fP\&. If you want to use own QCPAxis-subclasses however, create them manually and then inject them also via \fBQCPAxisRect::addAxis\fP\&. 
.PP
Definition at line \fB7499\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QCPAxis::~QCPAxis ()\fC [virtual]\fP"

.PP
Definition at line \fB7567\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void QCPAxis::applyDefaultAntialiasingHint (\fBQCPPainter\fP * painter) const\fC [protected]\fP, \fC [virtual]\fP"

.PP
Implements \fBQCPLayerable\fP\&.
.PP
Definition at line \fB8945\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPAxisRect\fP * QCPAxis::axisRect () const\fC [inline]\fP"

.PP
Definition at line \fB2007\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBAxisType\fP QCPAxis::axisType () const\fC [inline]\fP"

.PP
Definition at line \fB2006\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPAxis::basePen () const\fC [inline]\fP"

.PP
Definition at line \fB2028\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPAxis::calculateMargin ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line \fB9106\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "double QCPAxis::coordToPixel (double value) const"
Transforms \fIvalue\fP, in coordinates of the axis, to pixel coordinates of the \fBQCustomPlot\fP widget\&. 
.PP
Definition at line \fB8593\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::deselectEvent (bool * selectionStateChanged)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB8791\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::draw (\fBQCPPainter\fP * painter)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Implements \fBQCPLayerable\fP\&.
.PP
Definition at line \fB8956\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QPen QCPAxis::getBasePen () const\fC [protected]\fP"

.PP
Definition at line \fB9027\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QColor QCPAxis::getLabelColor () const\fC [protected]\fP"

.PP
Definition at line \fB9087\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QFont QCPAxis::getLabelFont () const\fC [protected]\fP"

.PP
Definition at line \fB9067\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPAxis::SelectablePart\fP QCPAxis::getPartAt (const QPointF & pos) const"
Returns the part of the axis that is hit by \fIpos\fP (in pixels)\&. The return value of this function is independent of the user-selectable parts defined with \fBsetSelectableParts\fP\&. Further, this function does not change the current selection state of the axis\&.
.PP
If the axis is not visible (\fBsetVisible\fP), this function always returns \fBspNone\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBsetSelectedParts\fP, \fBsetSelectableParts\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.PP
Definition at line \fB8651\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QPen QCPAxis::getSubTickPen () const\fC [protected]\fP"

.PP
Definition at line \fB9047\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QColor QCPAxis::getTickLabelColor () const\fC [protected]\fP"

.PP
Definition at line \fB9077\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QFont QCPAxis::getTickLabelFont () const\fC [protected]\fP"

.PP
Definition at line \fB9057\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QPen QCPAxis::getTickPen () const\fC [protected]\fP"

.PP
Definition at line \fB9037\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QList< \fBQCPGraph\fP * > QCPAxis::graphs () const"
Returns a list of all the graphs that have this axis as key or value axis\&.
.PP
\fBSee also\fP
.RS 4
\fBplottables\fP, \fBitems\fP 
.RE
.PP

.PP
Definition at line \fB8704\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPGrid\fP * QCPAxis::grid () const\fC [inline]\fP"
Returns the \fBQCPGrid\fP instance belonging to this axis\&. Access it to set details about the way the grid is displayed\&. 
.PP
Definition at line \fB2048\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QList< \fBQCPAbstractItem\fP * > QCPAxis::items () const"
Returns a list of all the items that are associated with this axis\&. An item is considered associated with an axis if at least one of its positions uses the axis as key or value axis\&.
.PP
\fBSee also\fP
.RS 4
\fBplottables\fP, \fBgraphs\fP 
.RE
.PP

.PP
Definition at line \fB8723\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QString QCPAxis::label () const\fC [inline]\fP"

.PP
Definition at line \fB2033\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QColor QCPAxis::labelColor () const\fC [inline]\fP"

.PP
Definition at line \fB2032\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QFont QCPAxis::labelFont () const\fC [inline]\fP"

.PP
Definition at line \fB2031\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPAxis::labelPadding () const"

.PP
Definition at line \fB7630\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPLineEnding\fP QCPAxis::lowerEnding () const"

.PP
Definition at line \fB7642\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPAxis::AxisType\fP QCPAxis::marginSideToAxisType (\fBQCP::MarginSide\fP side)\fC [static]\fP"
Transforms a margin side to the logically corresponding axis type\&. (\fBQCP::msLeft\fP to \fBQCPAxis::atLeft\fP, \fBQCP::msRight\fP to \fBQCPAxis::atRight\fP, etc\&.) 
.PP
Definition at line \fB8747\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::mouseMoveEvent (QMouseEvent * event, const QPointF & startPos)\fC [protected]\fP, \fC [virtual]\fP"
This event gets called when the user moves the mouse while holding a mouse button, after this layerable has become the mouse grabber by accepting the preceding \fBmousePressEvent\fP\&.
.PP
The current pixel position of the cursor on the \fBQCustomPlot\fP widget is accessible via \fCevent->pos()\fP\&. The parameter \fIstartPos\fP indicates the position where the initial \fBmousePressEvent\fP occured, that started the mouse interaction\&.
.PP
The default implementation does nothing\&.
.PP
\fBSee also\fP
.RS 4
\fBmousePressEvent\fP, \fBmouseReleaseEvent\fP, \fBmouseDoubleClickEvent\fP, \fBwheelEvent\fP 
.RE
.PP

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB8852\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::mousePressEvent (QMouseEvent * event, const QVariant & details)\fC [protected]\fP, \fC [virtual]\fP"
This event gets called when the user presses a mouse button while the cursor is over the layerable\&. Whether a cursor is over the layerable is decided by a preceding call to \fBselectTest\fP\&.
.PP
The current pixel position of the cursor on the \fBQCustomPlot\fP widget is accessible via \fCevent->pos()\fP\&. The parameter \fIdetails\fP contains layerable-specific details about the hit, which were generated in the previous call to \fBselectTest\fP\&. For example, One-dimensional plottables like \fBQCPGraph\fP or \fBQCPBars\fP convey the clicked data point in the \fIdetails\fP parameter, as \fBQCPDataSelection\fP packed as QVariant\&. Multi-part objects convey the specific \fCSelectablePart\fP that was hit (e\&.g\&. \fBQCPAxis::SelectablePart\fP in the case of axes)\&.
.PP
\fBQCustomPlot\fP uses an event propagation system that works the same as Qt's system\&. If your layerable doesn't reimplement the \fBmousePressEvent\fP or explicitly calls \fCevent->ignore()\fP in its reimplementation, the event will be propagated to the next layerable in the stacking order\&.
.PP
Once a layerable has accepted the \fBmousePressEvent\fP, it is considered the mouse grabber and will receive all following calls to \fBmouseMoveEvent\fP or \fBmouseReleaseEvent\fP for this mouse interaction (a 'mouse interaction' in this context ends with the release)\&.
.PP
The default implementation does nothing except explicitly ignoring the event with \fCevent->ignore()\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBmouseMoveEvent\fP, \fBmouseReleaseEvent\fP, \fBmouseDoubleClickEvent\fP, \fBwheelEvent\fP 
.RE
.PP

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB8814\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::mouseReleaseEvent (QMouseEvent * event, const QPointF & startPos)\fC [protected]\fP, \fC [virtual]\fP"
This event gets called when the user releases the mouse button, after this layerable has become the mouse grabber by accepting the preceding \fBmousePressEvent\fP\&.
.PP
The current pixel position of the cursor on the \fBQCustomPlot\fP widget is accessible via \fCevent->pos()\fP\&. The parameter \fIstartPos\fP indicates the position where the initial \fBmousePressEvent\fP occured, that started the mouse interaction\&.
.PP
The default implementation does nothing\&.
.PP
\fBSee also\fP
.RS 4
\fBmousePressEvent\fP, \fBmouseMoveEvent\fP, \fBmouseDoubleClickEvent\fP, \fBwheelEvent\fP 
.RE
.PP

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB8886\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::moveRange (double diff)"
If the scale type (\fBsetScaleType\fP) is \fBstLinear\fP, \fIdiff\fP is added to the lower and upper bounds of the range\&. The range is simply moved by \fIdiff\fP\&.
.PP
If the scale type is \fBstLogarithmic\fP, the range bounds are multiplied by \fIdiff\fP\&. This corresponds to an apparent 'linear' move in logarithmic scaling by a distance of log(diff)\&. 
.PP
Definition at line \fB8404\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QString QCPAxis::numberFormat () const"

.PP
Definition at line \fB7592\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "int QCPAxis::numberPrecision () const\fC [inline]\fP"

.PP
Definition at line \fB2020\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPAxis::offset () const"

.PP
Definition at line \fB7636\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPAxis::AxisType\fP QCPAxis::opposite (\fBQCPAxis::AxisType\fP type)\fC [static]\fP"
Returns the axis type that describes the opposite axis of an axis with the specified \fItype\fP\&. 
.PP
Definition at line \fB8764\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "Qt::Orientation QCPAxis::orientation () const\fC [inline]\fP"
Returns the orientation of this axis\&. The axis orientation (horizontal or vertical) is deduced from the axis type (left, top, right or bottom)\&.
.PP
\fBSee also\fP
.RS 4
\fBorientation(AxisType type)\fP, \fBpixelOrientation\fP 
.RE
.PP

.PP
Definition at line \fB2100\fP of file \fBqcustomplot\&.h\fP\&.
.SS "static Qt::Orientation QCPAxis::orientation (\fBAxisType\fP type)\fC [inline]\fP, \fC [static]\fP"
Returns the orientation of the specified axis type
.PP
\fBSee also\fP
.RS 4
\fBorientation()\fP, \fBpixelOrientation\fP 
.RE
.PP

.PP
Definition at line \fB2115\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPAxis::padding () const\fC [inline]\fP"

.PP
Definition at line \fB2035\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPAxis::pixelOrientation () const\fC [inline]\fP"
Returns which direction points towards higher coordinate values/keys, in pixel space\&.
.PP
This method returns either 1 or -1\&. If it returns 1, then going in the positive direction along the orientation of the axis in pixels corresponds to going from lower to higher axis coordinates\&. On the other hand, if this method returns -1, going to smaller pixel values corresponds to going from lower to higher axis coordinates\&.
.PP
For example, this is useful to easily shift axis coordinates by a certain amount given in pixels, without having to care about reversed or vertically aligned axes:
.PP
.PP
.nf
double newKey = keyAxis\->pixelToCoord(keyAxis\->coordToPixel(oldKey)+10*keyAxis\->pixelOrientation());
.fi
.PP
.PP
\fInewKey\fP will then contain a key that is ten pixels towards higher keys, starting from \fIoldKey\fP\&. 
.PP
Definition at line \fB2101\fP of file \fBqcustomplot\&.h\fP\&.
.SS "double QCPAxis::pixelToCoord (double value) const"
Transforms \fIvalue\fP, in pixel coordinates of the \fBQCustomPlot\fP widget, to axis coordinates\&. 
.PP
Definition at line \fB8555\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QList< \fBQCPAbstractPlottable\fP * > QCPAxis::plottables () const"
Returns a list of all the plottables that have this axis as key or value axis\&.
.PP
If you are only interested in plottables of type \fBQCPGraph\fP, see \fBgraphs\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBgraphs\fP, \fBitems\fP 
.RE
.PP

.PP
Definition at line \fB8686\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "const \fBQCPRange\fP QCPAxis::range () const\fC [inline]\fP"

.PP
Definition at line \fB2009\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPAxis::rangeChanged (const \fBQCPRange\fP & newRange)\fC [signal]\fP"
This signal is emitted when the range of this axis has changed\&. You can connect it to the \fBsetRange\fP slot of another axis to communicate the new range to the other axis, in order for it to be synchronized\&.
.PP
You may also manipulate/correct the range with \fBsetRange\fP in a slot connected to this signal\&. This is useful if for example a maximum range span shall not be exceeded, or if the lower/upper range shouldn't go beyond certain values (see \fBQCPRange::bounded\fP)\&. For example, the following slot would limit the x axis to ranges between 0 and 10: 
.PP
.nf
customPlot\->xAxis\->setRange(newRange\&.bounded(0, 10))

.fi
.PP
 
.SS "void QCPAxis::rangeChanged (const \fBQCPRange\fP & newRange, const \fBQCPRange\fP & oldRange)\fC [signal]\fP"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Additionally to the new range, this signal also provides the previous range held by the axis as \fIoldRange\fP\&. 
.SS "bool QCPAxis::rangeReversed () const\fC [inline]\fP"

.PP
Definition at line \fB2010\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPAxis::rescale (bool onlyVisiblePlottables = \fCfalse\fP)"
Changes the axis range such that all plottables associated with this axis are fully visible in that dimension\&.
.PP
\fBSee also\fP
.RS 4
\fBQCPAbstractPlottable::rescaleAxes\fP, \fBQCustomPlot::rescaleAxes\fP 
.RE
.PP

.PP
Definition at line \fB8506\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::scaleRange (double factor)"
Scales the range of this axis by \fIfactor\fP around the center of the current axis range\&. For example, if \fIfactor\fP is 2\&.0, then the axis range will double its size, and the point at the axis range center won't have changed its position in the \fBQCustomPlot\fP widget (i\&.e\&. coordinates around the center will have moved symmetrically closer)\&.
.PP
If you wish to scale around a different coordinate than the current axis range center, use the overload \fBscaleRange(double factor, double center)\fP\&. 
.PP
Definition at line \fB8429\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::scaleRange (double factor, double center)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Scales the range of this axis by \fIfactor\fP around the coordinate \fIcenter\fP\&. For example, if \fIfactor\fP is 2\&.0, \fIcenter\fP is 1\&.0, then the axis range will double its size, and the point at coordinate 1\&.0 won't have changed its position in the \fBQCustomPlot\fP widget (i\&.e\&. coordinates around 1\&.0 will have moved symmetrically closer to 1\&.0)\&.
.PP
\fBSee also\fP
.RS 4
\fBscaleRange(double factor)\fP 
.RE
.PP

.PP
Definition at line \fB8443\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBScaleType\fP QCPAxis::scaleType () const\fC [inline]\fP"

.PP
Definition at line \fB2008\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPAxis::scaleTypeChanged (\fBQCPAxis::ScaleType\fP scaleType)\fC [signal]\fP"
This signal is emitted when the scale type changes, by calls to \fBsetScaleType\fP 
.SS "void QCPAxis::selectableChanged (const QCPAxis::SelectableParts & parts)\fC [signal]\fP"
This signal is emitted when the selectability changes, by calls to \fBsetSelectableParts\fP 
.SS "SelectableParts QCPAxis::selectableParts () const\fC [inline]\fP"

.PP
Definition at line \fB2038\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPAxis::selectedBasePen () const\fC [inline]\fP"

.PP
Definition at line \fB2043\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QColor QCPAxis::selectedLabelColor () const\fC [inline]\fP"

.PP
Definition at line \fB2042\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QFont QCPAxis::selectedLabelFont () const\fC [inline]\fP"

.PP
Definition at line \fB2040\fP of file \fBqcustomplot\&.h\fP\&.
.SS "SelectableParts QCPAxis::selectedParts () const\fC [inline]\fP"

.PP
Definition at line \fB2037\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPAxis::selectedSubTickPen () const\fC [inline]\fP"

.PP
Definition at line \fB2045\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QColor QCPAxis::selectedTickLabelColor () const\fC [inline]\fP"

.PP
Definition at line \fB2041\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QFont QCPAxis::selectedTickLabelFont () const\fC [inline]\fP"

.PP
Definition at line \fB2039\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPAxis::selectedTickPen () const\fC [inline]\fP"

.PP
Definition at line \fB2044\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPAxis::selectEvent (QMouseEvent * event, bool additive, const QVariant & details, bool * selectionStateChanged)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB8777\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCP::Interaction\fP QCPAxis::selectionCategory () const\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB9150\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::selectionChanged (const QCPAxis::SelectableParts & parts)\fC [signal]\fP"
This signal is emitted when the selection state of this axis has changed, either by user interaction or by a direct call to \fBsetSelectedParts\fP\&. 
.SS "double QCPAxis::selectTest (const QPointF & pos, bool onlySelectable, QVariant * details = \fC0\fP) const\fC [virtual]\fP"
This function is used to decide whether a click hits a layerable object or not\&.
.PP
\fIpos\fP is a point in pixel coordinates on the \fBQCustomPlot\fP surface\&. This function returns the shortest pixel distance of this point to the object\&. If the object is either invisible or the distance couldn't be determined, -1\&.0 is returned\&. Further, if \fIonlySelectable\fP is true and the object is not selectable, -1\&.0 is returned, too\&.
.PP
If the object is represented not by single lines but by an area like a \fBQCPItemText\fP or the bars of a \fBQCPBars\fP plottable, a click inside the area should also be considered a hit\&. In these cases this function thus returns a constant value greater zero but still below the parent plot's selection tolerance\&. (typically the selectionTolerance multiplied by 0\&.99)\&.
.PP
Providing a constant value for area objects allows selecting line objects even when they are obscured by such area objects, by clicking close to the lines (i\&.e\&. closer than 0\&.99*selectionTolerance)\&.
.PP
The actual setting of the selection state is not done by this function\&. This is handled by the parent \fBQCustomPlot\fP when the mouseReleaseEvent occurs, and the finally selected object is notified via the \fBselectEvent/\fP deselectEvent methods\&.
.PP
\fIdetails\fP is an optional output parameter\&. Every layerable subclass may place any information in \fIdetails\fP\&. This information will be passed to \fBselectEvent\fP when the parent \fBQCustomPlot\fP decides on the basis of this selectTest call, that the object was successfully selected\&. The subsequent call to \fBselectEvent\fP will carry the \fIdetails\fP\&. This is useful for multi-part objects (like \fBQCPAxis\fP)\&. This way, a possibly complex calculation to decide which part was clicked is only done once in \fBselectTest\fP\&. The result (i\&.e\&. the actually clicked part) can then be placed in \fIdetails\fP\&. So in the subsequent \fBselectEvent\fP, the decision which part was selected doesn't have to be done a second time for a single selection operation\&.
.PP
You may pass 0 as \fIdetails\fP to indicate that you are not interested in those selection details\&.
.PP
\fBSee also\fP
.RS 4
selectEvent, deselectEvent, \fBmousePressEvent\fP, \fBwheelEvent\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB8667\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setBasePen (const QPen & pen)"
Sets the pen, the axis base line is drawn with\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTickPen\fP, \fBsetSubTickPen\fP 
.RE
.PP

.PP
Definition at line \fB8181\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setLabel (const QString & str)"
Sets the text of the axis label that will be shown below/above or next to the axis, depending on its orientation\&. To disable axis labels, pass an empty string as \fIstr\fP\&. 
.PP
Definition at line \fB8234\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setLabelColor (const QColor & color)"
Sets the color of the axis label\&.
.PP
\fBSee also\fP
.RS 4
\fBsetLabelFont\fP 
.RE
.PP

.PP
Definition at line \fB8225\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setLabelFont (const QFont & font)"
Sets the font of the axis label\&.
.PP
\fBSee also\fP
.RS 4
\fBsetLabelColor\fP 
.RE
.PP

.PP
Definition at line \fB8211\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setLabelPadding (int padding)"
Sets the distance between the tick labels and the axis label\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTickLabelPadding\fP, \fBsetPadding\fP 
.RE
.PP

.PP
Definition at line \fB8248\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setLowerEnding (const \fBQCPLineEnding\fP & ending)"
Sets the style for the lower axis ending\&. See the documentation of \fBQCPLineEnding\fP for available styles\&.
.PP
For horizontal axes, this method refers to the left ending, for vertical axes the bottom ending\&. Note that this meaning does not change when the axis range is reversed with \fBsetRangeReversed\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBsetUpperEnding\fP 
.RE
.PP

.PP
Definition at line \fB8377\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setNumberFormat (const QString & formatCode)"
Sets the number format for the numbers in tick labels\&. This \fIformatCode\fP is an extended version of the format code used e\&.g\&. by QString::number() and QLocale::toString()\&. For reference about that, see the 'Argument Formats' section in the detailed description of the QString class\&.
.PP
\fIformatCode\fP is a string of one, two or three characters\&. The first character is identical to the normal format code used by Qt\&. In short, this means: 'e'/'E' scientific format, 'f' fixed format, 'g'/'G' scientific or fixed, whichever is shorter\&.
.PP
The second and third characters are optional and specific to \fBQCustomPlot\fP:
.br
If the first char was 'e' or 'g', numbers are/might be displayed in the scientific format, e\&.g\&. '5\&.5e9', which is ugly in a plot\&. So when the second char of \fIformatCode\fP is set to 'b' (for 'beautiful'), those exponential numbers are formatted in a more natural way, i\&.e\&. '5\&.5
[multiplication sign] 10 [superscript] 9'\&. By default, the multiplication sign is a centered dot\&. If instead a cross should be shown (as is usual in the USA), the third char of \fIformatCode\fP can be set to 'c'\&. The inserted multiplication signs are the UTF-8 characters 215 (0xD7) for the cross and 183 (0xB7) for the dot\&.
.PP
Examples for \fIformatCode:\fP 
.PD 0

.IP "\(bu" 2
\fCg\fP normal format code behaviour\&. If number is small, fixed format is used, if number is large, normal scientific format is used 
.IP "\(bu" 2
\fCgb\fP If number is small, fixed format is used, if number is large, scientific format is used with beautifully typeset decimal powers and a dot as multiplication sign 
.IP "\(bu" 2
\fCebc\fP All numbers are in scientific format with beautifully typeset decimal power and a cross as multiplication sign 
.IP "\(bu" 2
\fCfb\fP illegal format code, since fixed format doesn't support (or need) beautifully typeset decimal powers\&. Format code will be reduced to 'f'\&. 
.IP "\(bu" 2
\fChello\fP illegal format code, since first char is not 'e', 'E', 'f', 'g' or 'G'\&. Current format code will not be changed\&. 
.PP

.PP
Definition at line \fB8003\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setNumberPrecision (int precision)"
Sets the precision of the tick label numbers\&. See QLocale::toString(double i, char f, int prec) for details\&. The effect of precisions are most notably for number Formats starting with 'e', see \fBsetNumberFormat\fP 
.PP
Definition at line \fB8063\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setOffset (int offset)"
Sets the offset the axis has to its axis rect side\&.
.PP
If an axis rect side has multiple axes and automatic margin calculation is enabled for that side, only the offset of the inner most axis has meaning (even if it is set to be invisible)\&. The offset of the other, outer axes is controlled automatically, to place them at appropriate positions\&. 
.PP
Definition at line \fB8284\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setPadding (int padding)"
Sets the padding of the axis\&.
.PP
When \fBQCPAxisRect::setAutoMargins\fP is enabled, the padding is the additional outer most space, that is left blank\&.
.PP
The axis padding has no meaning if \fBQCPAxisRect::setAutoMargins\fP is disabled\&.
.PP
\fBSee also\fP
.RS 4
\fBsetLabelPadding\fP, \fBsetTickLabelPadding\fP 
.RE
.PP

.PP
Definition at line \fB8267\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setRange (const \fBQCPRange\fP & range)"
Sets the range of the axis\&.
.PP
This slot may be connected with the \fBrangeChanged\fP signal of another axis so this axis is always synchronized with the other axis range, when it changes\&.
.PP
To invert the direction of an axis, use \fBsetRangeReversed\fP\&. 
.PP
Definition at line \fB7683\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setRange (double lower, double upper)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Sets the lower and upper bound of the axis range\&.
.PP
To invert the direction of an axis, use \fBsetRangeReversed\fP\&.
.PP
There is also a slot to set a range, see \fBsetRange(const QCPRange &range)\fP\&. 
.PP
Definition at line \fB7753\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setRange (double position, double size, Qt::AlignmentFlag alignment)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Sets the range of the axis\&.
.PP
The \fIposition\fP coordinate indicates together with the \fIalignment\fP parameter, where the new range will be positioned\&. \fIsize\fP defines the size of the new axis range\&. \fIalignment\fP may be Qt::AlignLeft, Qt::AlignRight or Qt::AlignCenter\&. This will cause the left border, right border, or center of the range to be aligned with \fIposition\fP\&. Any other values of \fIalignment\fP will default to Qt::AlignCenter\&. 
.PP
Definition at line \fB7784\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setRangeLower (double lower)"
Sets the lower bound of the axis range\&. The upper bound is not changed\&. 
.PP
\fBSee also\fP
.RS 4
\fBsetRange\fP 
.RE
.PP

.PP
Definition at line \fB7798\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setRangeReversed (bool reversed)"
Sets whether the axis range (direction) is displayed reversed\&. Normally, the values on horizontal axes increase left to right, on vertical axes bottom to top\&. When \fIreversed\fP is set to true, the direction of increasing values is inverted\&.
.PP
Note that the range and data interface stays the same for reversed axes, e\&.g\&. the \fIlower\fP part of the \fBsetRange\fP interface will still reference the mathematically smaller number than the \fIupper\fP part\&. 
.PP
Definition at line \fB7847\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setRangeUpper (double upper)"
Sets the upper bound of the axis range\&. The lower bound is not changed\&. 
.PP
\fBSee also\fP
.RS 4
\fBsetRange\fP 
.RE
.PP

.PP
Definition at line \fB7820\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setScaleRatio (const \fBQCPAxis\fP * otherAxis, double ratio = \fC1\&.0\fP)"
Scales the range of this axis to have a certain scale \fIratio\fP to \fIotherAxis\fP\&. The scaling will be done around the center of the current axis range\&.
.PP
For example, if \fIratio\fP is 1, this axis is the \fIyAxis\fP and \fIotherAxis\fP is \fIxAxis\fP, graphs plotted with those axes will appear in a 1:1 aspect ratio, independent of the aspect ratio the axis rect has\&.
.PP
This is an operation that changes the range of this axis once, it doesn't fix the scale ratio indefinitely\&. Note that calling this function in the constructor of the \fBQCustomPlot\fP's parent won't have the desired effect, since the widget dimensions aren't defined yet, and a resizeEvent will follow\&. 
.PP
Definition at line \fB8482\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setScaleType (\fBQCPAxis::ScaleType\fP type)"
Sets whether the axis uses a linear scale or a logarithmic scale\&.
.PP
Note that this method controls the coordinate transformation\&. You will likely also want to use a logarithmic tick spacing and labeling, which can be achieved by setting an instance of \fBQCPAxisTickerLog\fP via \fBsetTicker\fP\&. See the documentation of \fBQCPAxisTickerLog\fP about the details of logarithmic axis tick creation\&.
.PP
\fBsetNumberPrecision\fP 
.PP
Definition at line \fB7663\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setSelectableParts (const QCPAxis::SelectableParts & selectableParts)"
Sets whether the user can (de-)select the parts in \fIselectable\fP by clicking on the \fBQCustomPlot\fP surface\&. (When \fBQCustomPlot::setInteractions\fP contains iSelectAxes\&.)
.PP
However, even when \fIselectable\fP is set to a value not allowing the selection of a specific part, it is still possible to set the selection of this part manually, by calling \fBsetSelectedParts\fP directly\&.
.PP
\fBSee also\fP
.RS 4
\fBSelectablePart\fP, \fBsetSelectedParts\fP 
.RE
.PP

.PP
Definition at line \fB7711\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setSelectedBasePen (const QPen & pen)"
Sets the pen that is used to draw the axis base line when selected\&.
.PP
\fBSee also\fP
.RS 4
\fBsetBasePen\fP, \fBsetSelectableParts\fP, \fBsetSelectedParts\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.PP
Definition at line \fB8342\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setSelectedLabelColor (const QColor & color)"
Sets the color that is used for the axis label when it is selected\&.
.PP
\fBSee also\fP
.RS 4
\fBsetLabelColor\fP, \fBsetSelectableParts\fP, \fBsetSelectedParts\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.PP
Definition at line \fB8332\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setSelectedLabelFont (const QFont & font)"
Sets the font that is used for the axis label when it is selected\&.
.PP
\fBSee also\fP
.RS 4
\fBsetLabelFont\fP, \fBsetSelectableParts\fP, \fBsetSelectedParts\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.PP
Definition at line \fB8308\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setSelectedParts (const QCPAxis::SelectableParts & selectedParts)"
Sets the selected state of the respective axis parts described by \fBSelectablePart\fP\&. When a part is selected, it uses a different pen/font\&.
.PP
The entire selection mechanism for axes is handled automatically when \fBQCustomPlot::setInteractions\fP contains iSelectAxes\&. You only need to call this function when you wish to change the selection state manually\&.
.PP
This function can change the selection state of a part, independent of the \fBsetSelectableParts\fP setting\&.
.PP
emits the \fBselectionChanged\fP signal when \fIselected\fP is different from the previous selection state\&.
.PP
\fBSee also\fP
.RS 4
\fBSelectablePart\fP, \fBsetSelectableParts\fP, \fBselectTest\fP, \fBsetSelectedBasePen\fP, \fBsetSelectedTickPen\fP, \fBsetSelectedSubTickPen\fP, \fBsetSelectedTickLabelFont\fP, \fBsetSelectedLabelFont\fP, \fBsetSelectedTickLabelColor\fP, \fBsetSelectedLabelColor\fP 
.RE
.PP

.PP
Definition at line \fB7735\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setSelectedSubTickPen (const QPen & pen)"
Sets the pen that is used to draw the subticks when selected\&.
.PP
\fBSee also\fP
.RS 4
\fBsetSubTickPen\fP, \fBsetSelectableParts\fP, \fBsetSelectedParts\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.PP
Definition at line \fB8362\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setSelectedTickLabelColor (const QColor & color)"
Sets the color that is used for tick labels when they are selected\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTickLabelColor\fP, \fBsetSelectableParts\fP, \fBsetSelectedParts\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.PP
Definition at line \fB8319\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setSelectedTickLabelFont (const QFont & font)"
Sets the font that is used for tick labels when they are selected\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTickLabelFont\fP, \fBsetSelectableParts\fP, \fBsetSelectedParts\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.PP
Definition at line \fB8294\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setSelectedTickPen (const QPen & pen)"
Sets the pen that is used to draw the (major) ticks when selected\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTickPen\fP, \fBsetSelectableParts\fP, \fBsetSelectedParts\fP, \fBQCustomPlot::setInteractions\fP 
.RE
.PP

.PP
Definition at line \fB8352\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setSubTickLength (int inside, int outside = \fC0\fP)"
Sets the length of the subticks in pixels\&. \fIinside\fP is the length the subticks will reach inside the plot and \fIoutside\fP is the length they will reach outside the plot\&. If \fIoutside\fP is greater than zero, the tick labels and axis label will increase their distance to the axis accordingly, so they won't collide with the ticks\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTickLength\fP, \fBsetSubTickLengthIn\fP, \fBsetSubTickLengthOut\fP 
.RE
.PP

.PP
Definition at line \fB8140\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setSubTickLengthIn (int inside)"
Sets the length of the inward subticks in pixels\&. \fIinside\fP is the length the subticks will reach inside the plot\&.
.PP
\fBSee also\fP
.RS 4
\fBsetSubTickLengthOut\fP, \fBsetSubTickLength\fP, \fBsetTickLength\fP 
.RE
.PP

.PP
Definition at line \fB8152\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setSubTickLengthOut (int outside)"
Sets the length of the outward subticks in pixels\&. \fIoutside\fP is the length the subticks will reach outside the plot\&. If \fIoutside\fP is greater than zero, the tick labels will increase their distance to the axis accordingly, so they won't collide with the ticks\&.
.PP
\fBSee also\fP
.RS 4
\fBsetSubTickLengthIn\fP, \fBsetSubTickLength\fP, \fBsetTickLength\fP 
.RE
.PP

.PP
Definition at line \fB8167\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setSubTickPen (const QPen & pen)"
Sets the pen, subtick marks will be drawn with\&.
.PP
\fBSee also\fP
.RS 4
setSubTickCount, \fBsetSubTickLength\fP, \fBsetBasePen\fP 
.RE
.PP

.PP
Definition at line \fB8201\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setSubTicks (bool show)"
Sets whether sub tick marks are displayed\&.
.PP
Sub ticks are only potentially visible if (major) ticks are also visible (see \fBsetTicks\fP)
.PP
\fBSee also\fP
.RS 4
\fBsetTicks\fP 
.RE
.PP

.PP
Definition at line \fB8123\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setTicker (QSharedPointer< \fBQCPAxisTicker\fP > ticker)"
The axis ticker is responsible for generating the tick positions and tick labels\&. See the documentation of \fBQCPAxisTicker\fP for details on how to work with axis tickers\&.
.PP
You can change the tick positioning/labeling behaviour of this axis by setting a different \fBQCPAxisTicker\fP subclass using this method\&. If you only wish to modify the currently installed axis ticker, access it via \fBticker\fP\&.
.PP
Since the ticker is stored in the axis as a shared pointer, multiple axes may share the same axis ticker simply by passing the same shared pointer to multiple axes\&.
.PP
\fBSee also\fP
.RS 4
\fBticker\fP 
.RE
.PP

.PP
Definition at line \fB7865\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setTickLabelColor (const QColor & color)"
Sets the color of the tick labels\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTickLabels\fP, \fBsetTickLabelFont\fP 
.RE
.PP

.PP
Definition at line \fB7937\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setTickLabelFont (const QFont & font)"
Sets the font of the tick labels\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTickLabels\fP, \fBsetTickLabelColor\fP 
.RE
.PP

.PP
Definition at line \fB7923\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setTickLabelPadding (int padding)"
Sets the distance between the axis base line (including any outward ticks) and the tick labels\&. 
.PP
\fBSee also\fP
.RS 4
\fBsetLabelPadding\fP, \fBsetPadding\fP 
.RE
.PP

.PP
Definition at line \fB7909\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setTickLabelRotation (double degrees)"
Sets the rotation of the tick labels\&. If \fIdegrees\fP is zero, the labels are drawn normally\&. Else, the tick labels are drawn rotated by \fIdegrees\fP clockwise\&. The specified angle is bound to values from -90 to 90 degrees\&.
.PP
If \fIdegrees\fP is exactly -90, 0 or 90, the tick labels are centered on the tick coordinate\&. For other angles, the label is drawn with an offset such that it seems to point toward or away from the tick mark\&. 
.PP
Definition at line \fB7951\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setTickLabels (bool show)"
Sets whether tick labels are displayed\&. Tick labels are the numbers drawn next to tick marks\&. 
.PP
Definition at line \fB7894\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setTickLabelSide (\fBLabelSide\fP side)"
Sets whether the tick labels (numbers) shall appear inside or outside the axis rect\&.
.PP
The usual and default setting is \fBlsOutside\fP\&. Very compact plots sometimes require tick labels to be inside the axis rect, to save space\&. If \fIside\fP is set to \fBlsInside\fP, the tick labels appear on the inside are additionally clipped to the axis rect\&. 
.PP
Definition at line \fB7967\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setTickLength (int inside, int outside = \fC0\fP)"
Sets the length of the ticks in pixels\&. \fIinside\fP is the length the ticks will reach inside the plot and \fIoutside\fP is the length they will reach outside the plot\&. If \fIoutside\fP is greater than zero, the tick labels and axis label will increase their distance to the axis accordingly, so they won't collide with the ticks\&.
.PP
\fBSee also\fP
.RS 4
\fBsetSubTickLength\fP, \fBsetTickLengthIn\fP, \fBsetTickLengthOut\fP 
.RE
.PP

.PP
Definition at line \fB8080\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setTickLengthIn (int inside)"
Sets the length of the inward ticks in pixels\&. \fIinside\fP is the length the ticks will reach inside the plot\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTickLengthOut\fP, \fBsetTickLength\fP, \fBsetSubTickLength\fP 
.RE
.PP

.PP
Definition at line \fB8092\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setTickLengthOut (int outside)"
Sets the length of the outward ticks in pixels\&. \fIoutside\fP is the length the ticks will reach outside the plot\&. If \fIoutside\fP is greater than zero, the tick labels and axis label will increase their distance to the axis accordingly, so they won't collide with the ticks\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTickLengthIn\fP, \fBsetTickLength\fP, \fBsetSubTickLength\fP 
.RE
.PP

.PP
Definition at line \fB8107\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setTickPen (const QPen & pen)"
Sets the pen, tick marks will be drawn with\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTickLength\fP, \fBsetBasePen\fP 
.RE
.PP

.PP
Definition at line \fB8191\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setTicks (bool show)"
Sets whether tick marks are displayed\&.
.PP
Note that setting \fIshow\fP to false does not imply that tick labels are invisible, too\&. To achieve that, see \fBsetTickLabels\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBsetSubTicks\fP 
.RE
.PP

.PP
Definition at line \fB7882\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setUpperEnding (const \fBQCPLineEnding\fP & ending)"
Sets the style for the upper axis ending\&. See the documentation of \fBQCPLineEnding\fP for available styles\&.
.PP
For horizontal axes, this method refers to the right ending, for vertical axes the top ending\&. Note that this meaning does not change when the axis range is reversed with \fBsetRangeReversed\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBsetLowerEnding\fP 
.RE
.PP

.PP
Definition at line \fB8392\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::setupTickVectors ()\fC [protected]\fP"

.PP
Definition at line \fB9012\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "int QCPAxis::subTickLengthIn () const"

.PP
Definition at line \fB7618\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "int QCPAxis::subTickLengthOut () const"

.PP
Definition at line \fB7624\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QPen QCPAxis::subTickPen () const\fC [inline]\fP"

.PP
Definition at line \fB2030\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPAxis::subTicks () const\fC [inline]\fP"

.PP
Definition at line \fB2025\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QSharedPointer< \fBQCPAxisTicker\fP > QCPAxis::ticker () const\fC [inline]\fP"
Returns a modifiable shared pointer to the currently installed axis ticker\&. The axis ticker is responsible for generating the tick positions and tick labels of this axis\&. You can access the \fBQCPAxisTicker\fP with this method and modify basic properties such as the approximate tick count (\fBQCPAxisTicker::setTickCount\fP)\&.
.PP
You can gain more control over the axis ticks by setting a different \fBQCPAxisTicker\fP subclass, see the documentation there\&. A new axis ticker can be set with \fBsetTicker\fP\&.
.PP
Since the ticker is stored in the axis as a shared pointer, multiple axes may share the same axis ticker simply by passing the same shared pointer to multiple axes\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTicker\fP 
.RE
.PP

.PP
Definition at line \fB2011\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QColor QCPAxis::tickLabelColor () const\fC [inline]\fP"

.PP
Definition at line \fB2016\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QFont QCPAxis::tickLabelFont () const\fC [inline]\fP"

.PP
Definition at line \fB2015\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPAxis::tickLabelPadding () const"

.PP
Definition at line \fB7574\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "double QCPAxis::tickLabelRotation () const"

.PP
Definition at line \fB7580\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPAxis::tickLabels () const\fC [inline]\fP"

.PP
Definition at line \fB2013\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPAxis::LabelSide\fP QCPAxis::tickLabelSide () const"

.PP
Definition at line \fB7586\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "int QCPAxis::tickLengthIn () const"

.PP
Definition at line \fB7606\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "int QCPAxis::tickLengthOut () const"

.PP
Definition at line \fB7612\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QPen QCPAxis::tickPen () const\fC [inline]\fP"

.PP
Definition at line \fB2029\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPAxis::ticks () const\fC [inline]\fP"

.PP
Definition at line \fB2012\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QVector< double > QCPAxis::tickVector () const\fC [inline]\fP"

.PP
Definition at line \fB2021\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QVector< QString > QCPAxis::tickVectorLabels () const\fC [inline]\fP"

.PP
Definition at line \fB2022\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPLineEnding\fP QCPAxis::upperEnding () const"

.PP
Definition at line \fB7648\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxis::wheelEvent (QWheelEvent * event)\fC [protected]\fP, \fC [virtual]\fP"
This event gets called when the user turns the mouse scroll wheel while the cursor is over the layerable\&. Whether a cursor is over the layerable is decided by a preceding call to \fBselectTest\fP\&.
.PP
The current pixel position of the cursor on the \fBQCustomPlot\fP widget is accessible via \fCevent->pos()\fP\&.
.PP
The \fCevent->delta()\fP indicates how far the mouse wheel was turned, which is usually +/- 120 for single rotation steps\&. However, if the mouse wheel is turned rapidly, multiple steps may accumulate to one event, making \fCevent->delta()\fP larger\&. On the other hand, if the wheel has very smooth steps or none at all, the delta may be smaller\&.
.PP
The default implementation does nothing\&.
.PP
\fBSee also\fP
.RS 4
\fBmousePressEvent\fP, \fBmouseMoveEvent\fP, \fBmouseReleaseEvent\fP, \fBmouseDoubleClickEvent\fP 
.RE
.PP

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB8913\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBQCPAxisRect\fP\fC [friend]\fP"

.PP
Definition at line \fB2206\fP of file \fBqcustomplot\&.h\fP\&.
.SS "friend class \fBQCPGrid\fP\fC [friend]\fP"

.PP
Definition at line \fB2205\fP of file \fBqcustomplot\&.h\fP\&.
.SS "friend class \fBQCustomPlot\fP\fC [friend]\fP"

.PP
Definition at line \fB2204\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "QCP::AntialiasedElements QCPAxis::mAADragBackup\fC [protected]\fP"

.PP
Definition at line \fB2173\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPAxisPainterPrivate\fP* QCPAxis::mAxisPainter\fC [protected]\fP"

.PP
Definition at line \fB2164\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPAxisRect\fP* QCPAxis::mAxisRect\fC [protected]\fP"

.PP
Definition at line \fB2129\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBAxisType\fP QCPAxis::mAxisType\fC [protected]\fP"

.PP
Definition at line \fB2128\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPAxis::mBasePen\fC [protected]\fP"

.PP
Definition at line \fB2134\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPAxis::mCachedMargin\fC [protected]\fP"

.PP
Definition at line \fB2170\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPAxis::mCachedMarginValid\fC [protected]\fP"

.PP
Definition at line \fB2169\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPAxis::mDragging\fC [protected]\fP"

.PP
Definition at line \fB2171\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPRange\fP QCPAxis::mDragStartRange\fC [protected]\fP"

.PP
Definition at line \fB2172\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPGrid\fP* QCPAxis::mGrid\fC [protected]\fP"

.PP
Definition at line \fB2163\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QString QCPAxis::mLabel\fC [protected]\fP"

.PP
Definition at line \fB2138\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QColor QCPAxis::mLabelColor\fC [protected]\fP"

.PP
Definition at line \fB2140\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QFont QCPAxis::mLabelFont\fC [protected]\fP"

.PP
Definition at line \fB2139\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QCP::AntialiasedElements QCPAxis::mNotAADragBackup\fC [protected]\fP"

.PP
Definition at line \fB2173\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPAxis::mNumberBeautifulPowers\fC [protected]\fP"

.PP
Definition at line \fB2149\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QLatin1Char QCPAxis::mNumberFormatChar\fC [protected]\fP"

.PP
Definition at line \fB2148\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPAxis::mNumberPrecision\fC [protected]\fP"

.PP
Definition at line \fB2147\fP of file \fBqcustomplot\&.h\fP\&.
.SS "Qt::Orientation QCPAxis::mOrientation\fC [protected]\fP"

.PP
Definition at line \fB2132\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPAxis::mPadding\fC [protected]\fP"

.PP
Definition at line \fB2131\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPRange\fP QCPAxis::mRange\fC [protected]\fP"

.PP
Definition at line \fB2158\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPAxis::mRangeReversed\fC [protected]\fP"

.PP
Definition at line \fB2159\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBScaleType\fP QCPAxis::mScaleType\fC [protected]\fP"

.PP
Definition at line \fB2160\fP of file \fBqcustomplot\&.h\fP\&.
.SS "SelectableParts QCPAxis::mSelectableParts\fC [protected]\fP"

.PP
Definition at line \fB2133\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPAxis::mSelectedBasePen\fC [protected]\fP"

.PP
Definition at line \fB2134\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QColor QCPAxis::mSelectedLabelColor\fC [protected]\fP"

.PP
Definition at line \fB2140\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QFont QCPAxis::mSelectedLabelFont\fC [protected]\fP"

.PP
Definition at line \fB2139\fP of file \fBqcustomplot\&.h\fP\&.
.SS "SelectableParts QCPAxis::mSelectedParts\fC [protected]\fP"

.PP
Definition at line \fB2133\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPAxis::mSelectedSubTickPen\fC [protected]\fP"

.PP
Definition at line \fB2156\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QColor QCPAxis::mSelectedTickLabelColor\fC [protected]\fP"

.PP
Definition at line \fB2146\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QFont QCPAxis::mSelectedTickLabelFont\fC [protected]\fP"

.PP
Definition at line \fB2145\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPAxis::mSelectedTickPen\fC [protected]\fP"

.PP
Definition at line \fB2155\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPAxis::mSubTickPen\fC [protected]\fP"

.PP
Definition at line \fB2156\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPAxis::mSubTicks\fC [protected]\fP"

.PP
Definition at line \fB2153\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QVector<double> QCPAxis::mSubTickVector\fC [protected]\fP"

.PP
Definition at line \fB2168\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QSharedPointer<\fBQCPAxisTicker\fP> QCPAxis::mTicker\fC [protected]\fP"

.PP
Definition at line \fB2165\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QColor QCPAxis::mTickLabelColor\fC [protected]\fP"

.PP
Definition at line \fB2146\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QFont QCPAxis::mTickLabelFont\fC [protected]\fP"

.PP
Definition at line \fB2145\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPAxis::mTickLabels\fC [protected]\fP"

.PP
Definition at line \fB2143\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPAxis::mTickPen\fC [protected]\fP"

.PP
Definition at line \fB2155\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPAxis::mTicks\fC [protected]\fP"

.PP
Definition at line \fB2152\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QVector<double> QCPAxis::mTickVector\fC [protected]\fP"

.PP
Definition at line \fB2166\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QVector<QString> QCPAxis::mTickVectorLabels\fC [protected]\fP"

.PP
Definition at line \fB2167\fP of file \fBqcustomplot\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OmronPID from the source code\&.
