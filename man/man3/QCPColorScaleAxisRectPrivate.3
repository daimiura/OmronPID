.TH "QCPColorScaleAxisRectPrivate" 3 "Wed Mar 15 2023" "OmronPID" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPColorScaleAxisRectPrivate
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBQCPAxisRect\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPColorScaleAxisRectPrivate\fP (\fBQCPColorScale\fP *parentColorScale)"
.br
.in -1c

Public Member Functions inherited from \fBQCPAxisRect\fP
.in +1c
.ti -1c
.RI "\fBQCPAxisRect\fP (\fBQCustomPlot\fP *parentPlot, bool setupDefaultAxes=true)"
.br
.ti -1c
.RI "QPixmap \fBbackground\fP () const"
.br
.ti -1c
.RI "QBrush \fBbackgroundBrush\fP () const"
.br
.ti -1c
.RI "bool \fBbackgroundScaled\fP () const"
.br
.ti -1c
.RI "Qt::AspectRatioMode \fBbackgroundScaledMode\fP () const"
.br
.ti -1c
.RI "Qt::Orientations \fBrangeDrag\fP () const"
.br
.ti -1c
.RI "Qt::Orientations \fBrangeZoom\fP () const"
.br
.ti -1c
.RI "\fBQCPAxis\fP * \fBrangeDragAxis\fP (Qt::Orientation orientation)"
.br
.ti -1c
.RI "\fBQCPAxis\fP * \fBrangeZoomAxis\fP (Qt::Orientation orientation)"
.br
.ti -1c
.RI "QList< \fBQCPAxis\fP * > \fBrangeDragAxes\fP (Qt::Orientation orientation)"
.br
.ti -1c
.RI "QList< \fBQCPAxis\fP * > \fBrangeZoomAxes\fP (Qt::Orientation orientation)"
.br
.ti -1c
.RI "double \fBrangeZoomFactor\fP (Qt::Orientation orientation)"
.br
.ti -1c
.RI "void \fBsetBackground\fP (const QPixmap &pm)"
.br
.ti -1c
.RI "void \fBsetBackground\fP (const QPixmap &pm, bool scaled, Qt::AspectRatioMode mode=Qt::KeepAspectRatioByExpanding)"
.br
.ti -1c
.RI "void \fBsetBackground\fP (const QBrush &brush)"
.br
.ti -1c
.RI "void \fBsetBackgroundScaled\fP (bool scaled)"
.br
.ti -1c
.RI "void \fBsetBackgroundScaledMode\fP (Qt::AspectRatioMode mode)"
.br
.ti -1c
.RI "void \fBsetRangeDrag\fP (Qt::Orientations orientations)"
.br
.ti -1c
.RI "void \fBsetRangeZoom\fP (Qt::Orientations orientations)"
.br
.ti -1c
.RI "void \fBsetRangeDragAxes\fP (\fBQCPAxis\fP *horizontal, \fBQCPAxis\fP *vertical)"
.br
.ti -1c
.RI "void \fBsetRangeDragAxes\fP (QList< \fBQCPAxis\fP * > \fBaxes\fP)"
.br
.ti -1c
.RI "void \fBsetRangeDragAxes\fP (QList< \fBQCPAxis\fP * > horizontal, QList< \fBQCPAxis\fP * > vertical)"
.br
.ti -1c
.RI "void \fBsetRangeZoomAxes\fP (\fBQCPAxis\fP *horizontal, \fBQCPAxis\fP *vertical)"
.br
.ti -1c
.RI "void \fBsetRangeZoomAxes\fP (QList< \fBQCPAxis\fP * > \fBaxes\fP)"
.br
.ti -1c
.RI "void \fBsetRangeZoomAxes\fP (QList< \fBQCPAxis\fP * > horizontal, QList< \fBQCPAxis\fP * > vertical)"
.br
.ti -1c
.RI "void \fBsetRangeZoomFactor\fP (double horizontalFactor, double verticalFactor)"
.br
.ti -1c
.RI "void \fBsetRangeZoomFactor\fP (double factor)"
.br
.ti -1c
.RI "int \fBaxisCount\fP (\fBQCPAxis::AxisType\fP type) const"
.br
.ti -1c
.RI "\fBQCPAxis\fP * \fBaxis\fP (\fBQCPAxis::AxisType\fP type, int index=0) const"
.br
.ti -1c
.RI "QList< \fBQCPAxis\fP * > \fBaxes\fP (QCPAxis::AxisTypes types) const"
.br
.ti -1c
.RI "QList< \fBQCPAxis\fP * > \fBaxes\fP () const"
.br
.ti -1c
.RI "\fBQCPAxis\fP * \fBaddAxis\fP (\fBQCPAxis::AxisType\fP type, \fBQCPAxis\fP *\fBaxis\fP=0)"
.br
.ti -1c
.RI "QList< \fBQCPAxis\fP * > \fBaddAxes\fP (QCPAxis::AxisTypes types)"
.br
.ti -1c
.RI "bool \fBremoveAxis\fP (\fBQCPAxis\fP *\fBaxis\fP)"
.br
.ti -1c
.RI "\fBQCPLayoutInset\fP * \fBinsetLayout\fP () const"
.br
.ti -1c
.RI "void \fBzoom\fP (const QRectF &pixelRect)"
.br
.ti -1c
.RI "void \fBzoom\fP (const QRectF &pixelRect, const QList< \fBQCPAxis\fP * > &affectedAxes)"
.br
.ti -1c
.RI "void \fBsetupFullAxesBox\fP (bool connectRanges=false)"
.br
.ti -1c
.RI "QList< \fBQCPAbstractPlottable\fP * > \fBplottables\fP () const"
.br
.ti -1c
.RI "QList< \fBQCPGraph\fP * > \fBgraphs\fP () const"
.br
.ti -1c
.RI "QList< \fBQCPAbstractItem\fP * > \fBitems\fP () const"
.br
.ti -1c
.RI "int \fBleft\fP () const"
.br
.ti -1c
.RI "int \fBright\fP () const"
.br
.ti -1c
.RI "int \fBtop\fP () const"
.br
.ti -1c
.RI "int \fBbottom\fP () const"
.br
.ti -1c
.RI "int \fBwidth\fP () const"
.br
.ti -1c
.RI "int \fBheight\fP () const"
.br
.ti -1c
.RI "QSize \fBsize\fP () const"
.br
.ti -1c
.RI "QPoint \fBtopLeft\fP () const"
.br
.ti -1c
.RI "QPoint \fBtopRight\fP () const"
.br
.ti -1c
.RI "QPoint \fBbottomLeft\fP () const"
.br
.ti -1c
.RI "QPoint \fBbottomRight\fP () const"
.br
.ti -1c
.RI "QPoint \fBcenter\fP () const"
.br
.ti -1c
.RI "virtual void \fBupdate\fP (\fBUpdatePhase\fP phase) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual QList< \fBQCPLayoutElement\fP * > \fBelements\fP (bool recursive) const Q_DECL_OVERRIDE"
.br
.in -1c

Public Member Functions inherited from \fBQCPLayoutElement\fP
.in +1c
.ti -1c
.RI "\fBQCPLayoutElement\fP (\fBQCustomPlot\fP *parentPlot=0)"
.br
.ti -1c
.RI "\fBQCPLayout\fP * \fBlayout\fP () const"
.br
.ti -1c
.RI "QRect \fBrect\fP () const"
.br
.ti -1c
.RI "QRect \fBouterRect\fP () const"
.br
.ti -1c
.RI "QMargins \fBmargins\fP () const"
.br
.ti -1c
.RI "QMargins \fBminimumMargins\fP () const"
.br
.ti -1c
.RI "QCP::MarginSides \fBautoMargins\fP () const"
.br
.ti -1c
.RI "QSize \fBminimumSize\fP () const"
.br
.ti -1c
.RI "QSize \fBmaximumSize\fP () const"
.br
.ti -1c
.RI "\fBSizeConstraintRect\fP \fBsizeConstraintRect\fP () const"
.br
.ti -1c
.RI "\fBQCPMarginGroup\fP * \fBmarginGroup\fP (\fBQCP::MarginSide\fP side) const"
.br
.ti -1c
.RI "QHash< \fBQCP::MarginSide\fP, \fBQCPMarginGroup\fP * > \fBmarginGroups\fP () const"
.br
.ti -1c
.RI "void \fBsetOuterRect\fP (const QRect &\fBrect\fP)"
.br
.ti -1c
.RI "void \fBsetMargins\fP (const QMargins &margins)"
.br
.ti -1c
.RI "void \fBsetMinimumMargins\fP (const QMargins &margins)"
.br
.ti -1c
.RI "void \fBsetAutoMargins\fP (QCP::MarginSides sides)"
.br
.ti -1c
.RI "void \fBsetMinimumSize\fP (const QSize &size)"
.br
.ti -1c
.RI "void \fBsetMinimumSize\fP (int width, int height)"
.br
.ti -1c
.RI "void \fBsetMaximumSize\fP (const QSize &size)"
.br
.ti -1c
.RI "void \fBsetMaximumSize\fP (int width, int height)"
.br
.ti -1c
.RI "void \fBsetSizeConstraintRect\fP (\fBSizeConstraintRect\fP constraintRect)"
.br
.ti -1c
.RI "void \fBsetMarginGroup\fP (QCP::MarginSides sides, \fBQCPMarginGroup\fP *group)"
.br
.ti -1c
.RI "virtual void \fBupdate\fP (\fBUpdatePhase\fP phase)"
.br
.ti -1c
.RI "virtual QSize \fBminimumOuterSizeHint\fP () const"
.br
.ti -1c
.RI "virtual QSize \fBmaximumOuterSizeHint\fP () const"
.br
.ti -1c
.RI "virtual QList< \fBQCPLayoutElement\fP * > \fBelements\fP (bool recursive) const"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE"
.br
.in -1c

Public Member Functions inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "\fBQCPLayerable\fP (\fBQCustomPlot\fP *plot, QString targetLayer=QString(), \fBQCPLayerable\fP *\fBparentLayerable\fP=0)"
.br
.ti -1c
.RI "bool \fBvisible\fP () const"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBparentPlot\fP () const"
.br
.ti -1c
.RI "\fBQCPLayerable\fP * \fBparentLayerable\fP () const"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBlayer\fP () const"
.br
.ti -1c
.RI "bool \fBantialiased\fP () const"
.br
.ti -1c
.RI "void \fBsetVisible\fP (bool on)"
.br
.ti -1c
.RI "Q_SLOT bool \fBsetLayer\fP (\fBQCPLayer\fP *layer)"
.br
.ti -1c
.RI "bool \fBsetLayer\fP (const QString &layerName)"
.br
.ti -1c
.RI "void \fBsetAntialiased\fP (bool enabled)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const"
.br
.ti -1c
.RI "bool \fBrealVisibility\fP () const"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "void \fBupdateGradientImage\fP ()"
.br
.ti -1c
.RI "Q_SLOT void \fBaxisSelectionChanged\fP (QCPAxis::SelectableParts selectedParts)"
.br
.ti -1c
.RI "Q_SLOT void \fBaxisSelectableChanged\fP (QCPAxis::SelectableParts selectableParts)"
.br
.ti -1c
.RI "virtual int \fBcalculateAutoMargin\fP (\fBQCP::MarginSide\fP side) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBmousePressEvent\fP (QMouseEvent *event, const QVariant &details) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBmouseMoveEvent\fP (QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBmouseReleaseEvent\fP (QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBwheelEvent\fP (QWheelEvent *event) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBupdate\fP (\fBUpdatePhase\fP phase) Q_DECL_OVERRIDE"
.br
.in -1c

Protected Member Functions inherited from \fBQCPAxisRect\fP
.in +1c
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual int \fBcalculateAutoMargin\fP (\fBQCP::MarginSide\fP side) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBlayoutChanged\fP () Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBmousePressEvent\fP (QMouseEvent *event, const QVariant &details) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBmouseMoveEvent\fP (QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBmouseReleaseEvent\fP (QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBwheelEvent\fP (QWheelEvent *event) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "void \fBdrawBackground\fP (\fBQCPPainter\fP *painter)"
.br
.ti -1c
.RI "void \fBupdateAxesOffset\fP (\fBQCPAxis::AxisType\fP type)"
.br
.in -1c

Protected Member Functions inherited from \fBQCPLayoutElement\fP
.in +1c
.ti -1c
.RI "virtual int \fBcalculateAutoMargin\fP (\fBQCP::MarginSide\fP side)"
.br
.ti -1c
.RI "virtual void \fBlayoutChanged\fP ()"
.br
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBparentPlotInitialized\fP (\fBQCustomPlot\fP *parentPlot) Q_DECL_OVERRIDE"
.br
.in -1c

Protected Member Functions inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "virtual void \fBparentPlotInitialized\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "virtual \fBQCP::Interaction\fP \fBselectionCategory\fP () const"
.br
.ti -1c
.RI "virtual QRect \fBclipRect\fP () const"
.br
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const =0"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter)=0"
.br
.ti -1c
.RI "virtual void \fBselectEvent\fP (QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBdeselectEvent\fP (bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBmousePressEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBmouseMoveEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseReleaseEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseDoubleClickEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBwheelEvent\fP (QWheelEvent *event)"
.br
.ti -1c
.RI "void \fBinitializeParentPlot\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "void \fBsetParentLayerable\fP (\fBQCPLayerable\fP *\fBparentLayerable\fP)"
.br
.ti -1c
.RI "bool \fBmoveToLayer\fP (\fBQCPLayer\fP *layer, bool prepend)"
.br
.ti -1c
.RI "void \fBapplyAntialiasingHint\fP (\fBQCPPainter\fP *painter, bool localAntialiased, \fBQCP::AntialiasedElement\fP overrideElement) const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBQCPColorScale\fP * \fBmParentColorScale\fP"
.br
.ti -1c
.RI "QImage \fBmGradientImage\fP"
.br
.ti -1c
.RI "bool \fBmGradientImageInvalidated\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPAxisRect\fP
.in +1c
.ti -1c
.RI "QBrush \fBmBackgroundBrush\fP"
.br
.ti -1c
.RI "QPixmap \fBmBackgroundPixmap\fP"
.br
.ti -1c
.RI "QPixmap \fBmScaledBackgroundPixmap\fP"
.br
.ti -1c
.RI "bool \fBmBackgroundScaled\fP"
.br
.ti -1c
.RI "Qt::AspectRatioMode \fBmBackgroundScaledMode\fP"
.br
.ti -1c
.RI "\fBQCPLayoutInset\fP * \fBmInsetLayout\fP"
.br
.ti -1c
.RI "Qt::Orientations \fBmRangeDrag\fP"
.br
.ti -1c
.RI "Qt::Orientations \fBmRangeZoom\fP"
.br
.ti -1c
.RI "QList< QPointer< \fBQCPAxis\fP > > \fBmRangeDragHorzAxis\fP"
.br
.ti -1c
.RI "QList< QPointer< \fBQCPAxis\fP > > \fBmRangeDragVertAxis\fP"
.br
.ti -1c
.RI "QList< QPointer< \fBQCPAxis\fP > > \fBmRangeZoomHorzAxis\fP"
.br
.ti -1c
.RI "QList< QPointer< \fBQCPAxis\fP > > \fBmRangeZoomVertAxis\fP"
.br
.ti -1c
.RI "double \fBmRangeZoomFactorHorz\fP"
.br
.ti -1c
.RI "double \fBmRangeZoomFactorVert\fP"
.br
.ti -1c
.RI "QList< \fBQCPRange\fP > \fBmDragStartHorzRange\fP"
.br
.ti -1c
.RI "QList< \fBQCPRange\fP > \fBmDragStartVertRange\fP"
.br
.ti -1c
.RI "QCP::AntialiasedElements \fBmAADragBackup\fP"
.br
.ti -1c
.RI "QCP::AntialiasedElements \fBmNotAADragBackup\fP"
.br
.ti -1c
.RI "bool \fBmDragging\fP"
.br
.ti -1c
.RI "QHash< \fBQCPAxis::AxisType\fP, QList< \fBQCPAxis\fP * > > \fBmAxes\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPLayoutElement\fP
.in +1c
.ti -1c
.RI "\fBQCPLayout\fP * \fBmParentLayout\fP"
.br
.ti -1c
.RI "QSize \fBmMinimumSize\fP"
.br
.ti -1c
.RI "QSize \fBmMaximumSize\fP"
.br
.ti -1c
.RI "\fBSizeConstraintRect\fP \fBmSizeConstraintRect\fP"
.br
.ti -1c
.RI "QRect \fBmRect\fP"
.br
.ti -1c
.RI "QRect \fBmOuterRect\fP"
.br
.ti -1c
.RI "QMargins \fBmMargins\fP"
.br
.ti -1c
.RI "QMargins \fBmMinimumMargins\fP"
.br
.ti -1c
.RI "QCP::MarginSides \fBmAutoMargins\fP"
.br
.ti -1c
.RI "QHash< \fBQCP::MarginSide\fP, \fBQCPMarginGroup\fP * > \fBmMarginGroups\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "bool \fBmVisible\fP"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBmParentPlot\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPLayerable\fP > \fBmParentLayerable\fP"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBmLayer\fP"
.br
.ti -1c
.RI "bool \fBmAntialiased\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBQCPColorScale\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Public Types inherited from \fBQCPLayoutElement\fP
.in +1c
.ti -1c
.RI "enum \fBUpdatePhase\fP { \fBupPreparation\fP, \fBupMargins\fP, \fBupLayout\fP }"
.br
.ti -1c
.RI "enum \fBSizeConstraintRect\fP { \fBscrInnerRect\fP, \fBscrOuterRect\fP }"
.br
.in -1c

Signals inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "void \fBlayerChanged\fP (\fBQCPLayer\fP *newLayer)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB5014\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPColorScaleAxisRectPrivate::QCPColorScaleAxisRectPrivate (\fBQCPColorScale\fP * parentColorScale)\fC [explicit]\fP"
Creates a new instance, as a child of \fIparentColorScale\fP\&. 
.PP
Definition at line \fB19750\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void QCPColorScaleAxisRectPrivate::axisSelectableChanged (QCPAxis::SelectableParts selectableParts)\fC [protected]\fP"

.PP
Definition at line \fB19880\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorScaleAxisRectPrivate::axisSelectionChanged (QCPAxis::SelectableParts selectedParts)\fC [protected]\fP"

.PP
Definition at line \fB19855\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "int QCPAxisRect::calculateAutoMargin (\fBQCP::MarginSide\fP side)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPAxisRect\fP\&.
.PP
Definition at line \fB4683\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorScaleAxisRectPrivate::draw (\fBQCPPainter\fP * painter)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPAxisRect\fP\&.
.PP
Definition at line \fB19790\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxisRect::mouseMoveEvent (QMouseEvent * event, const QPointF & startPos)\fC [protected]\fP, \fC [virtual]\fP"
This event gets called when the user moves the mouse while holding a mouse button, after this layerable has become the mouse grabber by accepting the preceding \fBmousePressEvent\fP\&.
.PP
The current pixel position of the cursor on the \fBQCustomPlot\fP widget is accessible via \fCevent->pos()\fP\&. The parameter \fIstartPos\fP indicates the position where the initial \fBmousePressEvent\fP occured, that started the mouse interaction\&.
.PP
The default implementation does nothing\&.
.PP
\fBSee also\fP
.RS 4
\fBmousePressEvent\fP, \fBmouseReleaseEvent\fP, \fBmouseDoubleClickEvent\fP, \fBwheelEvent\fP 
.RE
.PP

.PP
Reimplemented from \fBQCPAxisRect\fP\&.
.PP
Definition at line \fB4687\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxisRect::mousePressEvent (QMouseEvent * event, const QVariant & details)\fC [protected]\fP, \fC [virtual]\fP"
This event gets called when the user presses a mouse button while the cursor is over the layerable\&. Whether a cursor is over the layerable is decided by a preceding call to \fBselectTest\fP\&.
.PP
The current pixel position of the cursor on the \fBQCustomPlot\fP widget is accessible via \fCevent->pos()\fP\&. The parameter \fIdetails\fP contains layerable-specific details about the hit, which were generated in the previous call to \fBselectTest\fP\&. For example, One-dimensional plottables like \fBQCPGraph\fP or \fBQCPBars\fP convey the clicked data point in the \fIdetails\fP parameter, as \fBQCPDataSelection\fP packed as QVariant\&. Multi-part objects convey the specific \fCSelectablePart\fP that was hit (e\&.g\&. \fBQCPAxis::SelectablePart\fP in the case of axes)\&.
.PP
\fBQCustomPlot\fP uses an event propagation system that works the same as Qt's system\&. If your layerable doesn't reimplement the \fBmousePressEvent\fP or explicitly calls \fCevent->ignore()\fP in its reimplementation, the event will be propagated to the next layerable in the stacking order\&.
.PP
Once a layerable has accepted the \fBmousePressEvent\fP, it is considered the mouse grabber and will receive all following calls to \fBmouseMoveEvent\fP or \fBmouseReleaseEvent\fP for this mouse interaction (a 'mouse interaction' in this context ends with the release)\&.
.PP
The default implementation does nothing except explicitly ignoring the event with \fCevent->ignore()\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBmouseMoveEvent\fP, \fBmouseReleaseEvent\fP, \fBmouseDoubleClickEvent\fP, \fBwheelEvent\fP 
.RE
.PP

.PP
Reimplemented from \fBQCPAxisRect\fP\&.
.PP
Definition at line \fB4686\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxisRect::mouseReleaseEvent (QMouseEvent * event, const QPointF & startPos)\fC [protected]\fP, \fC [virtual]\fP"
This event gets called when the user releases the mouse button, after this layerable has become the mouse grabber by accepting the preceding \fBmousePressEvent\fP\&.
.PP
The current pixel position of the cursor on the \fBQCustomPlot\fP widget is accessible via \fCevent->pos()\fP\&. The parameter \fIstartPos\fP indicates the position where the initial \fBmousePressEvent\fP occured, that started the mouse interaction\&.
.PP
The default implementation does nothing\&.
.PP
\fBSee also\fP
.RS 4
\fBmousePressEvent\fP, \fBmouseMoveEvent\fP, \fBmouseDoubleClickEvent\fP, \fBwheelEvent\fP 
.RE
.PP

.PP
Reimplemented from \fBQCPAxisRect\fP\&.
.PP
Definition at line \fB4688\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxisRect::update (\fBUpdatePhase\fP phase)\fC [protected]\fP, \fC [virtual]\fP"
This method is called automatically upon replot and doesn't need to be called by users of \fBQCPAxisRect\fP\&.
.PP
Calls the base class implementation to update the margins (see \fBQCPLayoutElement::update\fP), and finally passes the \fBrect\fP to the inset layout (\fBinsetLayout\fP) and calls its QCPInsetLayout::update function\&.
.PP
\\seebaseclassmethod 
.PP
Reimplemented from \fBQCPAxisRect\fP\&.
.PP
Definition at line \fB4658\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPColorScaleAxisRectPrivate::updateGradientImage ()\fC [protected]\fP"

.PP
Definition at line \fB19812\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxisRect::wheelEvent (QWheelEvent * event)\fC [protected]\fP, \fC [virtual]\fP"
This event gets called when the user turns the mouse scroll wheel while the cursor is over the layerable\&. Whether a cursor is over the layerable is decided by a preceding call to \fBselectTest\fP\&.
.PP
The current pixel position of the cursor on the \fBQCustomPlot\fP widget is accessible via \fCevent->pos()\fP\&.
.PP
The \fCevent->delta()\fP indicates how far the mouse wheel was turned, which is usually +/- 120 for single rotation steps\&. However, if the mouse wheel is turned rapidly, multiple steps may accumulate to one event, making \fCevent->delta()\fP larger\&. On the other hand, if the wheel has very smooth steps or none at all, the delta may be smaller\&.
.PP
The default implementation does nothing\&.
.PP
\fBSee also\fP
.RS 4
\fBmousePressEvent\fP, \fBmouseMoveEvent\fP, \fBmouseReleaseEvent\fP, \fBmouseDoubleClickEvent\fP 
.RE
.PP

.PP
Reimplemented from \fBQCPAxisRect\fP\&.
.PP
Definition at line \fB4689\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBQCPColorScale\fP\fC [friend]\fP"

.PP
Definition at line \fB5034\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "QImage QCPColorScaleAxisRectPrivate::mGradientImage\fC [protected]\fP"

.PP
Definition at line \fB5021\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPColorScaleAxisRectPrivate::mGradientImageInvalidated\fC [protected]\fP"

.PP
Definition at line \fB5022\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPColorScale\fP* QCPColorScaleAxisRectPrivate::mParentColorScale\fC [protected]\fP"

.PP
Definition at line \fB5020\fP of file \fBqcustomplot\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OmronPID from the source code\&.
