.TH "QCPRange" 3 "Wed Mar 15 2023" "OmronPID" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPRange \- Represents the range an axis is encompassing\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPRange\fP ()"
.br
.ti -1c
.RI "\fBQCPRange\fP (double lower, double upper)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBQCPRange\fP &other) const"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBQCPRange\fP &other) const"
.br
.ti -1c
.RI "\fBQCPRange\fP & \fBoperator+=\fP (const double &value)"
.br
.ti -1c
.RI "\fBQCPRange\fP & \fBoperator\-=\fP (const double &value)"
.br
.ti -1c
.RI "\fBQCPRange\fP & \fBoperator*=\fP (const double &value)"
.br
.ti -1c
.RI "\fBQCPRange\fP & \fBoperator/=\fP (const double &value)"
.br
.ti -1c
.RI "double \fBsize\fP () const"
.br
.ti -1c
.RI "double \fBcenter\fP () const"
.br
.ti -1c
.RI "void \fBnormalize\fP ()"
.br
.ti -1c
.RI "void \fBexpand\fP (const \fBQCPRange\fP &otherRange)"
.br
.ti -1c
.RI "void \fBexpand\fP (double includeCoord)"
.br
.ti -1c
.RI "\fBQCPRange\fP \fBexpanded\fP (const \fBQCPRange\fP &otherRange) const"
.br
.ti -1c
.RI "\fBQCPRange\fP \fBexpanded\fP (double includeCoord) const"
.br
.ti -1c
.RI "\fBQCPRange\fP \fBbounded\fP (double lowerBound, double upperBound) const"
.br
.ti -1c
.RI "\fBQCPRange\fP \fBsanitizedForLogScale\fP () const"
.br
.ti -1c
.RI "\fBQCPRange\fP \fBsanitizedForLinScale\fP () const"
.br
.ti -1c
.RI "bool \fBcontains\fP (double value) const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBvalidRange\fP (double lower, double upper)"
.br
.ti -1c
.RI "static bool \fBvalidRange\fP (const \fBQCPRange\fP &range)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "double \fBlower\fP"
.br
.ti -1c
.RI "double \fBupper\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const double \fBminRange\fP = 1e\-280"
.br
.ti -1c
.RI "static const double \fBmaxRange\fP = 1e250"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "const \fBQCPRange\fP \fBoperator+\fP (const \fBQCPRange\fP &, double)"
.br
.ti -1c
.RI "const \fBQCPRange\fP \fBoperator+\fP (double, const \fBQCPRange\fP &)"
.br
.ti -1c
.RI "const \fBQCPRange\fP \fBoperator\-\fP (const \fBQCPRange\fP &range, double value)"
.br
.ti -1c
.RI "const \fBQCPRange\fP \fBoperator*\fP (const \fBQCPRange\fP &range, double value)"
.br
.ti -1c
.RI "const \fBQCPRange\fP \fBoperator*\fP (double value, const \fBQCPRange\fP &range)"
.br
.ti -1c
.RI "const \fBQCPRange\fP \fBoperator/\fP (const \fBQCPRange\fP &range, double value)"
.br
.in -1c
.SS "Related Functions"
(Note that these are not member functions\&.) 
.in +1c
.ti -1c
.RI "QDebug \fBoperator<<\fP (QDebug d, const \fBQCPRange\fP &range)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Represents the range an axis is encompassing\&. 

contains a \fIlower\fP and \fIupper\fP double value and provides convenience input, output and modification functions\&.
.PP
\fBSee also\fP
.RS 4
\fBQCPAxis::setRange\fP 
.RE
.PP

.PP
Definition at line \fB772\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPRange::QCPRange ()"
Constructs a range with \fIlower\fP and \fIupper\fP set to zero\&. 
.PP
Definition at line \fB1895\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QCPRange::QCPRange (double lower, double upper)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Constructs a range with the specified \fIlower\fP and \fIupper\fP values\&.
.PP
The resulting range will be normalized (see \fBnormalize\fP), so if \fIlower\fP is not numerically smaller than \fIupper\fP, they will be swapped\&. 
.PP
Definition at line \fB1908\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBQCPRange\fP QCPRange::bounded (double lowerBound, double upperBound) const"
Returns this range, possibly modified to not exceed the bounds provided as \fIlowerBound\fP and \fIupperBound\fP\&. If possible, the size of the current range is preserved in the process\&.
.PP
If the range shall only be bounded at the lower side, you can set \fIupperBound\fP to \fBQCPRange::maxRange\fP\&. If it shall only be bounded at the upper side, set \fIlowerBound\fP to -\fBQCPRange::maxRange\fP\&. 
.PP
Definition at line \fB1998\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "double QCPRange::center () const\fC [inline]\fP"
Returns the center of the range, i\&.e\&. (\fIupper+\fIlower\fP)*0\fP\&.5 
.PP
Definition at line \fB795\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPRange::contains (double value) const\fC [inline]\fP"
Returns true when \fIvalue\fP lies within or exactly on the borders of the range\&. 
.PP
Definition at line \fB804\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPRange::expand (const \fBQCPRange\fP & otherRange)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Expands this range such that \fIotherRange\fP is contained in the new range\&. It is assumed that both this range and \fIotherRange\fP are normalized (see \fBnormalize\fP)\&.
.PP
If this range contains NaN as lower or upper bound, it will be replaced by the respective bound of \fIotherRange\fP\&.
.PP
If \fIotherRange\fP is already inside the current range, this function does nothing\&.
.PP
\fBSee also\fP
.RS 4
\fBexpanded\fP 
.RE
.PP

.PP
Definition at line \fB1927\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPRange::expand (double includeCoord)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Expands this range such that \fIincludeCoord\fP is contained in the new range\&. It is assumed that this range is normalized (see \fBnormalize\fP)\&.
.PP
If this range contains NaN as lower or upper bound, the respective bound will be set to \fIincludeCoord\fP\&.
.PP
If \fIincludeCoord\fP is already inside the current range, this function does nothing\&.
.PP
\fBSee also\fP
.RS 4
\fBexpand\fP 
.RE
.PP

.PP
Definition at line \fB1947\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPRange\fP QCPRange::expanded (const \fBQCPRange\fP & otherRange) const"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Returns an expanded range that contains this and \fIotherRange\fP\&. It is assumed that both this range and \fIotherRange\fP are normalized (see \fBnormalize\fP)\&.
.PP
If this range contains NaN as lower or upper bound, the returned range's bound will be taken from \fIotherRange\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBexpand\fP 
.RE
.PP

.PP
Definition at line \fB1966\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPRange\fP QCPRange::expanded (double includeCoord) const"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Returns an expanded range that includes the specified \fIincludeCoord\fP\&. It is assumed that this range is normalized (see \fBnormalize\fP)\&.
.PP
If this range contains NaN as lower or upper bound, the returned range's bound will be set to \fIincludeCoord\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBexpand\fP 
.RE
.PP

.PP
Definition at line \fB1983\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPRange::normalize ()\fC [inline]\fP"
Makes sure \fIlower\fP is numerically smaller than \fIupper\fP\&. If this is not the case, the values are swapped\&. 
.PP
Definition at line \fB796\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPRange::operator!= (const \fBQCPRange\fP & other) const\fC [inline]\fP"

.PP
Definition at line \fB781\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPRange\fP & QCPRange::operator*= (const double & value)\fC [inline]\fP"
Multiplies both boundaries of the range by \fIvalue\fP\&. 
.PP
Definition at line \fB785\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPRange\fP & QCPRange::operator+= (const double & value)\fC [inline]\fP"
Adds \fIvalue\fP to both boundaries of the range\&. 
.PP
Definition at line \fB783\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPRange\fP & QCPRange::operator\-= (const double & value)\fC [inline]\fP"
Subtracts \fIvalue\fP from both boundaries of the range\&. 
.PP
Definition at line \fB784\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPRange\fP & QCPRange::operator/= (const double & value)\fC [inline]\fP"
Divides both boundaries of the range by \fIvalue\fP\&. 
.PP
Definition at line \fB786\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPRange::operator== (const \fBQCPRange\fP & other) const\fC [inline]\fP"

.PP
Definition at line \fB780\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPRange\fP QCPRange::sanitizedForLinScale () const"
Returns a sanitized version of the range\&. Sanitized means for linear scales, that \fIlower\fP will always be numerically smaller (or equal) to \fIupper\fP\&. 
.PP
Definition at line \fB2082\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPRange\fP QCPRange::sanitizedForLogScale () const"
Returns a sanitized version of the range\&. Sanitized means for logarithmic scales, that the range won't span the positive and negative sign domain, i\&.e\&. contain zero\&. Further \fIlower\fP will always be numerically smaller (or equal) to \fIupper\fP\&.
.PP
If the original range does span positive and negative sign domains or contains zero, the returned range will try to approximate the original range as good as possible\&. If the positive interval of the original range is wider than the negative interval, the returned range will only contain the positive interval, with lower bound set to \fIrangeFac\fP or \fIrangeFac\fP *\fIupper\fP, whichever is closer to zero\&. Same procedure is used if the negative interval is wider than the positive interval, this time by changing the \fIupper\fP bound\&. 
.PP
Definition at line \fB2033\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "double QCPRange::size () const\fC [inline]\fP"
Returns the size of the range, i\&.e\&. \fIupper-\fIlower\fP \fP 
.PP
Definition at line \fB794\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPRange::validRange (const \fBQCPRange\fP & range)\fC [static]\fP"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Checks, whether the specified range is within valid bounds, which are defined as \fBQCPRange::maxRange\fP and \fBQCPRange::minRange\fP\&. A valid range means: 
.PD 0

.IP "\(bu" 2
range bounds within -maxRange and maxRange 
.IP "\(bu" 2
range size above minRange 
.IP "\(bu" 2
range size below maxRange 
.PP

.PP
Definition at line \fB2116\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPRange::validRange (double lower, double upper)\fC [static]\fP"
Checks, whether the specified range is within valid bounds, which are defined as \fBQCPRange::maxRange\fP and \fBQCPRange::minRange\fP\&. A valid range means: 
.PD 0

.IP "\(bu" 2
range bounds within -maxRange and maxRange 
.IP "\(bu" 2
range size above minRange 
.IP "\(bu" 2
range size below maxRange 
.PP

.PP
Definition at line \fB2097\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "const \fBQCPRange\fP operator* (const \fBQCPRange\fP & range, double value)\fC [friend]\fP"
Multiplies both boundaries of the range by \fIvalue\fP\&. 
.PP
Definition at line \fB857\fP of file \fBqcustomplot\&.h\fP\&.
.SS "const \fBQCPRange\fP operator* (double value, const \fBQCPRange\fP & range)\fC [friend]\fP"
Multiplies both boundaries of the range by \fIvalue\fP\&. 
.PP
Definition at line \fB867\fP of file \fBqcustomplot\&.h\fP\&.
.SS "const \fBQCPRange\fP operator+ (const \fBQCPRange\fP & range, double value)\fC [friend]\fP"
Adds \fIvalue\fP to both boundaries of the range\&. 
.PP
Definition at line \fB827\fP of file \fBqcustomplot\&.h\fP\&.
.SS "const \fBQCPRange\fP operator+ (double value, const \fBQCPRange\fP & range)\fC [friend]\fP"
Adds \fIvalue\fP to both boundaries of the range\&. 
.PP
Definition at line \fB837\fP of file \fBqcustomplot\&.h\fP\&.
.SS "const \fBQCPRange\fP operator\- (const \fBQCPRange\fP & range, double value)\fC [friend]\fP"
Subtracts \fIvalue\fP from both boundaries of the range\&. 
.PP
Definition at line \fB847\fP of file \fBqcustomplot\&.h\fP\&.
.SS "const \fBQCPRange\fP operator/ (const \fBQCPRange\fP & range, double value)\fC [friend]\fP"
Divides both boundaries of the range by \fIvalue\fP\&. 
.PP
Definition at line \fB877\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QDebug operator<< (QDebug d, const \fBQCPRange\fP & range)\fC [related]\fP"
Prints \fIrange\fP in a human readable format to the qDebug output\&. 
.PP
Definition at line \fB818\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "double QCPRange::lower"

.PP
Definition at line \fB775\fP of file \fBqcustomplot\&.h\fP\&.
.SS "const double QCPRange::maxRange = 1e250\fC [static]\fP"
Maximum values (negative and positive) the range will accept in range-changing functions\&. Larger absolute values would cause errors due to the 11-bit exponent of double precision numbers, corresponding to a maximum magnitude of roughly 1e308\&.
.PP
\fBWarning\fP
.RS 4
Do not use this constant to indicate 'arbitrarily large' values in plotting logic (as values that will appear in the plot)! It is intended only as a bound to compare against, e\&.g\&. to prevent axis ranges from obtaining overflowing ranges\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBvalidRange\fP, \fBminRange\fP 
.RE
.PP

.PP
Definition at line \fB809\fP of file \fBqcustomplot\&.h\fP\&.
.SS "const double QCPRange::minRange = 1e\-280\fC [static]\fP"
Minimum range size (\fIupper\fP - \fIlower\fP) the range changing functions will accept\&. Smaller intervals would cause errors due to the 11-bit exponent of double precision numbers, corresponding to a minimum magnitude of roughly 1e-308\&.
.PP
\fBWarning\fP
.RS 4
Do not use this constant to indicate 'arbitrarily small' values in plotting logic (as values that will appear in the plot)! It is intended only as a bound to compare against, e\&.g\&. to prevent axis ranges from obtaining underflowing ranges\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBvalidRange\fP, \fBmaxRange\fP 
.RE
.PP

.PP
Definition at line \fB808\fP of file \fBqcustomplot\&.h\fP\&.
.SS "double QCPRange::upper"

.PP
Definition at line \fB775\fP of file \fBqcustomplot\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OmronPID from the source code\&.
