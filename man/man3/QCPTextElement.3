.TH "QCPTextElement" 3 "Wed Mar 15 2023" "OmronPID" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPTextElement \- A layout element displaying a text\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBQCPLayoutElement\fP\&.
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBselectionChanged\fP (bool selected)"
.br
.ti -1c
.RI "void \fBselectableChanged\fP (bool selectable)"
.br
.ti -1c
.RI "void \fBclicked\fP (QMouseEvent *event)"
.br
.ti -1c
.RI "void \fBdoubleClicked\fP (QMouseEvent *event)"
.br
.in -1c

Signals inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "void \fBlayerChanged\fP (\fBQCPLayer\fP *newLayer)"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPTextElement\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "\fBQCPTextElement\fP (\fBQCustomPlot\fP *parentPlot, const QString &text)"
.br
.ti -1c
.RI "\fBQCPTextElement\fP (\fBQCustomPlot\fP *parentPlot, const QString &text, double pointSize)"
.br
.ti -1c
.RI "\fBQCPTextElement\fP (\fBQCustomPlot\fP *parentPlot, const QString &text, const QString &fontFamily, double pointSize)"
.br
.ti -1c
.RI "\fBQCPTextElement\fP (\fBQCustomPlot\fP *parentPlot, const QString &text, const QFont &font)"
.br
.ti -1c
.RI "QString \fBtext\fP () const"
.br
.ti -1c
.RI "int \fBtextFlags\fP () const"
.br
.ti -1c
.RI "QFont \fBfont\fP () const"
.br
.ti -1c
.RI "QColor \fBtextColor\fP () const"
.br
.ti -1c
.RI "QFont \fBselectedFont\fP () const"
.br
.ti -1c
.RI "QColor \fBselectedTextColor\fP () const"
.br
.ti -1c
.RI "bool \fBselectable\fP () const"
.br
.ti -1c
.RI "bool \fBselected\fP () const"
.br
.ti -1c
.RI "void \fBsetText\fP (const QString &text)"
.br
.ti -1c
.RI "void \fBsetTextFlags\fP (int flags)"
.br
.ti -1c
.RI "void \fBsetFont\fP (const QFont &font)"
.br
.ti -1c
.RI "void \fBsetTextColor\fP (const QColor &color)"
.br
.ti -1c
.RI "void \fBsetSelectedFont\fP (const QFont &font)"
.br
.ti -1c
.RI "void \fBsetSelectedTextColor\fP (const QColor &color)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetSelectable\fP (bool selectable)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetSelected\fP (bool selected)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBmousePressEvent\fP (QMouseEvent *event, const QVariant &details) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBmouseReleaseEvent\fP (QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBmouseDoubleClickEvent\fP (QMouseEvent *event, const QVariant &details) Q_DECL_OVERRIDE"
.br
.in -1c

Public Member Functions inherited from \fBQCPLayoutElement\fP
.in +1c
.ti -1c
.RI "\fBQCPLayoutElement\fP (\fBQCustomPlot\fP *parentPlot=0)"
.br
.ti -1c
.RI "\fBQCPLayout\fP * \fBlayout\fP () const"
.br
.ti -1c
.RI "QRect \fBrect\fP () const"
.br
.ti -1c
.RI "QRect \fBouterRect\fP () const"
.br
.ti -1c
.RI "QMargins \fBmargins\fP () const"
.br
.ti -1c
.RI "QMargins \fBminimumMargins\fP () const"
.br
.ti -1c
.RI "QCP::MarginSides \fBautoMargins\fP () const"
.br
.ti -1c
.RI "QSize \fBminimumSize\fP () const"
.br
.ti -1c
.RI "QSize \fBmaximumSize\fP () const"
.br
.ti -1c
.RI "\fBSizeConstraintRect\fP \fBsizeConstraintRect\fP () const"
.br
.ti -1c
.RI "\fBQCPMarginGroup\fP * \fBmarginGroup\fP (\fBQCP::MarginSide\fP side) const"
.br
.ti -1c
.RI "QHash< \fBQCP::MarginSide\fP, \fBQCPMarginGroup\fP * > \fBmarginGroups\fP () const"
.br
.ti -1c
.RI "void \fBsetOuterRect\fP (const QRect &\fBrect\fP)"
.br
.ti -1c
.RI "void \fBsetMargins\fP (const QMargins &margins)"
.br
.ti -1c
.RI "void \fBsetMinimumMargins\fP (const QMargins &margins)"
.br
.ti -1c
.RI "void \fBsetAutoMargins\fP (QCP::MarginSides sides)"
.br
.ti -1c
.RI "void \fBsetMinimumSize\fP (const QSize &size)"
.br
.ti -1c
.RI "void \fBsetMinimumSize\fP (int width, int height)"
.br
.ti -1c
.RI "void \fBsetMaximumSize\fP (const QSize &size)"
.br
.ti -1c
.RI "void \fBsetMaximumSize\fP (int width, int height)"
.br
.ti -1c
.RI "void \fBsetSizeConstraintRect\fP (\fBSizeConstraintRect\fP constraintRect)"
.br
.ti -1c
.RI "void \fBsetMarginGroup\fP (QCP::MarginSides sides, \fBQCPMarginGroup\fP *group)"
.br
.ti -1c
.RI "virtual void \fBupdate\fP (\fBUpdatePhase\fP phase)"
.br
.ti -1c
.RI "virtual QSize \fBminimumOuterSizeHint\fP () const"
.br
.ti -1c
.RI "virtual QSize \fBmaximumOuterSizeHint\fP () const"
.br
.ti -1c
.RI "virtual QList< \fBQCPLayoutElement\fP * > \fBelements\fP (bool recursive) const"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE"
.br
.in -1c

Public Member Functions inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "\fBQCPLayerable\fP (\fBQCustomPlot\fP *plot, QString targetLayer=QString(), \fBQCPLayerable\fP *\fBparentLayerable\fP=0)"
.br
.ti -1c
.RI "bool \fBvisible\fP () const"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBparentPlot\fP () const"
.br
.ti -1c
.RI "\fBQCPLayerable\fP * \fBparentLayerable\fP () const"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBlayer\fP () const"
.br
.ti -1c
.RI "bool \fBantialiased\fP () const"
.br
.ti -1c
.RI "void \fBsetVisible\fP (bool on)"
.br
.ti -1c
.RI "Q_SLOT bool \fBsetLayer\fP (\fBQCPLayer\fP *layer)"
.br
.ti -1c
.RI "bool \fBsetLayer\fP (const QString &layerName)"
.br
.ti -1c
.RI "void \fBsetAntialiased\fP (bool enabled)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const"
.br
.ti -1c
.RI "bool \fBrealVisibility\fP () const"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual QSize \fBminimumOuterSizeHint\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual QSize \fBmaximumOuterSizeHint\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBselectEvent\fP (QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdeselectEvent\fP (bool *selectionStateChanged) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "QFont \fBmainFont\fP () const"
.br
.ti -1c
.RI "QColor \fBmainTextColor\fP () const"
.br
.in -1c

Protected Member Functions inherited from \fBQCPLayoutElement\fP
.in +1c
.ti -1c
.RI "virtual int \fBcalculateAutoMargin\fP (\fBQCP::MarginSide\fP side)"
.br
.ti -1c
.RI "virtual void \fBlayoutChanged\fP ()"
.br
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBparentPlotInitialized\fP (\fBQCustomPlot\fP *parentPlot) Q_DECL_OVERRIDE"
.br
.in -1c

Protected Member Functions inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "virtual void \fBparentPlotInitialized\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "virtual \fBQCP::Interaction\fP \fBselectionCategory\fP () const"
.br
.ti -1c
.RI "virtual QRect \fBclipRect\fP () const"
.br
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const =0"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter)=0"
.br
.ti -1c
.RI "virtual void \fBselectEvent\fP (QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBdeselectEvent\fP (bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBmousePressEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBmouseMoveEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseReleaseEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseDoubleClickEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBwheelEvent\fP (QWheelEvent *event)"
.br
.ti -1c
.RI "void \fBinitializeParentPlot\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "void \fBsetParentLayerable\fP (\fBQCPLayerable\fP *\fBparentLayerable\fP)"
.br
.ti -1c
.RI "bool \fBmoveToLayer\fP (\fBQCPLayer\fP *layer, bool prepend)"
.br
.ti -1c
.RI "void \fBapplyAntialiasingHint\fP (\fBQCPPainter\fP *painter, bool localAntialiased, \fBQCP::AntialiasedElement\fP overrideElement) const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "QString \fBmText\fP"
.br
.ti -1c
.RI "int \fBmTextFlags\fP"
.br
.ti -1c
.RI "QFont \fBmFont\fP"
.br
.ti -1c
.RI "QColor \fBmTextColor\fP"
.br
.ti -1c
.RI "QFont \fBmSelectedFont\fP"
.br
.ti -1c
.RI "QColor \fBmSelectedTextColor\fP"
.br
.ti -1c
.RI "QRect \fBmTextBoundingRect\fP"
.br
.ti -1c
.RI "bool \fBmSelectable\fP"
.br
.ti -1c
.RI "bool \fBmSelected\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPLayoutElement\fP
.in +1c
.ti -1c
.RI "\fBQCPLayout\fP * \fBmParentLayout\fP"
.br
.ti -1c
.RI "QSize \fBmMinimumSize\fP"
.br
.ti -1c
.RI "QSize \fBmMaximumSize\fP"
.br
.ti -1c
.RI "\fBSizeConstraintRect\fP \fBmSizeConstraintRect\fP"
.br
.ti -1c
.RI "QRect \fBmRect\fP"
.br
.ti -1c
.RI "QRect \fBmOuterRect\fP"
.br
.ti -1c
.RI "QMargins \fBmMargins\fP"
.br
.ti -1c
.RI "QMargins \fBmMinimumMargins\fP"
.br
.ti -1c
.RI "QCP::MarginSides \fBmAutoMargins\fP"
.br
.ti -1c
.RI "QHash< \fBQCP::MarginSide\fP, \fBQCPMarginGroup\fP * > \fBmMarginGroups\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "bool \fBmVisible\fP"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBmParentPlot\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPLayerable\fP > \fBmParentLayerable\fP"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBmLayer\fP"
.br
.ti -1c
.RI "bool \fBmAntialiased\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Public Types inherited from \fBQCPLayoutElement\fP
.in +1c
.ti -1c
.RI "enum \fBUpdatePhase\fP { \fBupPreparation\fP, \fBupMargins\fP, \fBupLayout\fP }"
.br
.ti -1c
.RI "enum \fBSizeConstraintRect\fP { \fBscrInnerRect\fP, \fBscrOuterRect\fP }"
.br
.in -1c
.SH "Detailed Description"
.PP 
A layout element displaying a text\&. 

The text may be specified with \fBsetText\fP, the formatting can be controlled with \fBsetFont\fP, \fBsetTextColor\fP, and \fBsetTextFlags\fP\&.
.PP
A text element can be added as follows: 
.PP
.nf

.fi
.PP
 
.PP
Definition at line \fB4926\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPTextElement::QCPTextElement (\fBQCustomPlot\fP * parentPlot)\fC [explicit]\fP"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Creates a new \fBQCPTextElement\fP instance and sets default values\&. The initial text is empty (\fBsetText\fP)\&. 
.PP
Definition at line \fB18886\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QCPTextElement::QCPTextElement (\fBQCustomPlot\fP * parentPlot, const QString & text)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Creates a new \fBQCPTextElement\fP instance and sets default values\&.
.PP
The initial text is set to \fItext\fP\&. 
.PP
Definition at line \fB18911\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QCPTextElement::QCPTextElement (\fBQCustomPlot\fP * parentPlot, const QString & text, double pointSize)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Creates a new \fBQCPTextElement\fP instance and sets default values\&.
.PP
The initial text is set to \fItext\fP with \fIpointSize\fP\&. 
.PP
Definition at line \fB18936\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QCPTextElement::QCPTextElement (\fBQCustomPlot\fP * parentPlot, const QString & text, const QString & fontFamily, double pointSize)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Creates a new \fBQCPTextElement\fP instance and sets default values\&.
.PP
The initial text is set to \fItext\fP with \fIpointSize\fP and the specified \fIfontFamily\fP\&. 
.PP
Definition at line \fB18963\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QCPTextElement::QCPTextElement (\fBQCustomPlot\fP * parentPlot, const QString & text, const QFont & font)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Creates a new \fBQCPTextElement\fP instance and sets default values\&.
.PP
The initial text is set to \fItext\fP with the specified \fIfont\fP\&. 
.PP
Definition at line \fB18983\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void QCPTextElement::applyDefaultAntialiasingHint (\fBQCPPainter\fP * painter) const\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.PP
Definition at line \fB19104\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPTextElement::clicked (QMouseEvent * event)\fC [signal]\fP"
This signal is emitted when the text element is clicked\&.
.PP
\fBSee also\fP
.RS 4
\fBdoubleClicked\fP, \fBselectTest\fP 
.RE
.PP

.SS "void QCPTextElement::deselectEvent (bool * selectionStateChanged)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB19152\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPTextElement::doubleClicked (QMouseEvent * event)\fC [signal]\fP"
This signal is emitted when the text element is double clicked\&.
.PP
\fBSee also\fP
.RS 4
\fBclicked\fP, \fBselectTest\fP 
.RE
.PP

.SS "void QCPTextElement::draw (\fBQCPPainter\fP * painter)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.PP
Definition at line \fB19110\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QFont QCPTextElement::font () const\fC [inline]\fP"

.PP
Definition at line \fB4948\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QFont QCPTextElement::mainFont () const\fC [protected]\fP"

.PP
Definition at line \fB19225\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QColor QCPTextElement::mainTextColor () const\fC [protected]\fP"

.PP
Definition at line \fB19235\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QSize QCPTextElement::maximumOuterSizeHint () const\fC [protected]\fP, \fC [virtual]\fP"
Returns the suggested maximum size this layout element (the \fBouterRect\fP) may be expanded to, if no manual maximum size is set\&.
.PP
if a maximum size (\fBsetMaximumSize\fP) was not set manually, parent layouts use the returned size (usually indirectly through \fBQCPLayout::getFinalMaximumOuterSize\fP) to determine the maximum allowed size of this layout element\&.
.PP
A manual maximum size is considered set if it is smaller than Qt's \fCQWIDGETSIZE_MAX\fP\&.
.PP
The default implementation simply returns \fCQWIDGETSIZE_MAX\fP for both width and height, implying no suggested maximum size\&. Reimplementations may use their detailed knowledge about the layout element's content to provide size hints\&. 
.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.PP
Definition at line \fB19128\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QSize QCPTextElement::minimumOuterSizeHint () const\fC [protected]\fP, \fC [virtual]\fP"
Returns the suggested minimum size this layout element (the \fBouterRect\fP) may be compressed to, if no manual minimum size is set\&.
.PP
if a minimum size (\fBsetMinimumSize\fP) was not set manually, parent layouts use the returned size (usually indirectly through \fBQCPLayout::getFinalMinimumOuterSize\fP) to determine the minimum allowed size of this layout element\&.
.PP
A manual minimum size is considered set if it is non-zero\&.
.PP
The default implementation simply returns the sum of the horizontal margins for the width and the sum of the vertical margins for the height\&. Reimplementations may use their detailed knowledge about the layout element's content to provide size hints\&. 
.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.PP
Definition at line \fB19118\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPTextElement::mouseDoubleClickEvent (QMouseEvent * event, const QVariant & details)\fC [virtual]\fP"
Emits the \fBdoubleClicked\fP signal\&.
.PP
\\seebaseclassmethod 
.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB19214\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPTextElement::mousePressEvent (QMouseEvent * event, const QVariant & details)\fC [virtual]\fP"
Accepts the mouse event in order to emit the according click signal in the \fBmouseReleaseEvent\fP\&.
.PP
\\seebaseclassmethod 
.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB19191\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPTextElement::mouseReleaseEvent (QMouseEvent * event, const QPointF & startPos)\fC [virtual]\fP"
Emits the \fBclicked\fP signal if the cursor hasn't moved by more than a few pixels since the \fBmousePressEvent\fP\&.
.PP
\\seebaseclassmethod 
.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB19203\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPTextElement::selectable () const\fC [inline]\fP"

.PP
Definition at line \fB4952\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPTextElement::selected () const\fC [inline]\fP"

.PP
Definition at line \fB4953\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QFont QCPTextElement::selectedFont () const\fC [inline]\fP"

.PP
Definition at line \fB4950\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QColor QCPTextElement::selectedTextColor () const\fC [inline]\fP"

.PP
Definition at line \fB4951\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPTextElement::selectEvent (QMouseEvent * event, bool additive, const QVariant & details, bool * selectionStateChanged)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB19138\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPTextElement::selectionChanged (bool selected)\fC [signal]\fP"
This signal is emitted when the selection state has changed to \fIselected\fP, either by user interaction or by a direct call to \fBsetSelected\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBsetSelected\fP, \fBsetSelectable\fP 
.RE
.PP

.SS "double QCPTextElement::selectTest (const QPointF & pos, bool onlySelectable, QVariant * details = \fC0\fP) const\fC [virtual]\fP"
Returns 0\&.99*selectionTolerance (see \fBQCustomPlot::setSelectionTolerance\fP) when \fIpos\fP is within the bounding box of the text element's text\&. Note that this bounding box is updated in the draw call\&.
.PP
If \fIpos\fP is outside the text's bounding box or if \fIonlySelectable\fP is true and this text element is not selectable (\fBsetSelectable\fP), returns -1\&.
.PP
\\seebaseclassmethod 
.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.PP
Definition at line \fB19173\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPTextElement::setFont (const QFont & font)"
Sets the \fIfont\fP of the text\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTextColor\fP, \fBsetSelectedFont\fP 
.RE
.PP

.PP
Definition at line \fB19037\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPTextElement::setSelectable (bool selectable)"
Sets whether the user may select this text element\&.
.PP
Note that even when \fIselectable\fP is set to \fCfalse\fP, the selection state may be changed programmatically via \fBsetSelected\fP\&. 
.PP
Definition at line \fB19078\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPTextElement::setSelected (bool selected)"
Sets the selection state of this text element to \fIselected\fP\&. If the selection has changed, \fBselectionChanged\fP is emitted\&.
.PP
Note that this function can change the selection state independently of the current \fBsetSelectable\fP state\&. 
.PP
Definition at line \fB19094\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPTextElement::setSelectedFont (const QFont & font)"
Sets the \fIfont\fP of the text that will be used if the text element is selected (\fBsetSelected\fP)\&.
.PP
\fBSee also\fP
.RS 4
\fBsetFont\fP 
.RE
.PP

.PP
Definition at line \fB19057\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPTextElement::setSelectedTextColor (const QColor & color)"
Sets the \fIcolor\fP of the text that will be used if the text element is selected (\fBsetSelected\fP)\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTextColor\fP 
.RE
.PP

.PP
Definition at line \fB19067\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPTextElement::setText (const QString & text)"
Sets the text that will be displayed to \fItext\fP\&. Multiple lines can be created by insertion of '\\n'\&.
.PP
\fBSee also\fP
.RS 4
\fBsetFont\fP, \fBsetTextColor\fP, \fBsetTextFlags\fP 
.RE
.PP

.PP
Definition at line \fB19002\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPTextElement::setTextColor (const QColor & color)"
Sets the \fIcolor\fP of the text\&.
.PP
\fBSee also\fP
.RS 4
\fBsetFont\fP, \fBsetSelectedTextColor\fP 
.RE
.PP

.PP
Definition at line \fB19047\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPTextElement::setTextFlags (int flags)"
Sets options for text alignment and wrapping behaviour\&. \fIflags\fP is a bitwise OR-combination of \fCQt::AlignmentFlag\fP and \fCQt::TextFlag\fP enums\&.
.PP
Possible enums are:
.IP "\(bu" 2
Qt::AlignLeft
.IP "\(bu" 2
Qt::AlignRight
.IP "\(bu" 2
Qt::AlignHCenter
.IP "\(bu" 2
Qt::AlignJustify
.IP "\(bu" 2
Qt::AlignTop
.IP "\(bu" 2
Qt::AlignBottom
.IP "\(bu" 2
Qt::AlignVCenter
.IP "\(bu" 2
Qt::AlignCenter
.IP "\(bu" 2
Qt::TextDontClip
.IP "\(bu" 2
Qt::TextSingleLine
.IP "\(bu" 2
Qt::TextExpandTabs
.IP "\(bu" 2
Qt::TextShowMnemonic
.IP "\(bu" 2
Qt::TextWordWrap
.IP "\(bu" 2
Qt::TextIncludeTrailingSpaces 
.PP

.PP
Definition at line \fB19027\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QString QCPTextElement::text () const\fC [inline]\fP"

.PP
Definition at line \fB4946\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QColor QCPTextElement::textColor () const\fC [inline]\fP"

.PP
Definition at line \fB4949\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPTextElement::textFlags () const\fC [inline]\fP"

.PP
Definition at line \fB4947\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "QFont QCPTextElement::mFont\fC [protected]\fP"

.PP
Definition at line \fB4981\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPTextElement::mSelectable\fC [protected]\fP"

.PP
Definition at line \fB4986\fP of file \fBqcustomplot\&.h\fP\&.
.SS "bool QCPTextElement::mSelected\fC [protected]\fP"

.PP
Definition at line \fB4986\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QFont QCPTextElement::mSelectedFont\fC [protected]\fP"

.PP
Definition at line \fB4983\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QColor QCPTextElement::mSelectedTextColor\fC [protected]\fP"

.PP
Definition at line \fB4984\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QString QCPTextElement::mText\fC [protected]\fP"

.PP
Definition at line \fB4979\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QRect QCPTextElement::mTextBoundingRect\fC [protected]\fP"

.PP
Definition at line \fB4985\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QColor QCPTextElement::mTextColor\fC [protected]\fP"

.PP
Definition at line \fB4982\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPTextElement::mTextFlags\fC [protected]\fP"

.PP
Definition at line \fB4980\fP of file \fBqcustomplot\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OmronPID from the source code\&.
