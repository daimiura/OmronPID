.TH "QCPPlottableInterface1D" 3 "Wed Mar 15 2023" "OmronPID" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPPlottableInterface1D \- Defines an abstract interface for one-dimensional plottables\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qcustomplot\&.h>\fP
.PP
Inherited by \fBQCPAbstractPlottable1D< QCPBarsData >\fP, \fBQCPAbstractPlottable1D< QCPCurveData >\fP, \fBQCPAbstractPlottable1D< QCPFinancialData >\fP, \fBQCPAbstractPlottable1D< QCPGraphData >\fP, \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP, \fBQCPAbstractPlottable1D< DataType >\fP, and \fBQCPErrorBars\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual int \fBdataCount\fP () const =0"
.br
.ti -1c
.RI "virtual double \fBdataMainKey\fP (int index) const =0"
.br
.ti -1c
.RI "virtual double \fBdataSortKey\fP (int index) const =0"
.br
.ti -1c
.RI "virtual double \fBdataMainValue\fP (int index) const =0"
.br
.ti -1c
.RI "virtual \fBQCPRange\fP \fBdataValueRange\fP (int index) const =0"
.br
.ti -1c
.RI "virtual QPointF \fBdataPixelPosition\fP (int index) const =0"
.br
.ti -1c
.RI "virtual bool \fBsortKeyIsMainKey\fP () const =0"
.br
.ti -1c
.RI "virtual \fBQCPDataSelection\fP \fBselectTestRect\fP (const QRectF &rect, bool onlySelectable) const =0"
.br
.ti -1c
.RI "virtual int \fBfindBegin\fP (double sortKey, bool expandedRange=true) const =0"
.br
.ti -1c
.RI "virtual int \fBfindEnd\fP (double sortKey, bool expandedRange=true) const =0"
.br
.in -1c
.SH "Detailed Description"
.PP 
Defines an abstract interface for one-dimensional plottables\&. 

This class contains only pure virtual methods which define a common interface to the data of one-dimensional plottables\&.
.PP
For example, it is implemented by the template class \fBQCPAbstractPlottable1D\fP (the preferred base class for one-dimensional plottables)\&. So if you use that template class as base class of your one-dimensional plottable, you won't have to care about implementing the 1d interface yourself\&.
.PP
If your plottable doesn't derive from \fBQCPAbstractPlottable1D\fP but still wants to provide a 1d interface (e\&.g\&. like \fBQCPErrorBars\fP does), you should inherit from both \fBQCPAbstractPlottable\fP and \fBQCPPlottableInterface1D\fP and accordingly reimplement the pure virtual methods of the 1d interface, matching your data container\&. Also, reimplement \fBQCPAbstractPlottable::interface1D\fP to return the \fCthis\fP pointer\&.
.PP
If you have a \fBQCPAbstractPlottable\fP pointer, you can check whether it implements this interface by calling \fBQCPAbstractPlottable::interface1D\fP and testing it for a non-zero return value\&. If it indeed implements this interface, you may use it to access the plottable's data without needing to know the exact type of the plottable or its data point type\&. 
.PP
Definition at line \fB3850\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "virtual QCPPlottableInterface1D::~QCPPlottableInterface1D ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Definition at line \fB3853\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "int QCPPlottableInterface1D::dataCount () const\fC [pure virtual]\fP"
Returns the number of data points of the plottable\&. 
.PP
Implemented in \fBQCPAbstractPlottable1D< DataType >\fP, \fBQCPAbstractPlottable1D< QCPBarsData >\fP, \fBQCPAbstractPlottable1D< QCPCurveData >\fP, \fBQCPAbstractPlottable1D< QCPFinancialData >\fP, \fBQCPAbstractPlottable1D< QCPGraphData >\fP, \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP, and \fBQCPErrorBars\fP\&.
.SS "double QCPPlottableInterface1D::dataMainKey (int index) const\fC [pure virtual]\fP"
Returns the main key of the data point at the given \fIindex\fP\&.
.PP
What the main key is, is defined by the plottable's data type\&. See the \fBQCPDataContainer DataType\fP documentation for details about this naming convention\&. 
.PP
Implemented in \fBQCPAbstractPlottable1D< DataType >\fP, \fBQCPAbstractPlottable1D< QCPBarsData >\fP, \fBQCPAbstractPlottable1D< QCPCurveData >\fP, \fBQCPAbstractPlottable1D< QCPFinancialData >\fP, \fBQCPAbstractPlottable1D< QCPGraphData >\fP, \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP, and \fBQCPErrorBars\fP\&.
.SS "double QCPPlottableInterface1D::dataMainValue (int index) const\fC [pure virtual]\fP"
Returns the main value of the data point at the given \fIindex\fP\&.
.PP
What the main value is, is defined by the plottable's data type\&. See the \fBQCPDataContainer DataType\fP documentation for details about this naming convention\&. 
.PP
Implemented in \fBQCPAbstractPlottable1D< DataType >\fP, \fBQCPAbstractPlottable1D< QCPBarsData >\fP, \fBQCPAbstractPlottable1D< QCPCurveData >\fP, \fBQCPAbstractPlottable1D< QCPFinancialData >\fP, \fBQCPAbstractPlottable1D< QCPGraphData >\fP, \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP, and \fBQCPErrorBars\fP\&.
.SS "QPointF QCPPlottableInterface1D::dataPixelPosition (int index) const\fC [pure virtual]\fP"
Returns the pixel position on the widget surface at which the data point at the given \fIindex\fP appears\&.
.PP
Usually this corresponds to the point of \fBdataMainKey/\fP dataMainValue, in pixel coordinates\&. However, depending on the plottable, this might be a different apparent position than just a coord-to-pixel transform of those values\&. For example, \fBQCPBars\fP apparent data values can be shifted depending on their stacking, bar grouping or configured base value\&. 
.PP
Implemented in \fBQCPAbstractPlottable1D< DataType >\fP, \fBQCPAbstractPlottable1D< QCPBarsData >\fP, \fBQCPAbstractPlottable1D< QCPCurveData >\fP, \fBQCPAbstractPlottable1D< QCPFinancialData >\fP, \fBQCPAbstractPlottable1D< QCPGraphData >\fP, \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP, \fBQCPBars\fP, and \fBQCPErrorBars\fP\&.
.SS "double QCPPlottableInterface1D::dataSortKey (int index) const\fC [pure virtual]\fP"
Returns the sort key of the data point at the given \fIindex\fP\&.
.PP
What the sort key is, is defined by the plottable's data type\&. See the \fBQCPDataContainer DataType\fP documentation for details about this naming convention\&. 
.PP
Implemented in \fBQCPAbstractPlottable1D< DataType >\fP, \fBQCPAbstractPlottable1D< QCPBarsData >\fP, \fBQCPAbstractPlottable1D< QCPCurveData >\fP, \fBQCPAbstractPlottable1D< QCPFinancialData >\fP, \fBQCPAbstractPlottable1D< QCPGraphData >\fP, \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP, and \fBQCPErrorBars\fP\&.
.SS "\fBQCPRange\fP QCPPlottableInterface1D::dataValueRange (int index) const\fC [pure virtual]\fP"
Returns the value range of the data point at the given \fIindex\fP\&.
.PP
What the value range is, is defined by the plottable's data type\&. See the \fBQCPDataContainer DataType\fP documentation for details about this naming convention\&. 
.PP
Implemented in \fBQCPAbstractPlottable1D< DataType >\fP, \fBQCPAbstractPlottable1D< QCPBarsData >\fP, \fBQCPAbstractPlottable1D< QCPCurveData >\fP, \fBQCPAbstractPlottable1D< QCPFinancialData >\fP, \fBQCPAbstractPlottable1D< QCPGraphData >\fP, \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP, and \fBQCPErrorBars\fP\&.
.SS "int QCPPlottableInterface1D::findBegin (double sortKey, bool expandedRange = \fCtrue\fP) const\fC [pure virtual]\fP"
Returns the index of the data point with a (sort-)key that is equal to, just below, or just above \fIsortKey\fP\&. If \fIexpandedRange\fP is true, the data point just below \fIsortKey\fP will be considered, otherwise the one just above\&.
.PP
This can be used in conjunction with \fBfindEnd\fP to iterate over data points within a given key range, including or excluding the bounding data points that are just beyond the specified range\&.
.PP
If \fIexpandedRange\fP is true but there are no data points below \fIsortKey\fP, 0 is returned\&.
.PP
If the container is empty, returns 0 (in that case, \fBfindEnd\fP will also return 0, so a loop using these methods will not iterate over the index 0)\&.
.PP
\fBSee also\fP
.RS 4
\fBfindEnd\fP, \fBQCPDataContainer::findBegin\fP 
.RE
.PP

.PP
Implemented in \fBQCPAbstractPlottable1D< DataType >\fP, \fBQCPAbstractPlottable1D< QCPBarsData >\fP, \fBQCPAbstractPlottable1D< QCPCurveData >\fP, \fBQCPAbstractPlottable1D< QCPFinancialData >\fP, \fBQCPAbstractPlottable1D< QCPGraphData >\fP, \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP, and \fBQCPErrorBars\fP\&.
.SS "int QCPPlottableInterface1D::findEnd (double sortKey, bool expandedRange = \fCtrue\fP) const\fC [pure virtual]\fP"
Returns the index one after the data point with a (sort-)key that is equal to, just above, or just below \fIsortKey\fP\&. If \fIexpandedRange\fP is true, the data point just above \fIsortKey\fP will be considered, otherwise the one just below\&.
.PP
This can be used in conjunction with \fBfindBegin\fP to iterate over data points within a given key range, including the bounding data points that are just below and above the specified range\&.
.PP
If \fIexpandedRange\fP is true but there are no data points above \fIsortKey\fP, the index just above the highest data point is returned\&.
.PP
If the container is empty, returns 0\&.
.PP
\fBSee also\fP
.RS 4
\fBfindBegin\fP, \fBQCPDataContainer::findEnd\fP 
.RE
.PP

.PP
Implemented in \fBQCPAbstractPlottable1D< DataType >\fP, \fBQCPAbstractPlottable1D< QCPBarsData >\fP, \fBQCPAbstractPlottable1D< QCPCurveData >\fP, \fBQCPAbstractPlottable1D< QCPFinancialData >\fP, \fBQCPAbstractPlottable1D< QCPGraphData >\fP, \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP, and \fBQCPErrorBars\fP\&.
.SS "\fBQCPDataSelection\fP QCPPlottableInterface1D::selectTestRect (const QRectF & rect, bool onlySelectable) const\fC [pure virtual]\fP"
Returns a data selection containing all the data points of this plottable which are contained (or hit by) \fIrect\fP\&. This is used mainly in the selection rect interaction for data selection (\fBdata selection mechanism\fP)\&.
.PP
If \fIonlySelectable\fP is true, an empty \fBQCPDataSelection\fP is returned if this plottable is not selectable (i\&.e\&. if \fBQCPAbstractPlottable::setSelectable\fP is \fBQCP::stNone\fP)\&.
.PP
\fBNote\fP
.RS 4
\fIrect\fP must be a normalized rect (positive or zero width and height)\&. This is especially important when using the rect of \fBQCPSelectionRect::accepted\fP, which is not necessarily normalized\&. Use \fCQRect::normalized()\fP when passing a rect which might not be normalized\&. 
.RE
.PP

.PP
Implemented in \fBQCPAbstractPlottable1D< DataType >\fP, \fBQCPAbstractPlottable1D< QCPBarsData >\fP, \fBQCPAbstractPlottable1D< QCPCurveData >\fP, \fBQCPAbstractPlottable1D< QCPFinancialData >\fP, \fBQCPAbstractPlottable1D< QCPGraphData >\fP, \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP, \fBQCPBars\fP, \fBQCPStatisticalBox\fP, \fBQCPFinancial\fP, and \fBQCPErrorBars\fP\&.
.SS "bool QCPPlottableInterface1D::sortKeyIsMainKey () const\fC [pure virtual]\fP"
Returns whether the sort key (\fBdataSortKey\fP) is identical to the main key (\fBdataMainKey\fP)\&.
.PP
What the sort and main keys are, is defined by the plottable's data type\&. See the \fBQCPDataContainer DataType\fP documentation for details about this naming convention\&. 
.PP
Implemented in \fBQCPAbstractPlottable1D< DataType >\fP, \fBQCPAbstractPlottable1D< QCPBarsData >\fP, \fBQCPAbstractPlottable1D< QCPCurveData >\fP, \fBQCPAbstractPlottable1D< QCPFinancialData >\fP, \fBQCPAbstractPlottable1D< QCPGraphData >\fP, \fBQCPAbstractPlottable1D< QCPStatisticalBoxData >\fP, and \fBQCPErrorBars\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OmronPID from the source code\&.
