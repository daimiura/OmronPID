.TH "QCPAxisTickerTime" 3 "Wed Mar 15 2023" "OmronPID" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPAxisTickerTime \- Specialized axis ticker for time spans in units of milliseconds to days\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBQCPAxisTicker\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBTimeUnit\fP { \fBtuMilliseconds\fP, \fBtuSeconds\fP, \fBtuMinutes\fP, \fBtuHours\fP, \fBtuDays\fP }"
.br
.in -1c

Public Types inherited from \fBQCPAxisTicker\fP
.in +1c
.ti -1c
.RI "enum \fBTickStepStrategy\fP { \fBtssReadability\fP, \fBtssMeetTickCount\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPAxisTickerTime\fP ()"
.br
.ti -1c
.RI "QString \fBtimeFormat\fP () const"
.br
.ti -1c
.RI "int \fBfieldWidth\fP (\fBTimeUnit\fP unit) const"
.br
.ti -1c
.RI "void \fBsetTimeFormat\fP (const QString &format)"
.br
.ti -1c
.RI "void \fBsetFieldWidth\fP (\fBTimeUnit\fP unit, int width)"
.br
.in -1c

Public Member Functions inherited from \fBQCPAxisTicker\fP
.in +1c
.ti -1c
.RI "\fBQCPAxisTicker\fP ()"
.br
.ti -1c
.RI "\fBTickStepStrategy\fP \fBtickStepStrategy\fP () const"
.br
.ti -1c
.RI "int \fBtickCount\fP () const"
.br
.ti -1c
.RI "double \fBtickOrigin\fP () const"
.br
.ti -1c
.RI "void \fBsetTickStepStrategy\fP (\fBTickStepStrategy\fP strategy)"
.br
.ti -1c
.RI "void \fBsetTickCount\fP (int count)"
.br
.ti -1c
.RI "void \fBsetTickOrigin\fP (double origin)"
.br
.ti -1c
.RI "virtual void \fBgenerate\fP (const \fBQCPRange\fP &range, const QLocale &locale, QChar formatChar, int precision, QVector< double > &ticks, QVector< double > *subTicks, QVector< QString > *tickLabels)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual double \fBgetTickStep\fP (const \fBQCPRange\fP &range) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual int \fBgetSubTickCount\fP (double tickStep) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual QString \fBgetTickLabel\fP (double tick, const QLocale &locale, QChar formatChar, int precision) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "void \fBreplaceUnit\fP (QString &text, \fBTimeUnit\fP unit, int value) const"
.br
.in -1c

Protected Member Functions inherited from \fBQCPAxisTicker\fP
.in +1c
.ti -1c
.RI "virtual double \fBgetTickStep\fP (const \fBQCPRange\fP &range)"
.br
.ti -1c
.RI "virtual int \fBgetSubTickCount\fP (double tickStep)"
.br
.ti -1c
.RI "virtual QString \fBgetTickLabel\fP (double tick, const QLocale &locale, QChar formatChar, int precision)"
.br
.ti -1c
.RI "virtual QVector< double > \fBcreateTickVector\fP (double tickStep, const \fBQCPRange\fP &range)"
.br
.ti -1c
.RI "virtual QVector< double > \fBcreateSubTickVector\fP (int subTickCount, const QVector< double > &ticks)"
.br
.ti -1c
.RI "virtual QVector< QString > \fBcreateLabelVector\fP (const QVector< double > &ticks, const QLocale &locale, QChar formatChar, int precision)"
.br
.ti -1c
.RI "void \fBtrimTicks\fP (const \fBQCPRange\fP &range, QVector< double > &ticks, bool keepOneOutlier) const"
.br
.ti -1c
.RI "double \fBpickClosest\fP (double target, const QVector< double > &candidates) const"
.br
.ti -1c
.RI "double \fBgetMantissa\fP (double input, double *magnitude=0) const"
.br
.ti -1c
.RI "double \fBcleanMantissa\fP (double input) const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "QString \fBmTimeFormat\fP"
.br
.ti -1c
.RI "QHash< \fBTimeUnit\fP, int > \fBmFieldWidth\fP"
.br
.ti -1c
.RI "\fBTimeUnit\fP \fBmSmallestUnit\fP"
.br
.ti -1c
.RI "\fBTimeUnit\fP \fBmBiggestUnit\fP"
.br
.ti -1c
.RI "QHash< \fBTimeUnit\fP, QString > \fBmFormatPattern\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPAxisTicker\fP
.in +1c
.ti -1c
.RI "\fBTickStepStrategy\fP \fBmTickStepStrategy\fP"
.br
.ti -1c
.RI "int \fBmTickCount\fP"
.br
.ti -1c
.RI "double \fBmTickOrigin\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Specialized axis ticker for time spans in units of milliseconds to days\&. 


.PP
This \fBQCPAxisTicker\fP subclass generates ticks that corresponds to time intervals\&.
.PP
The format of the time display in the tick labels is controlled with \fBsetTimeFormat\fP and \fBsetFieldWidth\fP\&. The time coordinate is in the unit of seconds with respect to the time coordinate zero\&. Unlike with \fBQCPAxisTickerDateTime\fP, the ticks don't correspond to a specific calendar date and time\&.
.PP
The time can be displayed in milliseconds, seconds, minutes, hours and days\&. Depending on the largest available unit in the format specified with \fBsetTimeFormat\fP, any time spans above will be carried in that largest unit\&. So for example if the format string is '%m:%s' and a tick at coordinate value 7815 (being 2 hours, 10 minutes and 15 seconds) is created, the resulting tick label will show '130:15' (130 minutes, 15 seconds)\&. If the format string is '%h:%m:%s', the hour unit will be used and the label will thus be '02:10:15'\&. Negative times with respect to the axis zero will carry a leading minus sign\&.
.PP
The ticker can be created and assigned to an axis like this: 
.PP
.nf

.fi
.PP
.PP
Here is an example of a time axis providing time information in days, hours and minutes\&. Due to the axis range spanning a few days and the wanted tick count (\fBsetTickCount\fP), the ticker decided to use tick steps of 12 hours:
.PP
.PP
The format string for this example is 
.PP
.nf

.fi
.PP
.PP
\fBNote\fP
.RS 4
If you rather wish to display calendar dates and times, have a look at \fBQCPAxisTickerDateTime\fP instead\&. 
.RE
.PP

.PP
Definition at line \fB1635\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQCPAxisTickerTime::TimeUnit\fP"
Defines the logical units in which fractions of time spans can be expressed\&.
.PP
\fBSee also\fP
.RS 4
\fBsetFieldWidth\fP, \fBsetTimeFormat\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fItuMilliseconds \fP\fP
Milliseconds, one thousandth of a second (%z in \fBsetTimeFormat\fP) 
.TP
\fB\fItuSeconds \fP\fP
Seconds (%s in \fBsetTimeFormat\fP) 
.TP
\fB\fItuMinutes \fP\fP
Minutes (%m in \fBsetTimeFormat\fP) 
.TP
\fB\fItuHours \fP\fP
Hours (%h in \fBsetTimeFormat\fP) 
.TP
\fB\fItuDays \fP\fP
Days (%d in \fBsetTimeFormat\fP) 
.PP
Definition at line \fB1644\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPAxisTickerTime::QCPAxisTickerTime ()"
Constructs the ticker and sets reasonable default values\&. Axis tickers are commonly created managed by a QSharedPointer, which then can be passed to \fBQCPAxis::setTicker\fP\&. 
.PP
Definition at line \fB6189\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "int QCPAxisTickerTime::fieldWidth (\fBTimeUnit\fP unit) const\fC [inline]\fP"

.PP
Definition at line \fB1656\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPAxisTickerTime::getSubTickCount (double tickStep)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPAxisTicker\fP\&.
.PP
Definition at line \fB6322\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QString QCPAxisTickerTime::getTickLabel (double tick, const QLocale & locale, QChar formatChar, int precision)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPAxisTicker\fP\&.
.PP
Definition at line \fB6348\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "double QCPAxisTickerTime::getTickStep (const \fBQCPRange\fP & range)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPAxisTicker\fP\&.
.PP
Definition at line \fB6271\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxisTickerTime::replaceUnit (QString & text, \fBQCPAxisTickerTime::TimeUnit\fP unit, int value) const\fC [protected]\fP"

.PP
Definition at line \fB6381\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxisTickerTime::setFieldWidth (\fBQCPAxisTickerTime::TimeUnit\fP unit, int width)"
Sets the field widh of the specified \fIunit\fP to be \fIwidth\fP digits, when displayed in the tick label\&. If the number for the specific unit is shorter than \fIwidth\fP, it will be padded with an according number of zeros to the left in order to reach the field width\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTimeFormat\fP 
.RE
.PP

.PP
Definition at line \fB6257\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxisTickerTime::setTimeFormat (const QString & format)"
Sets the format that will be used to display time in the tick labels\&.
.PP
The available patterns are:
.IP "\(bu" 2
%z for milliseconds
.IP "\(bu" 2
%s for seconds
.IP "\(bu" 2
%m for minutes
.IP "\(bu" 2
%h for hours
.IP "\(bu" 2
%d for days
.PP
.PP
The field width (zero padding) can be controlled for each unit with \fBsetFieldWidth\fP\&.
.PP
The largest unit that appears in \fIformat\fP will carry all the remaining time of a certain tick coordinate, even if it overflows the natural limit of the unit\&. For example, if %m is the largest unit it might become larger than 59 in order to consume larger time values\&. If on the other hand %h is available, the minutes will wrap around to zero after 59 and the time will carry to the hour digit\&. 
.PP
Definition at line \fB6226\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QString QCPAxisTickerTime::timeFormat () const\fC [inline]\fP"

.PP
Definition at line \fB1655\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBTimeUnit\fP QCPAxisTickerTime::mBiggestUnit\fC [protected]\fP"

.PP
Definition at line \fB1668\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QHash<\fBTimeUnit\fP, int> QCPAxisTickerTime::mFieldWidth\fC [protected]\fP"

.PP
Definition at line \fB1665\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QHash<\fBTimeUnit\fP, QString> QCPAxisTickerTime::mFormatPattern\fC [protected]\fP"

.PP
Definition at line \fB1669\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBTimeUnit\fP QCPAxisTickerTime::mSmallestUnit\fC [protected]\fP"

.PP
Definition at line \fB1668\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QString QCPAxisTickerTime::mTimeFormat\fC [protected]\fP"

.PP
Definition at line \fB1664\fP of file \fBqcustomplot\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OmronPID from the source code\&.
