.TH "QCPAxisTickerText" 3 "Wed Mar 15 2023" "OmronPID" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPAxisTickerText \- Specialized axis ticker which allows arbitrary labels at specified coordinates\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBQCPAxisTicker\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPAxisTickerText\fP ()"
.br
.ti -1c
.RI "QMap< double, QString > & \fBticks\fP ()"
.br
.ti -1c
.RI "int \fBsubTickCount\fP () const"
.br
.ti -1c
.RI "void \fBsetTicks\fP (const QMap< double, QString > &\fBticks\fP)"
.br
.ti -1c
.RI "void \fBsetTicks\fP (const QVector< double > &positions, const QVector< QString > labels)"
.br
.ti -1c
.RI "void \fBsetSubTickCount\fP (int subTicks)"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "void \fBaddTick\fP (double position, QString label)"
.br
.ti -1c
.RI "void \fBaddTicks\fP (const QMap< double, QString > &\fBticks\fP)"
.br
.ti -1c
.RI "void \fBaddTicks\fP (const QVector< double > &positions, const QVector< QString > &labels)"
.br
.in -1c

Public Member Functions inherited from \fBQCPAxisTicker\fP
.in +1c
.ti -1c
.RI "\fBQCPAxisTicker\fP ()"
.br
.ti -1c
.RI "\fBTickStepStrategy\fP \fBtickStepStrategy\fP () const"
.br
.ti -1c
.RI "int \fBtickCount\fP () const"
.br
.ti -1c
.RI "double \fBtickOrigin\fP () const"
.br
.ti -1c
.RI "void \fBsetTickStepStrategy\fP (\fBTickStepStrategy\fP strategy)"
.br
.ti -1c
.RI "void \fBsetTickCount\fP (int count)"
.br
.ti -1c
.RI "void \fBsetTickOrigin\fP (double origin)"
.br
.ti -1c
.RI "virtual void \fBgenerate\fP (const \fBQCPRange\fP &range, const QLocale &locale, QChar formatChar, int precision, QVector< double > &ticks, QVector< double > *subTicks, QVector< QString > *tickLabels)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual double \fBgetTickStep\fP (const \fBQCPRange\fP &range) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual int \fBgetSubTickCount\fP (double tickStep) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual QString \fBgetTickLabel\fP (double tick, const QLocale &locale, QChar formatChar, int precision) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual QVector< double > \fBcreateTickVector\fP (double tickStep, const \fBQCPRange\fP &range) Q_DECL_OVERRIDE"
.br
.in -1c

Protected Member Functions inherited from \fBQCPAxisTicker\fP
.in +1c
.ti -1c
.RI "virtual double \fBgetTickStep\fP (const \fBQCPRange\fP &range)"
.br
.ti -1c
.RI "virtual int \fBgetSubTickCount\fP (double tickStep)"
.br
.ti -1c
.RI "virtual QString \fBgetTickLabel\fP (double tick, const QLocale &locale, QChar formatChar, int precision)"
.br
.ti -1c
.RI "virtual QVector< double > \fBcreateTickVector\fP (double tickStep, const \fBQCPRange\fP &range)"
.br
.ti -1c
.RI "virtual QVector< double > \fBcreateSubTickVector\fP (int subTickCount, const QVector< double > &ticks)"
.br
.ti -1c
.RI "virtual QVector< QString > \fBcreateLabelVector\fP (const QVector< double > &ticks, const QLocale &locale, QChar formatChar, int precision)"
.br
.ti -1c
.RI "void \fBtrimTicks\fP (const \fBQCPRange\fP &range, QVector< double > &ticks, bool keepOneOutlier) const"
.br
.ti -1c
.RI "double \fBpickClosest\fP (double target, const QVector< double > &candidates) const"
.br
.ti -1c
.RI "double \fBgetMantissa\fP (double input, double *magnitude=0) const"
.br
.ti -1c
.RI "double \fBcleanMantissa\fP (double input) const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "QMap< double, QString > \fBmTicks\fP"
.br
.ti -1c
.RI "int \fBmSubTickCount\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPAxisTicker\fP
.in +1c
.ti -1c
.RI "\fBTickStepStrategy\fP \fBmTickStepStrategy\fP"
.br
.ti -1c
.RI "int \fBmTickCount\fP"
.br
.ti -1c
.RI "double \fBmTickOrigin\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Public Types inherited from \fBQCPAxisTicker\fP
.in +1c
.ti -1c
.RI "enum \fBTickStepStrategy\fP { \fBtssReadability\fP, \fBtssMeetTickCount\fP }"
.br
.in -1c
.SH "Detailed Description"
.PP 
Specialized axis ticker which allows arbitrary labels at specified coordinates\&. 


.PP
This \fBQCPAxisTicker\fP subclass generates ticks which can be directly specified by the user as coordinates and associated strings\&. They can be passed as a whole with \fBsetTicks\fP or one at a time with \fBaddTick\fP\&. Alternatively you can directly access the internal storage via \fBticks\fP and modify the tick/label data there\&.
.PP
This is useful for cases where the axis represents categories rather than numerical values\&.
.PP
If you are updating the ticks of this ticker regularly and in a dynamic fasion (e\&.g\&. dependent on the axis range), it is a sign that you should probably create an own ticker by subclassing \fBQCPAxisTicker\fP, instead of using this one\&.
.PP
The ticker can be created and assigned to an axis like this: 
.PP
.nf

.fi
.PP
 
.PP
Definition at line \fB1729\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPAxisTickerText::QCPAxisTickerText ()"
Constructs the ticker and sets reasonable default values\&. Axis tickers are commonly created managed by a QSharedPointer, which then can be passed to \fBQCPAxis::setTicker\fP\&. 
.PP
Definition at line \fB6537\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void QCPAxisTickerText::addTick (double position, QString label)"
Adds a single tick to the axis at the given axis coordinate \fIposition\fP, with the provided tick \fIlabel\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBaddTicks\fP, \fBsetTicks\fP, \fBclear\fP 
.RE
.PP

.PP
Definition at line \fB6603\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxisTickerText::addTicks (const QMap< double, QString > & ticks)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Adds the provided \fIticks\fP to the ones already existing\&. The map key of \fIticks\fP corresponds to the axis coordinate, and the map value is the string that will appear as tick label\&.
.PP
An alternative to manipulate ticks is to directly access the internal storage with the \fBticks\fP getter\&.
.PP
\fBSee also\fP
.RS 4
\fBaddTick\fP, \fBsetTicks\fP, \fBclear\fP 
.RE
.PP

.PP
Definition at line \fB6618\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxisTickerText::addTicks (const QVector< double > & positions, const QVector< QString > & labels)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Adds the provided ticks to the ones already existing\&. The entries of \fIpositions\fP correspond to the axis coordinates, and the entries of \fIlabels\fP are the respective strings that will appear as tick labels\&.
.PP
An alternative to manipulate ticks is to directly access the internal storage with the \fBticks\fP getter\&.
.PP
\fBSee also\fP
.RS 4
\fBaddTick\fP, \fBsetTicks\fP, \fBclear\fP 
.RE
.PP

.PP
Definition at line \fB6634\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxisTickerText::clear ()"
Clears all ticks\&.
.PP
An alternative to manipulate ticks is to directly access the internal storage with the \fBticks\fP getter\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTicks\fP, \fBaddTicks\fP, \fBaddTick\fP 
.RE
.PP

.PP
Definition at line \fB6592\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QVector< double > QCPAxisTickerText::createTickVector (double tickStep, const \fBQCPRange\fP & range)\fC [protected]\fP, \fC [virtual]\fP"
Returns the externally provided tick coordinates which are in the specified \fIrange\fP\&. If available, one tick above and below the range is provided in addition, to allow possible sub tick calculation\&. The parameter \fItickStep\fP is ignored\&.
.PP
\\seebaseclassmethod 
.PP
Reimplemented from \fBQCPAxisTicker\fP\&.
.PP
Definition at line \fB6687\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "int QCPAxisTickerText::getSubTickCount (double tickStep)\fC [protected]\fP, \fC [virtual]\fP"
Returns the sub tick count that was configured with \fBsetSubTickCount\fP\&.
.PP
\\seebaseclassmethod 
.PP
Reimplemented from \fBQCPAxisTicker\fP\&.
.PP
Definition at line \fB6660\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QString QCPAxisTickerText::getTickLabel (double tick, const QLocale & locale, QChar formatChar, int precision)\fC [protected]\fP, \fC [virtual]\fP"
Returns the tick label which corresponds to the key \fItick\fP in the internal tick storage\&. Since the labels are provided externally, \fIlocale\fP, \fIformatChar\fP, and \fIprecision\fP are ignored\&.
.PP
\\seebaseclassmethod 
.PP
Reimplemented from \fBQCPAxisTicker\fP\&.
.PP
Definition at line \fB6672\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "double QCPAxisTickerText::getTickStep (const \fBQCPRange\fP & range)\fC [protected]\fP, \fC [virtual]\fP"
Since the tick coordinates are provided externally, this method implementation does nothing\&.
.PP
\\seebaseclassmethod 
.PP
Reimplemented from \fBQCPAxisTicker\fP\&.
.PP
Definition at line \fB6648\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxisTickerText::setSubTickCount (int subTicks)"
Sets the number of sub ticks that shall appear between ticks\&. For \fBQCPAxisTickerText\fP, there is no automatic sub tick count calculation\&. So if sub ticks are needed, they must be configured with this method\&. 
.PP
Definition at line \fB6576\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxisTickerText::setTicks (const QMap< double, QString > & ticks)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Sets the ticks that shall appear on the axis\&. The map key of \fIticks\fP corresponds to the axis coordinate, and the map value is the string that will appear as tick label\&.
.PP
An alternative to manipulate ticks is to directly access the internal storage with the \fBticks\fP getter\&.
.PP
\fBSee also\fP
.RS 4
\fBaddTicks\fP, \fBaddTick\fP, \fBclear\fP 
.RE
.PP

.PP
Definition at line \fB6552\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPAxisTickerText::setTicks (const QVector< double > & positions, const QVector< QString > labels)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Sets the ticks that shall appear on the axis\&. The entries of \fIpositions\fP correspond to the axis coordinates, and the entries of \fIlabels\fP are the respective strings that will appear as tick labels\&.
.PP
\fBSee also\fP
.RS 4
\fBaddTicks\fP, \fBaddTick\fP, \fBclear\fP 
.RE
.PP

.PP
Definition at line \fB6565\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "int QCPAxisTickerText::subTickCount () const\fC [inline]\fP"

.PP
Definition at line \fB1736\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QMap< double, QString > & QCPAxisTickerText::ticks ()\fC [inline]\fP"
Returns a non-const reference to the internal map which stores the tick coordinates and their labels\&.
.PP
You can access the map directly in order to add, remove or manipulate ticks, as an alternative to using the methods provided by \fBQCPAxisTickerText\fP, such as \fBsetTicks\fP and \fBaddTick\fP\&. 
.PP
Definition at line \fB1735\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "int QCPAxisTickerText::mSubTickCount\fC [protected]\fP"

.PP
Definition at line \fB1752\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QMap<double, QString> QCPAxisTickerText::mTicks\fC [protected]\fP"

.PP
Definition at line \fB1751\fP of file \fBqcustomplot\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OmronPID from the source code\&.
