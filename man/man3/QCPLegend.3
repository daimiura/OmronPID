.TH "QCPLegend" 3 "Wed Mar 15 2023" "OmronPID" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPLegend \- Manages a legend inside a \fBQCustomPlot\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBQCPLayoutGrid\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBSelectablePart\fP { \fBspNone\fP = 0x000, \fBspLegendBox\fP = 0x001, \fBspItems\fP = 0x002 }"
.br
.in -1c

Public Types inherited from \fBQCPLayoutGrid\fP
.in +1c
.ti -1c
.RI "enum \fBFillOrder\fP { \fBfoRowsFirst\fP, \fBfoColumnsFirst\fP }"
.br
.in -1c

Public Types inherited from \fBQCPLayoutElement\fP
.in +1c
.ti -1c
.RI "enum \fBUpdatePhase\fP { \fBupPreparation\fP, \fBupMargins\fP, \fBupLayout\fP }"
.br
.ti -1c
.RI "enum \fBSizeConstraintRect\fP { \fBscrInnerRect\fP, \fBscrOuterRect\fP }"
.br
.in -1c
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBselectionChanged\fP (QCPLegend::SelectableParts parts)"
.br
.ti -1c
.RI "void \fBselectableChanged\fP (QCPLegend::SelectableParts parts)"
.br
.in -1c

Signals inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "void \fBlayerChanged\fP (\fBQCPLayer\fP *newLayer)"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPLegend\fP ()"
.br
.ti -1c
.RI "QPen \fBborderPen\fP () const"
.br
.ti -1c
.RI "QBrush \fBbrush\fP () const"
.br
.ti -1c
.RI "QFont \fBfont\fP () const"
.br
.ti -1c
.RI "QColor \fBtextColor\fP () const"
.br
.ti -1c
.RI "QSize \fBiconSize\fP () const"
.br
.ti -1c
.RI "int \fBiconTextPadding\fP () const"
.br
.ti -1c
.RI "QPen \fBiconBorderPen\fP () const"
.br
.ti -1c
.RI "SelectableParts \fBselectableParts\fP () const"
.br
.ti -1c
.RI "SelectableParts \fBselectedParts\fP () const"
.br
.ti -1c
.RI "QPen \fBselectedBorderPen\fP () const"
.br
.ti -1c
.RI "QPen \fBselectedIconBorderPen\fP () const"
.br
.ti -1c
.RI "QBrush \fBselectedBrush\fP () const"
.br
.ti -1c
.RI "QFont \fBselectedFont\fP () const"
.br
.ti -1c
.RI "QColor \fBselectedTextColor\fP () const"
.br
.ti -1c
.RI "void \fBsetBorderPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetBrush\fP (const QBrush &brush)"
.br
.ti -1c
.RI "void \fBsetFont\fP (const QFont &font)"
.br
.ti -1c
.RI "void \fBsetTextColor\fP (const QColor &color)"
.br
.ti -1c
.RI "void \fBsetIconSize\fP (const QSize &size)"
.br
.ti -1c
.RI "void \fBsetIconSize\fP (int width, int height)"
.br
.ti -1c
.RI "void \fBsetIconTextPadding\fP (int padding)"
.br
.ti -1c
.RI "void \fBsetIconBorderPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetSelectableParts\fP (const SelectableParts &selectableParts)"
.br
.ti -1c
.RI "Q_SLOT void \fBsetSelectedParts\fP (const SelectableParts &selectedParts)"
.br
.ti -1c
.RI "void \fBsetSelectedBorderPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetSelectedIconBorderPen\fP (const QPen &pen)"
.br
.ti -1c
.RI "void \fBsetSelectedBrush\fP (const QBrush &brush)"
.br
.ti -1c
.RI "void \fBsetSelectedFont\fP (const QFont &font)"
.br
.ti -1c
.RI "void \fBsetSelectedTextColor\fP (const QColor &color)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "\fBQCPAbstractLegendItem\fP * \fBitem\fP (int index) const"
.br
.ti -1c
.RI "\fBQCPPlottableLegendItem\fP * \fBitemWithPlottable\fP (const \fBQCPAbstractPlottable\fP *plottable) const"
.br
.ti -1c
.RI "int \fBitemCount\fP () const"
.br
.ti -1c
.RI "bool \fBhasItem\fP (\fBQCPAbstractLegendItem\fP *\fBitem\fP) const"
.br
.ti -1c
.RI "bool \fBhasItemWithPlottable\fP (const \fBQCPAbstractPlottable\fP *plottable) const"
.br
.ti -1c
.RI "bool \fBaddItem\fP (\fBQCPAbstractLegendItem\fP *\fBitem\fP)"
.br
.ti -1c
.RI "bool \fBremoveItem\fP (int index)"
.br
.ti -1c
.RI "bool \fBremoveItem\fP (\fBQCPAbstractLegendItem\fP *\fBitem\fP)"
.br
.ti -1c
.RI "void \fBclearItems\fP ()"
.br
.ti -1c
.RI "QList< \fBQCPAbstractLegendItem\fP * > \fBselectedItems\fP () const"
.br
.in -1c

Public Member Functions inherited from \fBQCPLayoutGrid\fP
.in +1c
.ti -1c
.RI "\fBQCPLayoutGrid\fP ()"
.br
.ti -1c
.RI "int \fBrowCount\fP () const"
.br
.ti -1c
.RI "int \fBcolumnCount\fP () const"
.br
.ti -1c
.RI "QList< double > \fBcolumnStretchFactors\fP () const"
.br
.ti -1c
.RI "QList< double > \fBrowStretchFactors\fP () const"
.br
.ti -1c
.RI "int \fBcolumnSpacing\fP () const"
.br
.ti -1c
.RI "int \fBrowSpacing\fP () const"
.br
.ti -1c
.RI "int \fBwrap\fP () const"
.br
.ti -1c
.RI "\fBFillOrder\fP \fBfillOrder\fP () const"
.br
.ti -1c
.RI "void \fBsetColumnStretchFactor\fP (int column, double factor)"
.br
.ti -1c
.RI "void \fBsetColumnStretchFactors\fP (const QList< double > &factors)"
.br
.ti -1c
.RI "void \fBsetRowStretchFactor\fP (int row, double factor)"
.br
.ti -1c
.RI "void \fBsetRowStretchFactors\fP (const QList< double > &factors)"
.br
.ti -1c
.RI "void \fBsetColumnSpacing\fP (int pixels)"
.br
.ti -1c
.RI "void \fBsetRowSpacing\fP (int pixels)"
.br
.ti -1c
.RI "void \fBsetWrap\fP (int count)"
.br
.ti -1c
.RI "void \fBsetFillOrder\fP (\fBFillOrder\fP order, bool rearrange=true)"
.br
.ti -1c
.RI "virtual void \fBupdateLayout\fP () Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual int \fBelementCount\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCPLayoutElement\fP * \fBelementAt\fP (int index) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCPLayoutElement\fP * \fBtakeAt\fP (int index) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual bool \fBtake\fP (\fBQCPLayoutElement\fP *\fBelement\fP) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual QList< \fBQCPLayoutElement\fP * > \fBelements\fP (bool recursive) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBsimplify\fP () Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual QSize \fBminimumOuterSizeHint\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual QSize \fBmaximumOuterSizeHint\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "\fBQCPLayoutElement\fP * \fBelement\fP (int row, int column) const"
.br
.ti -1c
.RI "bool \fBaddElement\fP (int row, int column, \fBQCPLayoutElement\fP *\fBelement\fP)"
.br
.ti -1c
.RI "bool \fBaddElement\fP (\fBQCPLayoutElement\fP *\fBelement\fP)"
.br
.ti -1c
.RI "bool \fBhasElement\fP (int row, int column)"
.br
.ti -1c
.RI "void \fBexpandTo\fP (int newRowCount, int newColumnCount)"
.br
.ti -1c
.RI "void \fBinsertRow\fP (int newIndex)"
.br
.ti -1c
.RI "void \fBinsertColumn\fP (int newIndex)"
.br
.ti -1c
.RI "int \fBrowColToIndex\fP (int row, int column) const"
.br
.ti -1c
.RI "void \fBindexToRowCol\fP (int index, int &row, int &column) const"
.br
.in -1c

Public Member Functions inherited from \fBQCPLayout\fP
.in +1c
.ti -1c
.RI "\fBQCPLayout\fP ()"
.br
.ti -1c
.RI "virtual void \fBupdate\fP (\fBUpdatePhase\fP phase) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual QList< \fBQCPLayoutElement\fP * > \fBelements\fP (bool recursive) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual int \fBelementCount\fP () const =0"
.br
.ti -1c
.RI "virtual \fBQCPLayoutElement\fP * \fBelementAt\fP (int index) const =0"
.br
.ti -1c
.RI "virtual \fBQCPLayoutElement\fP * \fBtakeAt\fP (int index)=0"
.br
.ti -1c
.RI "virtual bool \fBtake\fP (\fBQCPLayoutElement\fP *element)=0"
.br
.ti -1c
.RI "virtual void \fBsimplify\fP ()"
.br
.ti -1c
.RI "bool \fBremoveAt\fP (int index)"
.br
.ti -1c
.RI "bool \fBremove\fP (\fBQCPLayoutElement\fP *element)"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBQCPLayoutElement\fP
.in +1c
.ti -1c
.RI "\fBQCPLayoutElement\fP (\fBQCustomPlot\fP *parentPlot=0)"
.br
.ti -1c
.RI "\fBQCPLayout\fP * \fBlayout\fP () const"
.br
.ti -1c
.RI "QRect \fBrect\fP () const"
.br
.ti -1c
.RI "QRect \fBouterRect\fP () const"
.br
.ti -1c
.RI "QMargins \fBmargins\fP () const"
.br
.ti -1c
.RI "QMargins \fBminimumMargins\fP () const"
.br
.ti -1c
.RI "QCP::MarginSides \fBautoMargins\fP () const"
.br
.ti -1c
.RI "QSize \fBminimumSize\fP () const"
.br
.ti -1c
.RI "QSize \fBmaximumSize\fP () const"
.br
.ti -1c
.RI "\fBSizeConstraintRect\fP \fBsizeConstraintRect\fP () const"
.br
.ti -1c
.RI "\fBQCPMarginGroup\fP * \fBmarginGroup\fP (\fBQCP::MarginSide\fP side) const"
.br
.ti -1c
.RI "QHash< \fBQCP::MarginSide\fP, \fBQCPMarginGroup\fP * > \fBmarginGroups\fP () const"
.br
.ti -1c
.RI "void \fBsetOuterRect\fP (const QRect &\fBrect\fP)"
.br
.ti -1c
.RI "void \fBsetMargins\fP (const QMargins &margins)"
.br
.ti -1c
.RI "void \fBsetMinimumMargins\fP (const QMargins &margins)"
.br
.ti -1c
.RI "void \fBsetAutoMargins\fP (QCP::MarginSides sides)"
.br
.ti -1c
.RI "void \fBsetMinimumSize\fP (const QSize &size)"
.br
.ti -1c
.RI "void \fBsetMinimumSize\fP (int width, int height)"
.br
.ti -1c
.RI "void \fBsetMaximumSize\fP (const QSize &size)"
.br
.ti -1c
.RI "void \fBsetMaximumSize\fP (int width, int height)"
.br
.ti -1c
.RI "void \fBsetSizeConstraintRect\fP (\fBSizeConstraintRect\fP constraintRect)"
.br
.ti -1c
.RI "void \fBsetMarginGroup\fP (QCP::MarginSides sides, \fBQCPMarginGroup\fP *group)"
.br
.ti -1c
.RI "virtual void \fBupdate\fP (\fBUpdatePhase\fP phase)"
.br
.ti -1c
.RI "virtual QSize \fBminimumOuterSizeHint\fP () const"
.br
.ti -1c
.RI "virtual QSize \fBmaximumOuterSizeHint\fP () const"
.br
.ti -1c
.RI "virtual QList< \fBQCPLayoutElement\fP * > \fBelements\fP (bool recursive) const"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE"
.br
.in -1c

Public Member Functions inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "\fBQCPLayerable\fP (\fBQCustomPlot\fP *plot, QString targetLayer=QString(), \fBQCPLayerable\fP *\fBparentLayerable\fP=0)"
.br
.ti -1c
.RI "bool \fBvisible\fP () const"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBparentPlot\fP () const"
.br
.ti -1c
.RI "\fBQCPLayerable\fP * \fBparentLayerable\fP () const"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBlayer\fP () const"
.br
.ti -1c
.RI "bool \fBantialiased\fP () const"
.br
.ti -1c
.RI "void \fBsetVisible\fP (bool on)"
.br
.ti -1c
.RI "Q_SLOT bool \fBsetLayer\fP (\fBQCPLayer\fP *layer)"
.br
.ti -1c
.RI "bool \fBsetLayer\fP (const QString &layerName)"
.br
.ti -1c
.RI "void \fBsetAntialiased\fP (bool enabled)"
.br
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos, bool onlySelectable, QVariant *details=0) const"
.br
.ti -1c
.RI "bool \fBrealVisibility\fP () const"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBparentPlotInitialized\fP (\fBQCustomPlot\fP *parentPlot) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual \fBQCP::Interaction\fP \fBselectionCategory\fP () const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBselectEvent\fP (QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdeselectEvent\fP (bool *selectionStateChanged) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "QPen \fBgetBorderPen\fP () const"
.br
.ti -1c
.RI "QBrush \fBgetBrush\fP () const"
.br
.in -1c

Protected Member Functions inherited from \fBQCPLayoutGrid\fP
.in +1c
.ti -1c
.RI "void \fBgetMinimumRowColSizes\fP (QVector< int > *minColWidths, QVector< int > *minRowHeights) const"
.br
.ti -1c
.RI "void \fBgetMaximumRowColSizes\fP (QVector< int > *maxColWidths, QVector< int > *maxRowHeights) const"
.br
.in -1c

Protected Member Functions inherited from \fBQCPLayout\fP
.in +1c
.ti -1c
.RI "virtual void \fBupdateLayout\fP ()"
.br
.ti -1c
.RI "void \fBsizeConstraintsChanged\fP () const"
.br
.ti -1c
.RI "void \fBadoptElement\fP (\fBQCPLayoutElement\fP *el)"
.br
.ti -1c
.RI "void \fBreleaseElement\fP (\fBQCPLayoutElement\fP *el)"
.br
.ti -1c
.RI "QVector< int > \fBgetSectionSizes\fP (QVector< int > maxSizes, QVector< int > minSizes, QVector< double > stretchFactors, int totalSize) const"
.br
.in -1c

Protected Member Functions inherited from \fBQCPLayoutElement\fP
.in +1c
.ti -1c
.RI "virtual int \fBcalculateAutoMargin\fP (\fBQCP::MarginSide\fP side)"
.br
.ti -1c
.RI "virtual void \fBlayoutChanged\fP ()"
.br
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter) Q_DECL_OVERRIDE"
.br
.ti -1c
.RI "virtual void \fBparentPlotInitialized\fP (\fBQCustomPlot\fP *parentPlot) Q_DECL_OVERRIDE"
.br
.in -1c

Protected Member Functions inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "virtual void \fBparentPlotInitialized\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "virtual \fBQCP::Interaction\fP \fBselectionCategory\fP () const"
.br
.ti -1c
.RI "virtual QRect \fBclipRect\fP () const"
.br
.ti -1c
.RI "virtual void \fBapplyDefaultAntialiasingHint\fP (\fBQCPPainter\fP *painter) const =0"
.br
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter)=0"
.br
.ti -1c
.RI "virtual void \fBselectEvent\fP (QMouseEvent *event, bool additive, const QVariant &details, bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBdeselectEvent\fP (bool *selectionStateChanged)"
.br
.ti -1c
.RI "virtual void \fBmousePressEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBmouseMoveEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseReleaseEvent\fP (QMouseEvent *event, const QPointF &startPos)"
.br
.ti -1c
.RI "virtual void \fBmouseDoubleClickEvent\fP (QMouseEvent *event, const QVariant &details)"
.br
.ti -1c
.RI "virtual void \fBwheelEvent\fP (QWheelEvent *event)"
.br
.ti -1c
.RI "void \fBinitializeParentPlot\fP (\fBQCustomPlot\fP *parentPlot)"
.br
.ti -1c
.RI "void \fBsetParentLayerable\fP (\fBQCPLayerable\fP *\fBparentLayerable\fP)"
.br
.ti -1c
.RI "bool \fBmoveToLayer\fP (\fBQCPLayer\fP *layer, bool prepend)"
.br
.ti -1c
.RI "void \fBapplyAntialiasingHint\fP (\fBQCPPainter\fP *painter, bool localAntialiased, \fBQCP::AntialiasedElement\fP overrideElement) const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "QPen \fBmBorderPen\fP"
.br
.ti -1c
.RI "QPen \fBmIconBorderPen\fP"
.br
.ti -1c
.RI "QBrush \fBmBrush\fP"
.br
.ti -1c
.RI "QFont \fBmFont\fP"
.br
.ti -1c
.RI "QColor \fBmTextColor\fP"
.br
.ti -1c
.RI "QSize \fBmIconSize\fP"
.br
.ti -1c
.RI "int \fBmIconTextPadding\fP"
.br
.ti -1c
.RI "SelectableParts \fBmSelectedParts\fP"
.br
.ti -1c
.RI "SelectableParts \fBmSelectableParts\fP"
.br
.ti -1c
.RI "QPen \fBmSelectedBorderPen\fP"
.br
.ti -1c
.RI "QPen \fBmSelectedIconBorderPen\fP"
.br
.ti -1c
.RI "QBrush \fBmSelectedBrush\fP"
.br
.ti -1c
.RI "QFont \fBmSelectedFont\fP"
.br
.ti -1c
.RI "QColor \fBmSelectedTextColor\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPLayoutGrid\fP
.in +1c
.ti -1c
.RI "QList< QList< \fBQCPLayoutElement\fP * > > \fBmElements\fP"
.br
.ti -1c
.RI "QList< double > \fBmColumnStretchFactors\fP"
.br
.ti -1c
.RI "QList< double > \fBmRowStretchFactors\fP"
.br
.ti -1c
.RI "int \fBmColumnSpacing\fP"
.br
.ti -1c
.RI "int \fBmRowSpacing\fP"
.br
.ti -1c
.RI "int \fBmWrap\fP"
.br
.ti -1c
.RI "\fBFillOrder\fP \fBmFillOrder\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPLayoutElement\fP
.in +1c
.ti -1c
.RI "\fBQCPLayout\fP * \fBmParentLayout\fP"
.br
.ti -1c
.RI "QSize \fBmMinimumSize\fP"
.br
.ti -1c
.RI "QSize \fBmMaximumSize\fP"
.br
.ti -1c
.RI "\fBSizeConstraintRect\fP \fBmSizeConstraintRect\fP"
.br
.ti -1c
.RI "QRect \fBmRect\fP"
.br
.ti -1c
.RI "QRect \fBmOuterRect\fP"
.br
.ti -1c
.RI "QMargins \fBmMargins\fP"
.br
.ti -1c
.RI "QMargins \fBmMinimumMargins\fP"
.br
.ti -1c
.RI "QCP::MarginSides \fBmAutoMargins\fP"
.br
.ti -1c
.RI "QHash< \fBQCP::MarginSide\fP, \fBQCPMarginGroup\fP * > \fBmMarginGroups\fP"
.br
.in -1c

Protected Attributes inherited from \fBQCPLayerable\fP
.in +1c
.ti -1c
.RI "bool \fBmVisible\fP"
.br
.ti -1c
.RI "\fBQCustomPlot\fP * \fBmParentPlot\fP"
.br
.ti -1c
.RI "QPointer< \fBQCPLayerable\fP > \fBmParentLayerable\fP"
.br
.ti -1c
.RI "\fBQCPLayer\fP * \fBmLayer\fP"
.br
.ti -1c
.RI "bool \fBmAntialiased\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBQCustomPlot\fP"
.br
.ti -1c
.RI "class \fBQCPAbstractLegendItem\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Static Protected Member Functions inherited from \fBQCPLayout\fP
.in +1c
.ti -1c
.RI "static QSize \fBgetFinalMinimumOuterSize\fP (const \fBQCPLayoutElement\fP *el)"
.br
.ti -1c
.RI "static QSize \fBgetFinalMaximumOuterSize\fP (const \fBQCPLayoutElement\fP *el)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Manages a legend inside a \fBQCustomPlot\fP\&. 

A legend is a small box somewhere in the plot which lists plottables with their name and icon\&.
.PP
A legend is populated with legend items by calling \fBQCPAbstractPlottable::addToLegend\fP on the plottable, for which a legend item shall be created\&. In the case of the main legend (\fBQCustomPlot::legend\fP), simply adding plottables to the plot while \fBQCustomPlot::setAutoAddPlottableToLegend\fP is set to true (the default) creates corresponding legend items\&. The legend item associated with a certain plottable can be removed with \fBQCPAbstractPlottable::removeFromLegend\fP\&. However, \fBQCPLegend\fP also offers an interface to add and manipulate legend items directly: \fBitem\fP, \fBitemWithPlottable\fP, \fBitemCount\fP, \fBaddItem\fP, \fBremoveItem\fP, etc\&.
.PP
Since \fBQCPLegend\fP derives from \fBQCPLayoutGrid\fP, it can be placed in any position a \fBQCPLayoutElement\fP may be positioned\&. The legend items are themselves \fBQCPLayoutElements\fP which are placed in the grid layout of the legend\&. \fBQCPLegend\fP only adds an interface specialized for handling child elements of type \fBQCPAbstractLegendItem\fP, as mentioned above\&. In principle, any other layout elements may also be added to a legend via the normal \fBQCPLayoutGrid\fP interface\&. See the special page about \fBThe Layout System\fP for examples on how to add other elements to the legend and move it outside the axis rect\&.
.PP
Use the methods \fBsetFillOrder\fP and \fBsetWrap\fP inherited from \fBQCPLayoutGrid\fP to control in which order (column first or row first) the legend is filled up when calling \fBaddItem\fP, and at which column or row wrapping occurs\&.
.PP
By default, every \fBQCustomPlot\fP has one legend (\fBQCustomPlot::legend\fP) which is placed in the inset layout of the main axis rect (\fBQCPAxisRect::insetLayout\fP)\&. To move the legend to another position inside the axis rect, use the methods of the \fBQCPLayoutInset\fP\&. To move the legend outside of the axis rect, place it anywhere else with the \fBQCPLayout/\fP \fBQCPLayoutElement\fP interface\&. 
.PP
Definition at line \fB4796\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQCPLegend::SelectablePart\fP"
Defines the selectable parts of a legend
.PP
\fBSee also\fP
.RS 4
\fBsetSelectedParts\fP, \fBsetSelectableParts\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIspNone \fP\fP
\fC0x000\fP None 
.TP
\fB\fIspLegendBox \fP\fP
\fC0x001\fP The legend box (frame) 
.TP
\fB\fIspItems \fP\fP
\fC0x002\fP Legend items individually (see \fBselectedItems\fP) 
.PP
Definition at line \fB4821\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPLegend::QCPLegend ()\fC [explicit]\fP"
Constructs a new \fBQCPLegend\fP instance with default values\&.
.PP
Note that by default, \fBQCustomPlot\fP already contains a legend ready to be used as \fBQCustomPlot::legend\fP 
.PP
Definition at line \fB18288\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QCPLegend::~QCPLegend ()\fC [virtual]\fP"

.PP
Definition at line \fB18314\fP of file \fBqcustomplot\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "bool QCPLegend::addItem (\fBQCPAbstractLegendItem\fP * item)"
Adds \fIitem\fP to the legend, if it's not present already\&. The element is arranged according to the current fill order (\fBsetFillOrder\fP) and wrapping (\fBsetWrap\fP)\&.
.PP
Returns true on sucess, i\&.e\&. if the item wasn't in the list already and has been successfuly added\&.
.PP
The legend takes ownership of the item\&.
.PP
\fBSee also\fP
.RS 4
\fBremoveItem\fP, \fBitem\fP, \fBhasItem\fP 
.RE
.PP

.PP
Definition at line \fB18643\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::applyDefaultAntialiasingHint (\fBQCPPainter\fP * painter) const\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.PP
Definition at line \fB18737\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QPen QCPLegend::borderPen () const\fC [inline]\fP"

.PP
Definition at line \fB4833\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QBrush QCPLegend::brush () const\fC [inline]\fP"

.PP
Definition at line \fB4834\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPLegend::clearItems ()"
Removes all items from the legend\&. 
.PP
Definition at line \fB18696\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::deselectEvent (bool * selectionStateChanged)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB18805\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::draw (\fBQCPPainter\fP * painter)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.PP
Definition at line \fB18767\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QFont QCPLegend::font () const\fC [inline]\fP"

.PP
Definition at line \fB4835\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPLegend::getBorderPen () const\fC [protected]\fP"

.PP
Definition at line \fB18747\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QBrush QCPLegend::getBrush () const\fC [protected]\fP"

.PP
Definition at line \fB18757\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPLegend::hasItem (\fBQCPAbstractLegendItem\fP * item) const"
Returns whether the legend contains \fIitem\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBhasItemWithPlottable\fP 
.RE
.PP

.PP
Definition at line \fB18612\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPLegend::hasItemWithPlottable (const \fBQCPAbstractPlottable\fP * plottable) const"
Returns whether the legend contains a \fBQCPPlottableLegendItem\fP which is associated with \fIplottable\fP (e\&.g\&. a \fBQCPGraph\fP*)\&. If such an item isn't in the legend, returns false\&.
.PP
\fBSee also\fP
.RS 4
\fBitemWithPlottable\fP 
.RE
.PP

.PP
Definition at line \fB18628\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QPen QCPLegend::iconBorderPen () const\fC [inline]\fP"

.PP
Definition at line \fB4839\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QSize QCPLegend::iconSize () const\fC [inline]\fP"

.PP
Definition at line \fB4837\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPLegend::iconTextPadding () const\fC [inline]\fP"

.PP
Definition at line \fB4838\fP of file \fBqcustomplot\&.h\fP\&.
.SS "\fBQCPAbstractLegendItem\fP * QCPLegend::item (int index) const"
Returns the item with index \fIi\fP\&.
.PP
Note that the linear index depends on the current fill order (\fBsetFillOrder\fP)\&.
.PP
\fBSee also\fP
.RS 4
\fBitemCount\fP, \fBaddItem\fP, \fBitemWithPlottable\fP 
.RE
.PP

.PP
Definition at line \fB18570\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "int QCPLegend::itemCount () const"
Returns the number of items currently in the legend\&.
.PP
Note that if empty cells are in the legend (e\&.g\&. by calling methods of the \fBQCPLayoutGrid\fP base class which allows creating empty cells), they are included in the returned count\&.
.PP
\fBSee also\fP
.RS 4
\fBitem\fP 
.RE
.PP

.PP
Definition at line \fB18602\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCPPlottableLegendItem\fP * QCPLegend::itemWithPlottable (const \fBQCPAbstractPlottable\fP * plottable) const"
Returns the \fBQCPPlottableLegendItem\fP which is associated with \fIplottable\fP (e\&.g\&. a \fBQCPGraph\fP*)\&. If such an item isn't in the legend, returns 0\&.
.PP
\fBSee also\fP
.RS 4
\fBhasItemWithPlottable\fP 
.RE
.PP

.PP
Definition at line \fB18581\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::parentPlotInitialized (\fBQCustomPlot\fP * parentPlot)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.PP
Definition at line \fB18830\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPLegend::removeItem (int index)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Removes the item with the specified \fIindex\fP from the legend and deletes it\&.
.PP
After successful removal, the legend is reordered according to the current fill order (\fBsetFillOrder\fP) and wrapping (\fBsetWrap\fP), so no empty cell remains where the removed \fIitem\fP was\&. If you don't want this, rather use the raw element interface of \fBQCPLayoutGrid\fP\&.
.PP
Returns true, if successful\&. Unlike \fBQCPLayoutGrid::removeAt\fP, this method only removes elements derived from \fBQCPAbstractLegendItem\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBitemCount\fP, \fBclearItems\fP 
.RE
.PP

.PP
Definition at line \fB18661\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "bool QCPLegend::removeItem (\fBQCPAbstractLegendItem\fP * item)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Removes \fIitem\fP from the legend and deletes it\&.
.PP
After successful removal, the legend is reordered according to the current fill order (\fBsetFillOrder\fP) and wrapping (\fBsetWrap\fP), so no empty cell remains where the removed \fIitem\fP was\&. If you don't want this, rather use the raw element interface of \fBQCPLayoutGrid\fP\&.
.PP
Returns true, if successful\&.
.PP
\fBSee also\fP
.RS 4
\fBclearItems\fP 
.RE
.PP

.PP
Definition at line \fB18685\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "SelectableParts QCPLegend::selectableParts () const\fC [inline]\fP"

.PP
Definition at line \fB4840\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPLegend::selectedBorderPen () const\fC [inline]\fP"

.PP
Definition at line \fB4842\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QBrush QCPLegend::selectedBrush () const\fC [inline]\fP"

.PP
Definition at line \fB4844\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QFont QCPLegend::selectedFont () const\fC [inline]\fP"

.PP
Definition at line \fB4845\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPLegend::selectedIconBorderPen () const\fC [inline]\fP"

.PP
Definition at line \fB4843\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QList< \fBQCPAbstractLegendItem\fP * > QCPLegend::selectedItems () const"
Returns the legend items that are currently selected\&. If no items are selected, the list is empty\&.
.PP
\fBSee also\fP
.RS 4
\fBQCPAbstractLegendItem::setSelected\fP, setSelectable 
.RE
.PP

.PP
Definition at line \fB18708\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QCPLegend::SelectableParts QCPLegend::selectedParts () const"

.PP
Definition at line \fB18322\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QColor QCPLegend::selectedTextColor () const\fC [inline]\fP"

.PP
Definition at line \fB4846\fP of file \fBqcustomplot\&.h\fP\&.
.SS "void QCPLegend::selectEvent (QMouseEvent * event, bool additive, const QVariant & details, bool * selectionStateChanged)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB18791\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "\fBQCP::Interaction\fP QCPLegend::selectionCategory () const\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBQCPLayerable\fP\&.
.PP
Definition at line \fB18818\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::selectionChanged (QCPLegend::SelectableParts selection)\fC [signal]\fP"
This signal is emitted when the selection state of this legend has changed\&.
.PP
\fBSee also\fP
.RS 4
\fBsetSelectedParts\fP, \fBsetSelectableParts\fP 
.RE
.PP

.SS "double QCPLegend::selectTest (const QPointF & pos, bool onlySelectable, QVariant * details = \fC0\fP) const\fC [virtual]\fP"
Layout elements are sensitive to events inside their outer rect\&. If \fIpos\fP is within the outer rect, this method returns a value corresponding to 0\&.99 times the parent plot's selection tolerance\&. However, layout elements are not selectable by default\&. So if \fIonlySelectable\fP is true, -1\&.0 is returned\&.
.PP
See \fBQCPLayerable::selectTest\fP for a general explanation of this virtual method\&.
.PP
\fBQCPLayoutElement\fP subclasses may reimplement this method to provide more specific selection test behaviour\&. 
.PP
Reimplemented from \fBQCPLayoutElement\fP\&.
.PP
Definition at line \fB18776\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::setBorderPen (const QPen & pen)"
Sets the pen, the border of the entire legend is drawn with\&. 
.PP
Definition at line \fB18343\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::setBrush (const QBrush & brush)"
Sets the brush of the legend background\&. 
.PP
Definition at line \fB18351\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::setFont (const QFont & font)"
Sets the default font of legend text\&. Legend items that draw text (e\&.g\&. the name of a graph) will use this font by default\&. However, a different font can be specified on a per-item-basis by accessing the specific legend item\&.
.PP
This function will also set \fIfont\fP on all already existing legend items\&.
.PP
\fBSee also\fP
.RS 4
\fBQCPAbstractLegendItem::setFont\fP 
.RE
.PP

.PP
Definition at line \fB18365\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::setIconBorderPen (const QPen & pen)"
Sets the pen used to draw a border around each legend icon\&. Legend items that draw an icon (e\&.g\&. a visual representation of the graph) will use this pen by default\&.
.PP
If no border is wanted, set this to \fIQt::NoPen\fP\&. 
.PP
Definition at line \fB18427\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::setIconSize (const QSize & size)"
Sets the size of legend icons\&. Legend items that draw an icon (e\&.g\&. a visual representation of the graph) will use this size by default\&. 
.PP
Definition at line \fB18398\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::setIconSize (int width, int height)"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. 
.PP
Definition at line \fB18405\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::setIconTextPadding (int padding)"
Sets the horizontal space in pixels between the legend icon and the text next to it\&. Legend items that draw an icon (e\&.g\&. a visual representation of the graph) and text (e\&.g\&. the name of the graph) will use this space by default\&. 
.PP
Definition at line \fB18416\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::setSelectableParts (const SelectableParts & selectable)"
Sets whether the user can (de-)select the parts in \fIselectable\fP by clicking on the \fBQCustomPlot\fP surface\&. (When \fBQCustomPlot::setInteractions\fP contains \fBQCP::iSelectLegend\fP\&.)
.PP
However, even when \fIselectable\fP is set to a value not allowing the selection of a specific part, it is still possible to set the selection of this part manually, by calling \fBsetSelectedParts\fP directly\&.
.PP
\fBSee also\fP
.RS 4
\fBSelectablePart\fP, \fBsetSelectedParts\fP 
.RE
.PP

.PP
Definition at line \fB18442\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::setSelectedBorderPen (const QPen & pen)"
When the legend box is selected, this pen is used to draw the border instead of the normal pen set via \fBsetBorderPen\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBsetSelectedParts\fP, \fBsetSelectableParts\fP, \fBsetSelectedBrush\fP 
.RE
.PP

.PP
Definition at line \fB18503\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::setSelectedBrush (const QBrush & brush)"
When the legend box is selected, this brush is used to draw the legend background instead of the normal brush set via \fBsetBrush\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBsetSelectedParts\fP, \fBsetSelectableParts\fP, \fBsetSelectedBorderPen\fP 
.RE
.PP

.PP
Definition at line \fB18524\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::setSelectedFont (const QFont & font)"
Sets the default font that is used by legend items when they are selected\&.
.PP
This function will also set \fIfont\fP on all already existing legend items\&.
.PP
\fBSee also\fP
.RS 4
\fBsetFont\fP, \fBQCPAbstractLegendItem::setSelectedFont\fP 
.RE
.PP

.PP
Definition at line \fB18536\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::setSelectedIconBorderPen (const QPen & pen)"
Sets the pen legend items will use to draw their icon borders, when they are selected\&.
.PP
\fBSee also\fP
.RS 4
\fBsetSelectedParts\fP, \fBsetSelectableParts\fP, \fBsetSelectedFont\fP 
.RE
.PP

.PP
Definition at line \fB18513\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::setSelectedParts (const SelectableParts & selected)"
Sets the selected state of the respective legend parts described by \fBSelectablePart\fP\&. When a part is selected, it uses a different pen/font and brush\&. If some legend items are selected and \fIselected\fP doesn't contain \fBspItems\fP, those items become deselected\&.
.PP
The entire selection mechanism is handled automatically when \fBQCustomPlot::setInteractions\fP contains iSelectLegend\&. You only need to call this function when you wish to change the selection state manually\&.
.PP
This function can change the selection state of a part even when \fBsetSelectableParts\fP was set to a value that actually excludes the part\&.
.PP
emits the \fBselectionChanged\fP signal when \fIselected\fP is different from the previous selection state\&.
.PP
Note that it doesn't make sense to set the selected state \fBspItems\fP here when it wasn't set before, because there's no way to specify which exact items to newly select\&. Do this by calling \fBQCPAbstractLegendItem::setSelected\fP directly on the legend item you wish to select\&.
.PP
\fBSee also\fP
.RS 4
\fBSelectablePart\fP, \fBsetSelectableParts\fP, \fBselectTest\fP, \fBsetSelectedBorderPen\fP, \fBsetSelectedIconBorderPen\fP, \fBsetSelectedBrush\fP, \fBsetSelectedFont\fP 
.RE
.PP

.PP
Definition at line \fB18472\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::setSelectedTextColor (const QColor & color)"
Sets the default text color that is used by legend items when they are selected\&.
.PP
This function will also set \fIcolor\fP on all already existing legend items\&.
.PP
\fBSee also\fP
.RS 4
\fBsetTextColor\fP, \fBQCPAbstractLegendItem::setSelectedTextColor\fP 
.RE
.PP

.PP
Definition at line \fB18553\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "void QCPLegend::setTextColor (const QColor & color)"
Sets the default color of legend text\&. Legend items that draw text (e\&.g\&. the name of a graph) will use this color by default\&. However, a different colors can be specified on a per-item-basis by accessing the specific legend item\&.
.PP
This function will also set \fIcolor\fP on all already existing legend items\&.
.PP
\fBSee also\fP
.RS 4
\fBQCPAbstractLegendItem::setTextColor\fP 
.RE
.PP

.PP
Definition at line \fB18384\fP of file \fBqcustomplot\&.cpp\fP\&.
.SS "QColor QCPLegend::textColor () const\fC [inline]\fP"

.PP
Definition at line \fB4836\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBQCPAbstractLegendItem\fP\fC [friend]\fP"

.PP
Definition at line \fB4915\fP of file \fBqcustomplot\&.h\fP\&.
.SS "friend class \fBQCustomPlot\fP\fC [friend]\fP"

.PP
Definition at line \fB4914\fP of file \fBqcustomplot\&.h\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "QPen QCPLegend::mBorderPen\fC [protected]\fP"

.PP
Definition at line \fB4886\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QBrush QCPLegend::mBrush\fC [protected]\fP"

.PP
Definition at line \fB4887\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QFont QCPLegend::mFont\fC [protected]\fP"

.PP
Definition at line \fB4888\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPLegend::mIconBorderPen\fC [protected]\fP"

.PP
Definition at line \fB4886\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QSize QCPLegend::mIconSize\fC [protected]\fP"

.PP
Definition at line \fB4890\fP of file \fBqcustomplot\&.h\fP\&.
.SS "int QCPLegend::mIconTextPadding\fC [protected]\fP"

.PP
Definition at line \fB4891\fP of file \fBqcustomplot\&.h\fP\&.
.SS "SelectableParts QCPLegend::mSelectableParts\fC [protected]\fP"

.PP
Definition at line \fB4892\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPLegend::mSelectedBorderPen\fC [protected]\fP"

.PP
Definition at line \fB4893\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QBrush QCPLegend::mSelectedBrush\fC [protected]\fP"

.PP
Definition at line \fB4894\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QFont QCPLegend::mSelectedFont\fC [protected]\fP"

.PP
Definition at line \fB4895\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QPen QCPLegend::mSelectedIconBorderPen\fC [protected]\fP"

.PP
Definition at line \fB4893\fP of file \fBqcustomplot\&.h\fP\&.
.SS "SelectableParts QCPLegend::mSelectedParts\fC [protected]\fP"

.PP
Definition at line \fB4892\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QColor QCPLegend::mSelectedTextColor\fC [protected]\fP"

.PP
Definition at line \fB4896\fP of file \fBqcustomplot\&.h\fP\&.
.SS "QColor QCPLegend::mTextColor\fC [protected]\fP"

.PP
Definition at line \fB4889\fP of file \fBqcustomplot\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OmronPID from the source code\&.
